---
http_interactions:
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/playlistItems?key=AIzaSyD3OAw77Zd5iI3iYjagAtYTyz5mYhDSsBg&maxResults=50&part=snippet&playlistId=PL508C30656B253DBF
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Mon, 11 May 2020 22:05:55 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-Q050=":443"; ma=2592000,h3-Q049=":443";
        ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443"; ma=2592000,h3-Q043=":443";
        ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        {
  "kind": "youtube#playlistItemListResponse",
  "etag": "Qt75Iu4pDBdsEYa_YE3ZoxpTVGw",
  "nextPageToken": "CDIQAA",
  "items": [
    {
      "kind": "youtube#playlistItem",
      "etag": "gdjx1bV94WL6miH5ZT8tynoIjwM",
      "id": "UEw1MDhDMzA2NTZCMjUzREJGLjhGM0NDQkU3QkY1MUJFRjA=",
      "snippet": {
        "publishedAt": "2020-04-30T00:54:26Z",
        "channelId": "UCH-81uaxCwAAaSgxRtxMkxg",
        "title": "40 Minute Beginner Yoga for Strength and Flexibility",
        "description": "This 40 minute beginner yoga for strength and flexibility builds on plank, backbend, and forward bends for a total body yoga class.\n\nPractice with me on OmStars commercial free! Over 1000 classes and thousands of hours of content: http://www.omstars.com. If you’re looking for yoga videos that will show you the perfect way for you to start your yoga journey then Kino MacGregor’s yoga channel is perfect for you! Whether you are new to yoga or an advanced yoga student you will find a full yoga library with all the yoga postures that you need to develop a complete yoga practice. Yoga is more than just a physical practice yoga is a lifestyle that includes living a peaceful life. Living the yoga lifestyle is about yoga practice, inner peace, yoga diet and being a good person on and off your yoga mat. Kino is a yoga teacher, author of three books, international teacher, writer, blogger, online yoga class teacher, IG yoga challenge host and much more. She co-founded Miami Life Center and Miami Yoga Magazine as well as produced six Ashtanga Yoga DVDs. Practice yoga, change your world one breath at a time. Kino believes that yoga is a vehicle for each student to experience the limitless potential of the human spirit. You don’t have to be strong or flexible to begin the yoga practice, all you need is an open heart and the inspiration to practice yoga. Unroll your mat and do the practice!\r\n\r\nFacebook - http://www.facebook.com/KinoYoga\r\nInstagram - http://www.instagram.com/KinoYoga\r\nBlog - http://www.kinoyoga.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/Djsl5WArkLk/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/Djsl5WArkLk/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/Djsl5WArkLk/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/Djsl5WArkLk/sddefault.jpg",
            "width": 640,
            "height": 480
          }
        },
        "channelTitle": "KinoYoga",
        "playlistId": "PL508C30656B253DBF",
        "position": 0,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "Djsl5WArkLk"
        }
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "InVQyXNSWEZ21PzxKFPTh-BheS0",
      "id": "UEw1MDhDMzA2NTZCMjUzREJGLjhGMTExNTAwOUI5ODM1RkE=",
      "snippet": {
        "publishedAt": "2020-04-19T17:42:36Z",
        "channelId": "UCH-81uaxCwAAaSgxRtxMkxg",
        "title": "Beginner Ashtanga, One Hour Modified Primary Series",
        "description": "Join KinoYoga for a Beginner Ashtanga, One Hour Modified Quarter Primary Series. Up to Janu Sirsasana C.\n\nPractice with me on OmStars commercial free! Over 1000 classes and thousands of hours of content: http://www.omstars.com. If you’re looking for yoga videos that will show you the perfect way for you to start your yoga journey then Kino MacGregor’s yoga channel is perfect for you! Whether you are new to yoga or an advanced yoga student you will find a full yoga library with all the yoga postures that you need to develop a complete yoga practice. Yoga is more than just a physical practice yoga is a lifestyle that includes living a peaceful life. Living the yoga lifestyle is about yoga practice, inner peace, yoga diet and being a good person on and off your yoga mat. Kino is a yoga teacher, author of three books, international teacher, writer, blogger, online yoga class teacher, IG yoga challenge host and much more. She co-founded Miami Life Center and Miami Yoga Magazine as well as produced six Ashtanga Yoga DVDs. Practice yoga, change your world one breath at a time. Kino believes that yoga is a vehicle for each student to experience the limitless potential of the human spirit. You don’t have to be strong or flexible to begin the yoga practice, all you need is an open heart and the inspiration to practice yoga. Unroll your mat and do the practice!\r\n\r\nFacebook - http://www.facebook.com/KinoYoga\r\nInstagram - http://www.instagram.com/KinoYoga\r\nBlog - http://www.kinoyoga.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/zZ7GU3HfsGg/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/zZ7GU3HfsGg/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/zZ7GU3HfsGg/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/zZ7GU3HfsGg/sddefault.jpg",
            "width": 640,
            "height": 480
          }
        },
        "channelTitle": "KinoYoga",
        "playlistId": "PL508C30656B253DBF",
        "position": 1,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "zZ7GU3HfsGg"
        }
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "iA0e_fJefJcXgGX--LugHmnqIXg",
      "id": "UEw1MDhDMzA2NTZCMjUzREJGLjlCMkI1MjcwNDVGMkQxNUE=",
      "snippet": {
        "publishedAt": "2019-11-27T16:46:17Z",
        "channelId": "UCH-81uaxCwAAaSgxRtxMkxg",
        "title": "Sunset Yoga for Relaxation — 15 Minute Practice",
        "description": "Join me for a relaxing sunset practice at the beautiful Villa Blu, part of the Luxurians Collection, in Syros, Greece. Bring your breath, body, and mind into unity in this peaceful, slow practice. \n\nPractice with me on OmStars commercial free! Over 1000 classes and thousands of hours of content: http://www.omstars.com. If you’re looking for yoga videos that will show you the perfect way for you to start your yoga journey then Kino MacGregor’s yoga channel is perfect for you! Whether you are new to yoga or an advanced yoga student you will find a full yoga library with all the yoga postures that you need to develop a complete yoga practice. Yoga is more than just a physical practice yoga is a lifestyle that includes living a peaceful life. Living the yoga lifestyle is about yoga practice, inner peace, yoga diet and being a good person on and off your yoga mat. Kino is a yoga teacher, author of three books, international teacher, writer, blogger, online yoga class teacher, IG yoga challenge host and much more. She co-founded Miami Life Center and Miami Yoga Magazine as well as produced six Ashtanga Yoga DVDs. Practice yoga, change your world one breath at a time. Kino believes that yoga is a vehicle for each student to experience the limitless potential of the human spirit. You don’t have to be strong or flexible to begin the yoga practice, all you need is an open heart and the inspiration to practice yoga. Unroll your mat and do the practice!\n\nFacebook - http://www.facebook.com/KinoYoga\nInstagram - http://www.instagram.com/KinoYoga\nBlog - http://www.kinoyoga.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/LrFCosbKKow/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/LrFCosbKKow/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/LrFCosbKKow/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/LrFCosbKKow/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/LrFCosbKKow/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "KinoYoga",
        "playlistId": "PL508C30656B253DBF",
        "position": 2,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "LrFCosbKKow"
        }
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "pw5Ux-abIXq8-6v6sOaslrrRVBA",
      "id": "UEw1MDhDMzA2NTZCMjUzREJGLjE1NDkwODQ0OUVDNDYwRTA=",
      "snippet": {
        "publishedAt": "2019-09-07T05:38:37Z",
        "channelId": "UCH-81uaxCwAAaSgxRtxMkxg",
        "title": "Easy Beginner Yoga for Everyone — 20 Minute Practice",
        "description": "When you are interested in starting yoga it can feel really intimidating. There are so many beautiful pictures and so many classes to choose from that it can feel overwhelming. Well, this is the perfect place for you to start. This is a 20 minute practice. \n\nThese five poses are accessible for everyone. You can get started with a short little practice that will open a door for you to experience the benefit of this ancient tradition. You don’t need to be strong or flexible to get started.  With these five poses you can get started on your yoga journey today.\n\n\nPractice with me on OmStars commercial free! Over 2000 classes and thousands of hours of content: http://www.omstars.com. If you’re looking for yoga videos that will show you the perfect way for you to start your yoga journey then Kino MacGregor’s yoga channel is perfect for you! Whether you are new to yoga or an advanced yoga student you will find a full yoga library with all the yoga postures that you need to develop a complete yoga practice. Yoga is more than just a physical practice yoga is a lifestyle that includes living a peaceful life. Living the yoga lifestyle is about yoga practice, inner peace, yoga diet and being a good person on and off your yoga mat. Kino is a yoga teacher, author of three books, international teacher, writer, blogger, online yoga class teacher, IG yoga challenge host and much more. She co-founded Miami Life Center and Miami Yoga Magazine as well as produced six Ashtanga Yoga DVDs. Practice yoga, change your world one breath at a time. Kino believes that yoga is a vehicle for each student to experience the limitless potential of the human spirit. You don’t have to be strong or flexible to begin the yoga practice, all you need is an open heart and the inspiration to practice yoga. Unroll your mat and do the practice!\n\nFacebook - http://www.facebook.com/KinoYoga\nInstagram - http://www.instagram.com/KinoYoga\nBlog - http://www.kinoyoga.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/EqF5Qbs8tFU/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/EqF5Qbs8tFU/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/EqF5Qbs8tFU/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/EqF5Qbs8tFU/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/EqF5Qbs8tFU/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "KinoYoga",
        "playlistId": "PL508C30656B253DBF",
        "position": 3,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "EqF5Qbs8tFU"
        }
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "iUgIXnMIHLSV9INUCvIjnz1WflI",
      "id": "UEw1MDhDMzA2NTZCMjUzREJGLkJFNjQ4MkU2RjQxODY3MzU=",
      "snippet": {
        "publishedAt": "2018-10-11T01:20:23Z",
        "channelId": "UCH-81uaxCwAAaSgxRtxMkxg",
        "title": "Easy Yoga at Home for Beginners — 30 Minute Yoga",
        "description": "This 30 minute yoga class is great for beginners.\n\nPractice with me on OmStars commercial free! Over 1000 classes and thousands of hours of content: http://www.omstars.com. If you’re looking for yoga videos that will show you the perfect way for you to start your yoga journey then Kino MacGregor’s yoga channel is perfect for you! Whether you are new to yoga or an advanced yoga student you will find a full yoga library with all the yoga postures that you need to develop a complete yoga practice. Yoga is more than just a physical practice yoga is a lifestyle that includes living a peaceful life. Living the yoga lifestyle is about yoga practice, inner peace, yoga diet and being a good person on and off your yoga mat. Kino is a yoga teacher, author of three books, international teacher, writer, blogger, online yoga class teacher, IG yoga challenge host and much more. She co-founded Miami Life Center and Miami Yoga Magazine as well as produced six Ashtanga Yoga DVDs. Practice yoga, change your world one breath at a time. Kino believes that yoga is a vehicle for each student to experience the limitless potential of the human spirit. You don’t have to be strong or flexible to begin the yoga practice, all you need is an open heart and the inspiration to practice yoga. Unroll your mat and do the practice!\r\n\r\nFacebook - http://www.facebook.com/KinoYoga\r\nInstagram - http://www.instagram.com/KinoYoga\r\nBlog - http://www.kinoyoga.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/QfEi8PaROGA/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/QfEi8PaROGA/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/QfEi8PaROGA/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/QfEi8PaROGA/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/QfEi8PaROGA/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "KinoYoga",
        "playlistId": "PL508C30656B253DBF",
        "position": 4,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "QfEi8PaROGA"
        }
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "A2dug1eznIO6tAqsgHeNKaPcFwc",
      "id": "UEw1MDhDMzA2NTZCMjUzREJGLjg1RkJGN0Q5OUExQzY0NEU=",
      "snippet": {
        "publishedAt": "2018-07-24T01:50:46Z",
        "channelId": "UCH-81uaxCwAAaSgxRtxMkxg",
        "title": "Slow and Chill Yoga — 20 Minute Practice",
        "description": "Slow and chill 20 minute yoga is good for all levels.\n\nWelcome to this Slow and Chill Yoga Class! This is great for all levels. If you want something more relaxation based, for stress relief or yin inspired this is a great class. Practice with me on OmStars commercial free! Over 1000 classes and thousands of hours of content: http://www.omstars.com. If you’re looking for yoga videos that will show you the perfect way for you to start your yoga journey then Kino MacGregor’s yoga channel is perfect for you! Whether you are new to yoga or an advanced yoga student you will find a full yoga library with all the yoga postures that you need to develop a complete yoga practice. Yoga is more than just a physical practice yoga is a lifestyle that includes living a peaceful life. Living the yoga lifestyle is about yoga practice, inner peace, yoga diet and being a good person on and off your yoga mat. Kino is a yoga teacher, author of three books, international teacher, writer, blogger, online yoga class teacher, IG yoga challenge host and much more. She co-founded Miami Life Center and Miami Yoga Magazine as well as produced six Ashtanga Yoga DVDs. Practice yoga, change your world one breath at a time. Kino believes that yoga is a vehicle for each student to experience the limitless potential of the human spirit. You don’t have to be strong or flexible to begin the yoga practice, all you need is an open heart and the inspiration to practice yoga. Unroll your mat and do the practice!\n\nFacebook - http://www.facebook.com/KinoYoga\nInstagram - http://www.instagram.com/KinoYoga\nBlog - http://www.kinoyoga.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/KtM-Pt1jzDM/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/KtM-Pt1jzDM/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/KtM-Pt1jzDM/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/KtM-Pt1jzDM/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/KtM-Pt1jzDM/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "KinoYoga",
        "playlistId": "PL508C30656B253DBF",
        "position": 5,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "KtM-Pt1jzDM"
        }
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "BpdriGYRH46JkIRb4uefYaBubr0",
      "id": "UEw1MDhDMzA2NTZCMjUzREJGLjMwMTVCRkM0RDFBM0M5RkY=",
      "snippet": {
        "publishedAt": "2017-12-31T14:15:45Z",
        "channelId": "UCH-81uaxCwAAaSgxRtxMkxg",
        "title": "Easy Beach Yoga in Antigua with Kino",
        "description": "Filmed on the beautiful island of Antigua at the Curtain Bluff resort, this is a nice gentle practice for all levels. Practice with me on OmStars commercial free! Nearly 1000 classes and thousands of hours of content: http://www.omstars.com. If you’re looking for yoga videos that will show you the perfect way for you to start your yoga journey then Kino MacGregor’s yoga channel is perfect for you! Whether you are new to yoga or an advanced yoga student you will find a full yoga library with all the yoga postures that you need to develop a complete yoga practice. Yoga is more than just a physical practice yoga is a lifestyle that includes living a peaceful life. Living the yoga lifestyle is about yoga practice, inner peace, yoga diet and being a good person on and off your yoga mat. Kino is a yoga teacher, author of three books, international teacher, writer, blogger, online yoga class teacher, IG yoga challenge host and much more. She co-founded Miami Life Center and Miami Yoga Magazine as well as produced six Ashtanga Yoga DVDs. Practice yoga, change your world one breath at a time. Kino believes that yoga is a vehicle for each student to experience the limitless potential of the human spirit. You don’t have to be strong or flexible to begin the yoga practice, all you need is an open heart and the inspiration to practice yoga. Unroll your mat and do the practice!\n\nFacebook - http://www.facebook.com/KinoYoga\nInstagram - http://www.instagram.com/KinoYoga\nBlog - http://www.kinoyoga.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/iBU_u68gpqk/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/iBU_u68gpqk/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/iBU_u68gpqk/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/iBU_u68gpqk/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/iBU_u68gpqk/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "KinoYoga",
        "playlistId": "PL508C30656B253DBF",
        "position": 6,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "iBU_u68gpqk"
        }
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "ZzR8fX8o0urg0No4O4e9ge3fQVk",
      "id": "UEw1MDhDMzA2NTZCMjUzREJGLjkzRjRFOTdFRkEwNzk0QUU=",
      "snippet": {
        "publishedAt": "2017-02-12T01:23:30Z",
        "channelId": "UCH-81uaxCwAAaSgxRtxMkxg",
        "title": "Yoga and Meditation for a Peaceful Heart",
        "description": "Practice with me on http://www.omstars.com\n\nTrain the mind with meditation and heal the body with yoga. Combine these two practices to bring the spiritual practice home in your heart. Filmed in India!\n\nIf you’re looking for yoga videos that will show you the perfect way for you to start your yoga journey then Kino MacGregor’s yoga channel is perfect for you! Whether you are new to yoga or an advanced yoga student you will find a full yoga library with all the yoga postures that you need to develop a complete yoga practice. Yoga is more than just a physical practice yoga is a lifestyle that includes living a peaceful life. Living the yoga lifestyle is about yoga practice, inner peace, yoga diet and being a good person on and off your yoga mat. Kino is a yoga teacher, author of three books, international teacher, writer, blogger, online yoga class teacher, IG yoga challenge host and much more. She co-founded Miami Life Center and Miami Yoga Magazine as well as produced six Ashtanga Yoga DVDs. Practice yoga, change your world one breath at a time. Kino believes that yoga is a vehicle for each student to experience the limitless potential of the human spirit. You don’t have to be strong or flexible to begin the yoga practice, all you need is an open heart and the inspiration to practice yoga. Unroll your mat and do the practice!\n\nFacebook - http://www.faceboo.com/KinoYoga\nInstagram - http://www.instagram.com/KinoYoga\nBlog - http://www.kinoyoga.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/oMuSFaCvMdU/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/oMuSFaCvMdU/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/oMuSFaCvMdU/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/oMuSFaCvMdU/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/oMuSFaCvMdU/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "KinoYoga",
        "playlistId": "PL508C30656B253DBF",
        "position": 7,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "oMuSFaCvMdU"
        }
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "7-33lvfo6EgzaSjLbPJjoLB1UUk",
      "id": "UEw1MDhDMzA2NTZCMjUzREJGLkRDN0E3M0Q5QkVGOUIzODM=",
      "snippet": {
        "publishedAt": "2017-02-12T01:23:21Z",
        "channelId": "UCH-81uaxCwAAaSgxRtxMkxg",
        "title": "Easy Yoga for Everyone — 15 Minute Practice",
        "description": "This easy yoga class is for everyone. The practice is always a spiritual journey down into the inner body. Never judge yourself, but instead cultivate an attitude of patience and tolerance. 15 minute yoga.\n\nFilmed at the Standard Hotel in Miami.\n\nIf you’re looking for yoga videos that will show you the perfect way for you to start your yoga journey then Kino MacGregor’s yoga channel is perfect for you! Whether you are new to yoga or an advanced yoga student you will find a full yoga library with all the yoga postures that you need to develop a complete yoga practice. Yoga is more than just a physical practice yoga is a lifestyle that includes living a peaceful life. Living the yoga lifestyle is about yoga practice, inner peace, yoga diet and being a good person on and off your yoga mat. Kino is a yoga teacher, author of three books, international teacher, writer, blogger, online yoga class teacher, IG yoga challenge host and much more. She co-founded Miami Life Center and Miami Yoga Magazine as well as produced six Ashtanga Yoga DVDs. Practice yoga, change your world one breath at a time. Kino believes that yoga is a vehicle for each student to experience the limitless potential of the human spirit. You don’t have to be strong or flexible to begin the yoga practice, all you need is an open heart and the inspiration to practice yoga. Unroll your mat and do the practice!\n\nFacebook - http://www.faceboo.com/KinoYoga\nInstagram - http://www.instagram.com/KinoYoga\nBlog - http://www.kinoyoga.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/VDUjMw90DJY/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/VDUjMw90DJY/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/VDUjMw90DJY/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/VDUjMw90DJY/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/VDUjMw90DJY/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "KinoYoga",
        "playlistId": "PL508C30656B253DBF",
        "position": 8,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "VDUjMw90DJY"
        }
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "bi1F6M6kaKAY7C25qgwjYXquyeo",
      "id": "UEw1MDhDMzA2NTZCMjUzREJGLkY3RTE2M0UzMjU0QkNDMDY=",
      "snippet": {
        "publishedAt": "2016-04-26T00:58:39Z",
        "channelId": "UCH-81uaxCwAAaSgxRtxMkxg",
        "title": "Beach Yoga for Strength, Flexibility and a Calm Mind",
        "description": "Join this Beach Yoga for Strength, Flexibility and a Calm Mind practice session with Kino to begin your yoga journey today! Perfect to relax at the end of the day or set your intention for the spiritual framework for your whole day. Be sure to subscribe to stay updated on the latest videos!\n\n\nIf you’re looking for yoga videos that will show you the perfect way for you to start your yoga journey then Kino MacGregor’s yoga channel is perfect for you! Whether you are new to yoga or an advanced yoga student you will find a full yoga library with all the yoga postures that you need to develop a complete yoga practice. Yoga is more than just a physical practice yoga is a lifestyle that includes living a peaceful life. Living the yoga lifestyle is about yoga practice, inner peace, yoga diet and being a good person on and off your yoga mat. Kino is a yoga teacher, author of three books, international teacher, writer, blogger, online yoga class teacher, IG yoga challenge host and much more. She co-founded Miami Life Center and Miami Yoga Magazine as well as produced six Ashtanga Yoga DVDs. Practice yoga, change your world one breath at a time. Kino believes that yoga is a vehicle for each student to experience the limitless potential of the human spirit. You don’t have to be strong or flexible to begin the yoga practice, all you need is an open heart and the inspiration to practice yoga. Unroll your mat and do the practice!\n\nFacebook - http://www.faceboo.com/KinoYoga\nInstagram - http://www.instagram.com/KinoYoga\nBlog - http://www.kinoyoga.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/pT7b-Yn-pZQ/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/pT7b-Yn-pZQ/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/pT7b-Yn-pZQ/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/pT7b-Yn-pZQ/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/pT7b-Yn-pZQ/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "KinoYoga",
        "playlistId": "PL508C30656B253DBF",
        "position": 9,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "pT7b-Yn-pZQ"
        }
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "aAn6xBIjF3Ya0qzxwHwy31JHWE8",
      "id": "UEw1MDhDMzA2NTZCMjUzREJGLjRFREQwQzk2NUFCRUNEOEU=",
      "snippet": {
        "publishedAt": "2016-04-19T11:53:23Z",
        "channelId": "UCH-81uaxCwAAaSgxRtxMkxg",
        "title": "Yoga for a Kind Heart and Free Spirit",
        "description": "Join Kino in this practice session to cultivate a kind heart and free spirit through yoga. Great for Beginners!\n\nIf you’re looking for yoga videos that will show you the perfect way for you to start your yoga journey then Kino MacGregor’s yoga channel is perfect for you! Whether you are new to yoga or an advanced yoga student you will find a full yoga library with all the yoga postures that you need to develop a complete yoga practice. Yoga is more than just a physical practice yoga is a lifestyle that includes living a peaceful life. Living the yoga lifestyle is about yoga practice, inner peace, yoga diet and being a good person on and off your yoga mat. Kino is a yoga teacher, author of three books, international teacher, writer, blogger, online yoga class teacher, IG yoga challenge host and much more. She co-founded Miami Life Center and Miami Yoga Magazine as well as produced six Ashtanga Yoga DVDs. Practice yoga, change your world one breath at a time. Kino believes that yoga is a vehicle for each student to experience the limitless potential of the human spirit. You don’t have to be strong or flexible to begin the yoga practice, all you need is an open heart and the inspiration to practice yoga. Unroll your mat and do the practice!\n\nFacebook - http://www.faceboo.com/KinoYoga\nInstagram - http://www.instagram.com/KinoYoga\nBlog - http://www.kinoyoga.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/BGMK0UfmdQw/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/BGMK0UfmdQw/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/BGMK0UfmdQw/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/BGMK0UfmdQw/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/BGMK0UfmdQw/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "KinoYoga",
        "playlistId": "PL508C30656B253DBF",
        "position": 10,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "BGMK0UfmdQw"
        }
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "OxeOVdIQ2ugawCc7jfpD3bJ2rq8",
      "id": "UEw1MDhDMzA2NTZCMjUzREJGLjhDQkVEN0RFQTM5RkRBODE=",
      "snippet": {
        "publishedAt": "2016-04-11T17:47:06Z",
        "channelId": "UCH-81uaxCwAAaSgxRtxMkxg",
        "title": "Yoga for Stress Relief — 20 Minute Yoga",
        "description": "Join this easy yoga for stress relief practice with Kino on Miami Beach to open your hips, strength your back and calm your mind. 20 Minute Yoga.\n\nIf you’re looking for yoga videos that will show you the perfect way for you to start your yoga journey then Kino MacGregor’s yoga channel is perfect for you! Whether you are new to yoga or an advanced yoga student you will find a full yoga library with all the yoga postures that you need to develop a complete yoga practice. Yoga is more than just a physical practice yoga is a lifestyle that includes living a peaceful life. Living the yoga lifestyle is about yoga practice, inner peace, yoga diet and being a good person on and off your yoga mat. Kino is a yoga teacher, author of three books, international teacher, writer, blogger, online yoga class teacher, IG yoga challenge host and much more. She co-founded Miami Life Center and Miami Yoga Magazine as well as produced six Ashtanga Yoga DVDs. Practice yoga, change your world one breath at a time. Kino believes that yoga is a vehicle for each student to experience the limitless potential of the human spirit. You don’t have to be strong or flexible to begin the yoga practice, all you need is an open heart and the inspiration to practice yoga. Unroll your mat and do the practice!\n\nFacebook - http://www.faceboo.com/KinoYoga\nInstagram - http://www.instagram.com/KinoYoga\nBlog - http://www.kinoyoga.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/EpuwqtnuM7A/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/EpuwqtnuM7A/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/EpuwqtnuM7A/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/EpuwqtnuM7A/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/EpuwqtnuM7A/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "KinoYoga",
        "playlistId": "PL508C30656B253DBF",
        "position": 11,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "EpuwqtnuM7A"
        }
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "PnKoiwyaSEKGbyv9-vC90SNq8Ro",
      "id": "UEw1MDhDMzA2NTZCMjUzREJGLkNCMTk2QkM5MjIyMDY2QjE=",
      "snippet": {
        "publishedAt": "2016-03-15T13:20:30Z",
        "channelId": "UCH-81uaxCwAAaSgxRtxMkxg",
        "title": "Find the Inner Body, Easy Yoga with Kino",
        "description": "This practice will help you Find the Inner Body, Easy Yoga, including poses like Marichasana A and other hip openers. Practice with me on http://www.omstars.com\n\nIf you’re looking for yoga videos that will show you the perfect way for you to start your yoga journey then Kino MacGregor’s yoga channel is perfect for you! Whether you are new to yoga or an advanced yoga student you will find a full yoga library with all the yoga postures that you need to develop a complete yoga practice. Yoga is more than just a physical practice yoga is a lifestyle that includes living a peaceful life. Living the yoga lifestyle is about yoga practice, inner peace, yoga diet and being a good person on and off your yoga mat. Kino is a yoga teacher, author of three books, international teacher, writer, blogger, online yoga class teacher, IG yoga challenge host and much more. She co-founded Miami Life Center and Miami Yoga Magazine as well as produced six Ashtanga Yoga DVDs. Practice yoga, change your world one breath at a time. Kino believes that yoga is a vehicle for each student to experience the limitless potential of the human spirit. You don’t have to be strong or flexible to begin the yoga practice, all you need is an open heart and the inspiration to practice yoga. Unroll your mat and do the practice!\n\nFacebook - http://www.faceboo.com/KinoYoga\nInstagram - http://www.instagram.com/KinoYoga\nBlog - http://www.kinoyoga.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/PU1x1McGe18/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/PU1x1McGe18/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/PU1x1McGe18/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/PU1x1McGe18/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/PU1x1McGe18/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "KinoYoga",
        "playlistId": "PL508C30656B253DBF",
        "position": 12,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "PU1x1McGe18"
        }
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "3uVfLYvzC-c5wy_3CeqVqlXricM",
      "id": "UEw1MDhDMzA2NTZCMjUzREJGLjVBN0E4ODk0Mzk0MTU1OUE=",
      "snippet": {
        "publishedAt": "2016-01-21T12:20:41Z",
        "channelId": "UCH-81uaxCwAAaSgxRtxMkxg",
        "title": "Easy Yoga Hip Opening Practice with Kino in Mysore,  India",
        "description": "This is an Easy Yoga Hip Opening Practice with Kino in Mysore,  India. Practice with me on http://www.omstars.com\n\nIf you’re looking for yoga videos that will show you the perfect way for you to start your yoga journey then Kino MacGregor’s yoga channel is perfect for you! Whether you are new to yoga or an advanced yoga student you will find a full yoga library with all the yoga postures that you need to develop a complete yoga practice. Yoga is more than just a physical practice yoga is a lifestyle that includes living a peaceful life. Living the yoga lifestyle is about yoga practice, inner peace, yoga diet and being a good person on and off your yoga mat. Kino is a yoga teacher, author of three books, international teacher, writer, blogger, online yoga class teacher, IG yoga challenge host and much more. She co-founded Miami Life Center and Miami Yoga Magazine as well as produced six Ashtanga Yoga DVDs. Practice yoga, change your world one breath at a time. Kino believes that yoga is a vehicle for each student to experience the limitless potential of the human spirit. You don’t have to be strong or flexible to begin the yoga practice, all you need is an open heart and the inspiration to practice yoga. Unroll your mat and do the practice!\n\nFacebook - http://www.faceboo.com/KinoYoga\nInstagram - http://www.instagram.com/KinoYoga\nBlog - http://www.kinoyoga.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/OFl4aF9NY34/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/OFl4aF9NY34/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/OFl4aF9NY34/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/OFl4aF9NY34/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/OFl4aF9NY34/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "KinoYoga",
        "playlistId": "PL508C30656B253DBF",
        "position": 13,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "OFl4aF9NY34"
        }
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "PaoOny5q0N0AfcQ9WBSi-iXCjEY",
      "id": "UEw1MDhDMzA2NTZCMjUzREJGLjFFMUE2MTlEMjI0NkYyNDk=",
      "snippet": {
        "publishedAt": "2016-01-21T12:14:59Z",
        "channelId": "UCH-81uaxCwAAaSgxRtxMkxg",
        "title": "Beginner Yoga Practice with Kino in Mysore, India",
        "description": "This is a great Beginner Yoga Practice with Kino filmed in Mysore, India. \n\nIf you’re looking for yoga videos that will show you the perfect way for you to start your yoga journey then Kino MacGregor’s yoga channel is perfect for you! Whether you are new to yoga or an advanced yoga student you will find a full yoga library with all the yoga postures that you need to develop a complete yoga practice. Yoga is more than just a physical practice yoga is a lifestyle that includes living a peaceful life. Living the yoga lifestyle is about yoga practice, inner peace, yoga diet and being a good person on and off your yoga mat. Kino is a yoga teacher, author of three books, international teacher, writer, blogger, online yoga class teacher, IG yoga challenge host and much more. She co-founded Miami Life Center and Miami Yoga Magazine as well as produced six Ashtanga Yoga DVDs. Practice yoga, change your world one breath at a time. Kino believes that yoga is a vehicle for each student to experience the limitless potential of the human spirit. You don’t have to be strong or flexible to begin the yoga practice, all you need is an open heart and the inspiration to practice yoga. Unroll your mat and do the practice!\n\nFacebook - http://www.faceboo.com/KinoYoga\nInstagram - http://www.instagram.com/KinoYoga\nBlog - http://www.kinoyoga.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/1tEX4y40bK4/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/1tEX4y40bK4/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/1tEX4y40bK4/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/1tEX4y40bK4/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/1tEX4y40bK4/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "KinoYoga",
        "playlistId": "PL508C30656B253DBF",
        "position": 14,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "1tEX4y40bK4"
        }
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "-TRSA_oyNzcZ91jKMhgoKoAqfJU",
      "id": "UEw1MDhDMzA2NTZCMjUzREJGLjNCM0YwMzVCRDk1MzkwODY=",
      "snippet": {
        "publishedAt": "2015-10-27T04:03:18Z",
        "channelId": "UCH-81uaxCwAAaSgxRtxMkxg",
        "title": "One Hour Beach Yoga Class with Kino",
        "description": "Join this fun full length one hour beach with Kino. Practice with me on http://www.omstars.com\n\nOriginally filmed for Periscope in a collaboration with Bree Olsen where over 30,000 people joined for the live broadcast!\n\nIf you’re looking for yoga videos that will show you the perfect way for you to start your yoga journey then Kino MacGregor’s yoga channel is perfect for you! Whether you are new to yoga or an advanced yoga student you will find a full yoga library with all the yoga postures that you need to develop a complete yoga practice. Yoga is more than just a physical practice yoga is a lifestyle that includes living a peaceful life. Living the yoga lifestyle is about yoga practice, inner peace, yoga diet and being a good person on and off your yoga mat. Kino is a yoga teacher, author of three books, international teacher, writer, blogger, online yoga class teacher, IG yoga challenge host and much more. She co-founded Miami Life Center and Miami Yoga Magazine as well as produced six Ashtanga Yoga DVDs. Practice yoga, change your world one breath at a time. Kino believes that yoga is a vehicle for each student to experience the limitless potential of the human spirit. You don’t have to be strong or flexible to begin the yoga practice, all you need is an open heart and the inspiration to practice yoga. Unroll your mat and do the practice!\n\nFacebook - http://www.faceboo.com/KinoYoga\nInstagram - http://www.instagram.com/KinoYoga\nBlog - http://www.kinoyoga.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/lDC7fcPemHo/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/lDC7fcPemHo/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/lDC7fcPemHo/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/lDC7fcPemHo/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/lDC7fcPemHo/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "KinoYoga",
        "playlistId": "PL508C30656B253DBF",
        "position": 15,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "lDC7fcPemHo"
        }
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "lseunPapBS5tdtIahA1Q-hVM4yk",
      "id": "UEw1MDhDMzA2NTZCMjUzREJGLkJBQUIyODA3ODgwQTUzQzk=",
      "snippet": {
        "publishedAt": "2015-10-19T20:55:18Z",
        "channelId": "UCH-81uaxCwAAaSgxRtxMkxg",
        "title": "Gentle Yoga and Meditation, Beginner Home Practice with Kino",
        "description": "This is a nice and easy gentle yoga and meditation practice. Perfect for a home practice in beginner yoga. Practice with me on http://www.omstars.com\n\nIf you’re looking for yoga videos that will show you the perfect way for you to start your yoga journey then Kino MacGregor’s yoga channel is perfect for you! Whether you are new to yoga or an advanced yoga student you will find a full yoga library with all the yoga postures that you need to develop a complete yoga practice. Yoga is more than just a physical practice yoga is a lifestyle that includes living a peaceful life. Living the yoga lifestyle is about yoga practice, inner peace, yoga diet and being a good person on and off your yoga mat. Kino is a yoga teacher, author of three books, international teacher, writer, blogger, online yoga class teacher, IG yoga challenge host and much more. She co-founded Miami Life Center and Miami Yoga Magazine as well as produced six Ashtanga Yoga DVDs. Practice yoga, change your world one breath at a time. Kino believes that yoga is a vehicle for each student to experience the limitless potential of the human spirit. You don’t have to be strong or flexible to begin the yoga practice, all you need is an open heart and the inspiration to practice yoga. Unroll your mat and do the practice!\n\nFacebook - http://www.faceboo.com/KinoYoga\nInstagram - http://www.instagram.com/KinoYoga\nBlog - http://www.kinoyoga.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/N3nkUwzsYME/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/N3nkUwzsYME/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/N3nkUwzsYME/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/N3nkUwzsYME/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/N3nkUwzsYME/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "KinoYoga",
        "playlistId": "PL508C30656B253DBF",
        "position": 16,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "N3nkUwzsYME"
        }
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "GMewIlEzt1-mWuJQblSs7XFBro0",
      "id": "UEw1MDhDMzA2NTZCMjUzREJGLkYwNDU2MDVFQTNCQkNEM0I=",
      "snippet": {
        "publishedAt": "2015-10-16T11:19:05Z",
        "channelId": "UCH-81uaxCwAAaSgxRtxMkxg",
        "title": "Beginner Beach Yoga, Build Up your Backbends with Kino",
        "description": "This is a nice easy beach yoga flow for backbends. Starting off with a gentle opening and building up to Purvattanasana. Practice with me on http://www.omstars.com\n\nOriginally filmed for my Periscope. Be sure to tune in there to watch the live broadcasts!\nhttp://www.periscope.tv/kinoyoga\n\nIf you’re looking for yoga videos that will show you the perfect way for you to start your yoga journey then Kino MacGregor’s yoga channel is perfect for you! Whether you are new to yoga or an advanced yoga student you will find a full yoga library with all the yoga postures that you need to develop a complete yoga practice. Yoga is more than just a physical practice yoga is a lifestyle that includes living a peaceful life. Living the yoga lifestyle is about yoga practice, inner peace, yoga diet and being a good person on and off your yoga mat. Kino is a yoga teacher, author of three books, international teacher, writer, blogger, online yoga class teacher, IG yoga challenge host and much more. She co-founded Miami Life Center and Miami Yoga Magazine as well as produced six Ashtanga Yoga DVDs. Practice yoga, change your world one breath at a time. Kino believes that yoga is a vehicle for each student to experience the limitless potential of the human spirit. You don’t have to be strong or flexible to begin the yoga practice, all you need is an open heart and the inspiration to practice yoga. Unroll your mat and do the practice!\n\nFacebook - http://www.faceboo.com/KinoYoga\nInstagram - http://www.instagram.com/KinoYoga\nBlog - http://www.kinoyoga.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/kS-nkQCW1rA/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/kS-nkQCW1rA/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/kS-nkQCW1rA/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/kS-nkQCW1rA/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/kS-nkQCW1rA/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "KinoYoga",
        "playlistId": "PL508C30656B253DBF",
        "position": 17,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "kS-nkQCW1rA"
        }
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "oTU9ky9snHlTsDraIIao1ez8zyc",
      "id": "UEw1MDhDMzA2NTZCMjUzREJGLkYyRjkxNDE0QzAyNkFBREE=",
      "snippet": {
        "publishedAt": "2015-10-07T12:50:48Z",
        "channelId": "UCH-81uaxCwAAaSgxRtxMkxg",
        "title": "Beach Yoga Arm Balances and Backbends with Kino",
        "description": "Beach yoga arm balances and easy backbends, build strength and have fun on the beach with Kino :) Practice with me on http://www.omstars.com\n\nIf you’re looking for yoga videos that will show you the perfect way for you to start your yoga journey then Kino MacGregor’s yoga channel is perfect for you! Whether you are new to yoga or an advanced yoga student you will find a full yoga library with all the yoga postures that you need to develop a complete yoga practice. Yoga is more than just a physical practice yoga is a lifestyle that includes living a peaceful life. Living the yoga lifestyle is about yoga practice, inner peace, yoga diet and being a good person on and off your yoga mat. Kino is a yoga teacher, author of three books, international teacher, writer, blogger, online yoga class teacher, IG yoga challenge host and much more. She co-founded Miami Life Center and Miami Yoga Magazine as well as produced six Ashtanga Yoga DVDs. Practice yoga, change your world one breath at a time. Kino believes that yoga is a vehicle for each student to experience the limitless potential of the human spirit. You don’t have to be strong or flexible to begin the yoga practice, all you need is an open heart and the inspiration to practice yoga. Unroll your mat and do the practice!\n\nFacebook - http://www.faceboo.com/KinoYoga\nInstagram - http://www.instagram.com/KinoYoga\nBlog - http://www.kinoyoga.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/98-CGmOFlDw/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/98-CGmOFlDw/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/98-CGmOFlDw/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/98-CGmOFlDw/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/98-CGmOFlDw/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "KinoYoga",
        "playlistId": "PL508C30656B253DBF",
        "position": 18,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "98-CGmOFlDw"
        }
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "uKuvczGNQOC1CVK15F0R6SwDAYM",
      "id": "UEw1MDhDMzA2NTZCMjUzREJGLkYzMDIxMjE2MUQwRTA0OTQ=",
      "snippet": {
        "publishedAt": "2015-10-03T12:03:36Z",
        "channelId": "UCH-81uaxCwAAaSgxRtxMkxg",
        "title": "Beach Yoga Strength Basics, Planks and More with Kino",
        "description": "Plank it out for the yoga challenge, build strength and have fun on the beach with Kino :) Originally filmed live on Kino Yoga on Periscope, be sure to join @kinoyoga there to tune in to the live broadcasts! \n\nIf you’re looking for yoga videos that will show you the perfect way for you to start your yoga journey then Kino MacGregor’s yoga channel is perfect for you! Whether you are new to yoga or an advanced yoga student you will find a full yoga library with all the yoga postures that you need to develop a complete yoga practice. Yoga is more than just a physical practice yoga is a lifestyle that includes living a peaceful life. Living the yoga lifestyle is about yoga practice, inner peace, yoga diet and being a good person on and off your yoga mat. Kino is a yoga teacher, author of three books, international teacher, writer, blogger, online yoga class teacher, IG yoga challenge host and much more. She co-founded Miami Life Center and Miami Yoga Magazine as well as produced six Ashtanga Yoga DVDs. Practice yoga, change your world one breath at a time. Kino believes that yoga is a vehicle for each student to experience the limitless potential of the human spirit. You don’t have to be strong or flexible to begin the yoga practice, all you need is an open heart and the inspiration to practice yoga. Unroll your mat and do the practice!\n\nFacebook - http://www.faceboo.com/KinoYoga\nInstagram - http://www.instagram.com/KinoYoga\nBlog - http://www.kinoyoga.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/XAn2IuzyfGs/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/XAn2IuzyfGs/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/XAn2IuzyfGs/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/XAn2IuzyfGs/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/XAn2IuzyfGs/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "KinoYoga",
        "playlistId": "PL508C30656B253DBF",
        "position": 19,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "XAn2IuzyfGs"
        }
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "oyrLycL3Gm0Pgl1rhpY6mg3qlF4",
      "id": "UEw1MDhDMzA2NTZCMjUzREJGLkY1NDM1MzkwOTYzNjNBRDk=",
      "snippet": {
        "publishedAt": "2015-09-14T18:44:57Z",
        "channelId": "UCH-81uaxCwAAaSgxRtxMkxg",
        "title": "Yoga for Relaxation and Anti-Anxiety with Kino",
        "description": "This is a great beginners yoga series to help relieve stress and anxiety and help you find a state of relaxation and peace. \n\nIf you’re looking for yoga videos that will show you the perfect way for you to start your yoga journey then Kino MacGregor’s yoga channel is perfect for you! Whether you are new to yoga or an advanced yoga student you will find a full yoga library with all the yoga postures that you need to develop a complete yoga practice. Yoga is more than just a physical practice yoga is a lifestyle that includes living a peaceful life. Living the yoga lifestyle is about yoga practice, inner peace, yoga diet and being a good person on and off your yoga mat. Kino is a yoga teacher, author of three books, international teacher, writer, blogger, online yoga class teacher, IG yoga challenge host and much more. She co-founded Miami Life Center and Miami Yoga Magazine as well as produced six Ashtanga Yoga DVDs. Practice yoga, change your world one breath at a time. Kino believes that yoga is a vehicle for each student to experience the limitless potential of the human spirit. You don’t have to be strong or flexible to begin the yoga practice, all you need is an open heart and the inspiration to practice yoga. Unroll your mat and do the practice!\n\nFacebook - http://www.faceboo.com/KinoYoga\nInstagram - http://www.instagram.com/KinoYoga\nBlog - http://www.kinoyoga.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/NehRxXFO4lY/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/NehRxXFO4lY/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/NehRxXFO4lY/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/NehRxXFO4lY/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/NehRxXFO4lY/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "KinoYoga",
        "playlistId": "PL508C30656B253DBF",
        "position": 20,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "NehRxXFO4lY"
        }
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "Isv8cuK9YNaNwZeVIBZIdFxlwD8",
      "id": "UEw1MDhDMzA2NTZCMjUzREJGLjhGNTI4RTdBQjhEQUIzQzM=",
      "snippet": {
        "publishedAt": "2015-09-14T08:37:52Z",
        "channelId": "UCH-81uaxCwAAaSgxRtxMkxg",
        "title": "Beginner Yoga Backbend Practice with Kino",
        "description": "Practice with me on http://www.omstars.com\nThe backbends presented here are the most basic from the Ashtanga Yoga method. This video is meant as a way to begin your practice of backbends, which are hard! Don't expect this to be easy. If you want to move into backbends but don't feel flexible this is the perfect practice to start with. Do this once a week for at least a month and then see how you feel. If you want a total beginner video as a guide to the practice for a newbie I'd suggest that you join my one month beginner yoga challenge as a free course on my youtube channel.\n\nIf you’re looking for yoga videos that will show you the perfect way for you to start your yoga journey then Kino MacGregor’s yoga channel is perfect for you! Whether you are new to yoga or an advanced yoga student you will find a full yoga library with all the yoga postures that you need to develop a complete yoga practice. Yoga is more than just a physical practice yoga is a lifestyle that includes living a peaceful life. Living the yoga lifestyle is about yoga practice, inner peace, yoga diet and being a good person on and off your yoga mat. Kino is a yoga teacher, author of three books, international teacher, writer, blogger, online yoga class teacher, IG yoga challenge host and much more. She co-founded Miami Life Center and Miami Yoga Magazine as well as produced six Ashtanga Yoga DVDs. Practice yoga, change your world one breath at a time. Kino believes that yoga is a vehicle for each student to experience the limitless potential of the human spirit. You don’t have to be strong or flexible to begin the yoga practice, all you need is an open heart and the inspiration to practice yoga. Unroll your mat and do the practice!\n\nFacebook - http://www.faceboo.com/KinoYoga\nInstagram - http://www.instagram.com/KinoYoga\nBlog - http://www.kinoyoga.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/OtxkUU20ZMs/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/OtxkUU20ZMs/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/OtxkUU20ZMs/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/OtxkUU20ZMs/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/OtxkUU20ZMs/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "KinoYoga",
        "playlistId": "PL508C30656B253DBF",
        "position": 21,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "OtxkUU20ZMs"
        }
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "iVSM6P9nLLT5cZ01u1jzRKJheDY",
      "id": "UEw1MDhDMzA2NTZCMjUzREJGLkRDODg4QkUzODVBRTkyMTA=",
      "snippet": {
        "publishedAt": "2015-08-31T18:24:00Z",
        "channelId": "UCH-81uaxCwAAaSgxRtxMkxg",
        "title": "Easy Yoga for Beginners with Kino",
        "description": "This is an easy yoga for beginners video with Kino. \n\nIf you’re looking for yoga videos that will show you the perfect way for you to start your yoga journey then Kino MacGregor’s yoga channel is perfect for you! Whether you are new to yoga or an advanced yoga student you will find a full yoga library with all the yoga postures that you need to develop a complete yoga practice. Yoga is more than just a physical practice yoga is a lifestyle that includes living a peaceful life. Living the yoga lifestyle is about yoga practice, inner peace, yoga diet and being a good person on and off your yoga mat. Kino is a yoga teacher, author of three books, international teacher, writer, blogger, online yoga class teacher, IG yoga challenge host and much more. She co-founded Miami Life Center and Miami Yoga Magazine as well as produced six Ashtanga Yoga DVDs. Practice yoga, change your world one breath at a time. Kino believes that yoga is a vehicle for each student to experience the limitless potential of the human spirit. You don’t have to be strong or flexible to begin the yoga practice, all you need is an open heart and the inspiration to practice yoga. Unroll your mat and do the practice!\n\nFacebook - http://www.faceboo.com/KinoYoga\nInstagram - http://www.instagram.com/KinoYoga\nBlog - http://www.kinoyoga.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/XSlouObYczo/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/XSlouObYczo/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/XSlouObYczo/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/XSlouObYczo/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/XSlouObYczo/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "KinoYoga",
        "playlistId": "PL508C30656B253DBF",
        "position": 22,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "XSlouObYczo"
        }
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "d7cnTVG1yvUkyEpnjkp-LvmUIzk",
      "id": "UEw1MDhDMzA2NTZCMjUzREJGLkY5QzE1ODJGMjgxQTVGQjE=",
      "snippet": {
        "publishedAt": "2015-08-18T01:50:07Z",
        "channelId": "UCH-81uaxCwAAaSgxRtxMkxg",
        "title": "Yoga Arm Balance, Easy Pinchamayurasana Practice with Kino",
        "description": "This video is a great prep for the challenging arm balances called Pinchamayurasana. \n\nIf you’re looking for yoga videos that will show you the perfect way for you to start your yoga journey then Kino MacGregor’s yoga channel is perfect for you! Whether you are new to yoga or an advanced yoga student you will find a full yoga library with all the yoga postures that you need to develop a complete yoga practice. Yoga is more than just a physical practice yoga is a lifestyle that includes living a peaceful life. Living the yoga lifestyle is about yoga practice, inner peace, yoga diet and being a good person on and off your yoga mat. Kino is a yoga teacher, author of three books, international teacher, writer, blogger, online yoga class teacher, IG yoga challenge host and much more. She co-founded Miami Life Center and Miami Yoga Magazine as well as produced six Ashtanga Yoga DVDs. Practice yoga, change your world one breath at a time. Kino believes that yoga is a vehicle for each student to experience the limitless potential of the human spirit. You don’t have to be strong or flexible to begin the yoga practice, all you need is an open heart and the inspiration to practice yoga. Unroll your mat and do the practice!\n\nFacebook - http://www.faceboo.com/KinoYoga\nInstagram - http://www.instagram.com/KinoYoga\nBlog - http://www.kinoyoga.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/j60s6ujj2ng/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/j60s6ujj2ng/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/j60s6ujj2ng/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/j60s6ujj2ng/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/j60s6ujj2ng/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "KinoYoga",
        "playlistId": "PL508C30656B253DBF",
        "position": 23,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "j60s6ujj2ng"
        }
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "3EnJ0a07JMz4pzGzv0dRi_674RA",
      "id": "UEw1MDhDMzA2NTZCMjUzREJGLkM1QjE5Q0I2NDc0MzJENjY=",
      "snippet": {
        "publishedAt": "2015-08-10T21:19:23Z",
        "channelId": "UCH-81uaxCwAAaSgxRtxMkxg",
        "title": "Beach Yoga: Plank it Out with Kino, Live on Periscope",
        "description": "Plank it out for the yoga challenge, build strength and have fun on the beach with Kino :) Practice with me on http://www.omstars.com\n\nIf you’re looking for yoga videos that will show you the perfect way for you to start your yoga journey then Kino MacGregor’s yoga channel is perfect for you! Whether you are new to yoga or an advanced yoga student you will find a full yoga library with all the yoga postures that you need to develop a complete yoga practice. Yoga is more than just a physical practice yoga is a lifestyle that includes living a peaceful life. Living the yoga lifestyle is about yoga practice, inner peace, yoga diet and being a good person on and off your yoga mat. Kino is a yoga teacher, author of three books, international teacher, writer, blogger, online yoga class teacher, IG yoga challenge host and much more. She co-founded Miami Life Center and Miami Yoga Magazine as well as produced six Ashtanga Yoga DVDs. Practice yoga, change your world one breath at a time. Kino believes that yoga is a vehicle for each student to experience the limitless potential of the human spirit. You don’t have to be strong or flexible to begin the yoga practice, all you need is an open heart and the inspiration to practice yoga. Unroll your mat and do the practice!\n\nFacebook - http://www.faceboo.com/KinoYoga\nInstagram - http://www.instagram.com/KinoYoga\nBlog - http://www.kinoyoga.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/5W76RkycwZw/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/5W76RkycwZw/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/5W76RkycwZw/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/5W76RkycwZw/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/5W76RkycwZw/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "KinoYoga",
        "playlistId": "PL508C30656B253DBF",
        "position": 24,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "5W76RkycwZw"
        }
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "NsjuS6pvtDKBnlUhdYd50SzRuak",
      "id": "UEw1MDhDMzA2NTZCMjUzREJGLkIyMjc1NjQ2RkFGMjg1RjA=",
      "snippet": {
        "publishedAt": "2015-08-04T12:14:50Z",
        "channelId": "UCH-81uaxCwAAaSgxRtxMkxg",
        "title": "Yoga for Beginners, Journey into Strength with Kino",
        "description": "This yoga for beginners focuses on a journey into strength. This is the perfect place for you to begin working on the core, shoulders and mental work of yoga. Practice with me on http://www.omstars.com\n\nIf you’re looking for yoga videos that will show you the perfect way for you to start your yoga journey then Kino MacGregor’s yoga channel is perfect for you! Whether you are new to yoga or an advanced yoga student you will find a full yoga library with all the yoga postures that you need to develop a complete yoga practice. Yoga is more than just a physical practice yoga is a lifestyle that includes living a peaceful life. Living the yoga lifestyle is about yoga practice, inner peace, yoga diet and being a good person on and off your yoga mat. Kino is a yoga teacher, author of three books, international teacher, writer, blogger, online yoga class teacher, IG yoga challenge host and much more. She co-founded Miami Life Center and Miami Yoga Magazine as well as produced six Ashtanga Yoga DVDs. Practice yoga, change your world one breath at a time. Kino believes that yoga is a vehicle for each student to experience the limitless potential of the human spirit. You don’t have to be strong or flexible to begin the yoga practice, all you need is an open heart and the inspiration to practice yoga. Unroll your mat and do the practice!\n\nFacebook - http://www.faceboo.com/KinoYoga\nInstagram - http://www.instagram.com/KinoYoga\nBlog - http://www.kinoyoga.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/U1Wx2rcfl-A/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/U1Wx2rcfl-A/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/U1Wx2rcfl-A/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/U1Wx2rcfl-A/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/U1Wx2rcfl-A/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "KinoYoga",
        "playlistId": "PL508C30656B253DBF",
        "position": 25,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "U1Wx2rcfl-A"
        }
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "Os5xBpOEPRitTSJhUGYRGj3vgBA",
      "id": "UEw1MDhDMzA2NTZCMjUzREJGLjYyRENDMkFGOTNCNDI3QjA=",
      "snippet": {
        "publishedAt": "2015-07-28T13:29:03Z",
        "channelId": "UCH-81uaxCwAAaSgxRtxMkxg",
        "title": "Yoga for Beginners with Kino",
        "description": "This easy yoga for beginners series is the perfect place to start your journey! \n\nIf you’re looking for yoga videos that will show you the perfect way for you to start your yoga journey then Kino MacGregor’s yoga channel is perfect for you! Whether you are new to yoga or an advanced yoga student you will find a full yoga library with all the yoga postures that you need to develop a complete yoga practice. Yoga is more than just a physical practice yoga is a lifestyle that includes living a peaceful life. Living the yoga lifestyle is about yoga practice, inner peace, yoga diet and being a good person on and off your yoga mat. Kino is a yoga teacher, author of three books, international teacher, writer, blogger, online yoga class teacher, IG yoga challenge host and much more. She co-founded Miami Life Center and Miami Yoga Magazine as well as produced six Ashtanga Yoga DVDs. Practice yoga, change your world one breath at a time. Kino believes that yoga is a vehicle for each student to experience the limitless potential of the human spirit. You don’t have to be strong or flexible to begin the yoga practice, all you need is an open heart and the inspiration to practice yoga. Unroll your mat and do the practice!\n\nFacebook - http://www.faceboo.com/KinoYoga\nInstagram - http://www.instagram.com/KinoYoga\nBlog - http://www.kinoyoga.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/BWiA0-9fMAE/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/BWiA0-9fMAE/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/BWiA0-9fMAE/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/BWiA0-9fMAE/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/BWiA0-9fMAE/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "KinoYoga",
        "playlistId": "PL508C30656B253DBF",
        "position": 26,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "BWiA0-9fMAE"
        }
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "YpY0eDpef7KkPvoed_iPiXMhxi0",
      "id": "UEw1MDhDMzA2NTZCMjUzREJGLkUxRjAyOTlGNTczNDc2OUQ=",
      "snippet": {
        "publishedAt": "2015-07-21T13:13:22Z",
        "channelId": "UCH-81uaxCwAAaSgxRtxMkxg",
        "title": "Yoga Therapeutics with Kino: Sciatica, Shoulders and Hamstrings",
        "description": "This video is a yoga therapeutics sequence designed to target sciatica, stiff shoulders and tight hamstrings. Practice with me on http://www.omstars.com\n\nIf you’re looking for yoga videos that will show you the perfect way for you to start your yoga journey then Kino MacGregor’s yoga channel is perfect for you! Whether you are new to yoga or an advanced yoga student you will find a full yoga library with all the yoga postures that you need to develop a complete yoga practice. Yoga is more than just a physical practice yoga is a lifestyle that includes living a peaceful life. Living the yoga lifestyle is about yoga practice, inner peace, yoga diet and being a good person on and off your yoga mat. Kino is a yoga teacher, author of three books, international teacher, writer, blogger, online yoga class teacher, IG yoga challenge host and much more. She co-founded Miami Life Center and Miami Yoga Magazine as well as produced six Ashtanga Yoga DVDs. Practice yoga, change your world one breath at a time. Kino believes that yoga is a vehicle for each student to experience the limitless potential of the human spirit. You don’t have to be strong or flexible to begin the yoga practice, all you need is an open heart and the inspiration to practice yoga. Unroll your mat and do the practice!\n\nFacebook - http://www.faceboo.com/KinoYoga\nInstagram - http://www.instagram.com/KinoYoga\nBlog - http://www.kinoyoga.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/6d0OwDFipPU/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/6d0OwDFipPU/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/6d0OwDFipPU/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/6d0OwDFipPU/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/6d0OwDFipPU/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "KinoYoga",
        "playlistId": "PL508C30656B253DBF",
        "position": 27,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "6d0OwDFipPU"
        }
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "g0Oid7iFqTSXT6mZYQsJ5tHC8aQ",
      "id": "UEw1MDhDMzA2NTZCMjUzREJGLjM2MjNERjdFQzc3MTU5OEY=",
      "snippet": {
        "publishedAt": "2015-07-17T09:09:44Z",
        "channelId": "UCH-81uaxCwAAaSgxRtxMkxg",
        "title": "Yoga for Strength, Beginner Arm Balances with Kino",
        "description": "Practice with me on http://www.omstars.com This is a beginner yoga arm balance practice with Kino. It's perfect when you're looking to build core strength and just starting the practice and you want try some yoga arm balances like Bakasana, Tripod Headstand.\n\nIf you’re looking for yoga videos that will show you the perfect way for you to start your yoga journey then Kino MacGregor’s yoga channel is perfect for you! Whether you are new to yoga or an advanced yoga student you will find a full yoga library with all the yoga postures that you need to develop a complete yoga practice. Yoga is more than just a physical practice yoga is a lifestyle that includes living a peaceful life. Living the yoga lifestyle is about yoga practice, inner peace, yoga diet and being a good person on and off your yoga mat. Kino is a yoga teacher, author of three books, international teacher, writer, blogger, online yoga class teacher, IG yoga challenge host and much more. She co-founded Miami Life Center and Miami Yoga Magazine as well as produced six Ashtanga Yoga DVDs. Practice yoga, change your world one breath at a time. Kino believes that yoga is a vehicle for each student to experience the limitless potential of the human spirit. You don’t have to be strong or flexible to begin the yoga practice, all you need is an open heart and the inspiration to practice yoga. Unroll your mat and do the practice!\n\nFacebook - http://www.faceboo.com/KinoYoga\nInstagram - http://www.instagram.com/KinoYoga\nBlog - http://www.kinoyoga.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/9eUNaaGXOZ4/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/9eUNaaGXOZ4/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/9eUNaaGXOZ4/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/9eUNaaGXOZ4/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/9eUNaaGXOZ4/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "KinoYoga",
        "playlistId": "PL508C30656B253DBF",
        "position": 28,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "9eUNaaGXOZ4"
        }
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "Vb3_i6MBUkmBWf4NUIEPLRNJQCQ",
      "id": "UEw1MDhDMzA2NTZCMjUzREJGLjdGRUVCQkI5NDQ2NkZDOTE=",
      "snippet": {
        "publishedAt": "2015-07-07T09:56:07Z",
        "channelId": "UCH-81uaxCwAAaSgxRtxMkxg",
        "title": "Yoga for Stress Relief and Relaxation with Kino",
        "description": "This video is a complete practice of Yoga for Stress Relief and Relaxation with Kino. It's great for beginners who are just starting to practice yoga. \n\nIf you’re looking for yoga videos that will show you the perfect way for you to start your yoga journey then Kino MacGregor’s yoga channel is perfect for you! Whether you are new to yoga or an advanced yoga student you will find a full yoga library with all the yoga postures that you need to develop a complete yoga practice. Yoga is more than just a physical practice yoga is a lifestyle that includes living a peaceful life. Living the yoga lifestyle is about yoga practice, inner peace, yoga diet and being a good person on and off your yoga mat. Kino is a yoga teacher, author of three books, international teacher, writer, blogger, online yoga class teacher, IG yoga challenge host and much more. She co-founded Miami Life Center and Miami Yoga Magazine as well as produced six Ashtanga Yoga DVDs. Practice yoga, change your world one breath at a time. Kino believes that yoga is a vehicle for each student to experience the limitless potential of the human spirit. You don’t have to be strong or flexible to begin the yoga practice, all you need is an open heart and the inspiration to practice yoga. Unroll your mat and do the practice!\n\nFacebook - http://www.faceboo.com/KinoYoga\nInstagram - http://www.instagram.com/KinoYoga\nBlog - http://www.kinoyoga.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/pnbw9NJolfs/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/pnbw9NJolfs/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/pnbw9NJolfs/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/pnbw9NJolfs/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/pnbw9NJolfs/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "KinoYoga",
        "playlistId": "PL508C30656B253DBF",
        "position": 29,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "pnbw9NJolfs"
        }
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "t-k0qCr5wv_kMySpsr-U0L1LRBA",
      "id": "UEw1MDhDMzA2NTZCMjUzREJGLjdBQzEzNjgxOTEwNjM3QUM=",
      "snippet": {
        "publishedAt": "2015-06-29T17:47:15Z",
        "channelId": "UCH-81uaxCwAAaSgxRtxMkxg",
        "title": "Yoga for Open Hips, Full Practice with Kino",
        "description": "This video is a full length practice session with Kino. Join this class for yoga to open your hips.\n\nIf you’re looking for yoga videos that will show you the perfect way for you to start your yoga journey then Kino MacGregor’s yoga channel is perfect for you! Whether you are new to yoga or an advanced yoga student you will find a full yoga library with all the yoga postures that you need to develop a complete yoga practice. Yoga is more than just a physical practice yoga is a lifestyle that includes living a peaceful life. Living the yoga lifestyle is about yoga practice, inner peace, yoga diet and being a good person on and off your yoga mat. Kino is a yoga teacher, author of three books, international teacher, writer, blogger, online yoga class teacher, IG yoga challenge host and much more. She co-founded Miami Life Center and Miami Yoga Magazine as well as produced six Ashtanga Yoga DVDs. Practice yoga, change your world one breath at a time. Kino believes that yoga is a vehicle for each student to experience the limitless potential of the human spirit. You don’t have to be strong or flexible to begin the yoga practice, all you need is an open heart and the inspiration to practice yoga. Unroll your mat and do the practice!\n\nFacebook - http://www.facebook.com/KinoYoga\nInstagram - http://www.instagram.com/KinoYoga\nBlog - http://www.kinoyoga.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/8ElrGb-Oj_0/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/8ElrGb-Oj_0/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/8ElrGb-Oj_0/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/8ElrGb-Oj_0/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/8ElrGb-Oj_0/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "KinoYoga",
        "playlistId": "PL508C30656B253DBF",
        "position": 30,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "8ElrGb-Oj_0"
        }
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "NEe5fgbVCgRuTOJletADbX0cy8M",
      "id": "UEw1MDhDMzA2NTZCMjUzREJGLkUyNTFEOEQzNEJDQzdDMDY=",
      "snippet": {
        "publishedAt": "2015-06-23T03:13:43Z",
        "channelId": "UCH-81uaxCwAAaSgxRtxMkxg",
        "title": "Beginners Yoga Detox Full Class with Kino",
        "description": "This is a beginners yoga detox full class with Kino. A great place to start your practice and feel the inner fire of purification.\n\nIf you’re looking for yoga videos that will show you the perfect way for you to start your yoga journey then Kino MacGregor’s yoga channel is perfect for you! Whether you are new to yoga or an advanced yoga student you will find a full yoga library with all the yoga postures that you need to develop a complete yoga practice. Yoga is more than just a physical practice yoga is a lifestyle that includes living a peaceful life. Living the yoga lifestyle is about yoga practice, inner peace, yoga diet and being a good person on and off your yoga mat. Kino is a yoga teacher, author of three books, international teacher, writer, blogger, online yoga class teacher, IG yoga challenge host and much more. She co-founded Miami Life Center and Miami Yoga Magazine as well as produced six Ashtanga Yoga DVDs. Practice yoga, change your world one breath at a time. Kino believes that yoga is a vehicle for each student to experience the limitless potential of the human spirit. You don’t have to be strong or flexible to begin the yoga practice, all you need is an open heart and the inspiration to practice yoga. Unroll your mat and do the practice!\n\nFacebook - http://www.facebook.com/KinoYoga\nInstagram - http://www.instagram.com/KinoYoga\nBlog - http://www.kinoyoga.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/TLUCjtjGusk/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/TLUCjtjGusk/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/TLUCjtjGusk/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/TLUCjtjGusk/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/TLUCjtjGusk/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "KinoYoga",
        "playlistId": "PL508C30656B253DBF",
        "position": 31,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "TLUCjtjGusk"
        }
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "uAkHpKsyPvthZENrdZfl0t0qMwg",
      "id": "UEw1MDhDMzA2NTZCMjUzREJGLjM1MkUzMzk2QzU3RDVBNzI=",
      "snippet": {
        "publishedAt": "2015-06-17T23:59:59Z",
        "channelId": "UCH-81uaxCwAAaSgxRtxMkxg",
        "title": "Beginner Yoga Strength Basics, 15 Minute Practice with Kino",
        "description": "This video is a Beginner Yoga Strength Basic full 15 minute practice with Kino.\n\nIf you’re looking for yoga videos that will show you the perfect way for you to start your yoga journey then Kino MacGregor’s yoga channel is perfect for you! Whether you are new to yoga or an advanced yoga student you will find a full yoga library with all the yoga postures that you need to develop a complete yoga practice. Yoga is more than just a physical practice yoga is a lifestyle that includes living a peaceful life. Living the yoga lifestyle is about yoga practice, inner peace, yoga diet and being a good person on and off your yoga mat. Kino is a yoga teacher, author of three books, international teacher, writer, blogger, online yoga class teacher, IG yoga challenge host and much more. She co-founded Miami Life Center and Miami Yoga Magazine as well as produced six Ashtanga Yoga DVDs. Practice yoga, change your world one breath at a time. Kino believes that yoga is a vehicle for each student to experience the limitless potential of the human spirit. You don’t have to be strong or flexible to begin the yoga practice, all you need is an open heart and the inspiration to practice yoga. Unroll your mat and do the practice!\n\nFacebook - http://www.facebook.com/KinoYoga\nInstagram - http://www.instagram.com/KinoYoga\nBlog - http://www.kinoyoga.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/hOn7zyRRm-Q/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/hOn7zyRRm-Q/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/hOn7zyRRm-Q/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/hOn7zyRRm-Q/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/hOn7zyRRm-Q/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "KinoYoga",
        "playlistId": "PL508C30656B253DBF",
        "position": 32,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "hOn7zyRRm-Q"
        }
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "ZH0PGZVsAkF_7JbLouwuF4pfU0U",
      "id": "UEw1MDhDMzA2NTZCMjUzREJGLjgxMzIzOTVEQzk0RUY4REU=",
      "snippet": {
        "publishedAt": "2015-06-09T02:27:15Z",
        "channelId": "UCH-81uaxCwAAaSgxRtxMkxg",
        "title": "Beginner Ashtanga, Practice the Sun Salutations with Kino",
        "description": "This video is Beginner Ashtanga Yoga. It's a perfect place to start for just working on the basics of the Ashtanga Yoga practice, including the Sun Salutations. Practice with me on http://www.omstars.com\n\nIf you’re looking for yoga videos that will show you the perfect way for you to start your yoga journey then Kino MacGregor’s yoga channel is perfect for you! Whether you are new to yoga or an advanced yoga student you will find a full yoga library with all the yoga postures that you need to develop a complete yoga practice. Yoga is more than just a physical practice yoga is a lifestyle that includes living a peaceful life. Living the yoga lifestyle is about yoga practice, inner peace, yoga diet and being a good person on and off your yoga mat. Kino is a yoga teacher, author of three books, international teacher, writer, blogger, online yoga class teacher, IG yoga challenge host and much more. She co-founded Miami Life Center and Miami Yoga Magazine as well as produced six Ashtanga Yoga DVDs. Practice yoga, change your world one breath at a time. Kino believes that yoga is a vehicle for each student to experience the limitless potential of the human spirit. You don’t have to be strong or flexible to begin the yoga practice, all you need is an open heart and the inspiration to practice yoga. Unroll your mat and do the practice!\n\nFacebook - http://www.facebook.com/KinoYoga\nInstagram - http://www.instagram.com/KinoYoga\nBlog - http://www.kinoyoga.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/UZAtJ9IjlJI/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/UZAtJ9IjlJI/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/UZAtJ9IjlJI/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/UZAtJ9IjlJI/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/UZAtJ9IjlJI/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "KinoYoga",
        "playlistId": "PL508C30656B253DBF",
        "position": 33,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "UZAtJ9IjlJI"
        }
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "stqNWSOh6J1u1gb33IyzNv_1rwc",
      "id": "UEw1MDhDMzA2NTZCMjUzREJGLkUzNEM4OTZFRjg5ODg1NDE=",
      "snippet": {
        "publishedAt": "2015-06-02T04:16:25Z",
        "channelId": "UCH-81uaxCwAAaSgxRtxMkxg",
        "title": "Beginner Yoga Core Strength, Ten Minute Practice with Kino",
        "description": "This video is a beginner yoga for core strength full ten minute practice. It is for all levels. \n\nIf you’re looking for yoga videos that will show you the perfect way for you to start your yoga journey then Kino MacGregor’s yoga channel is perfect for you! Whether you are new to yoga or an advanced yoga student you will find a full yoga library with all the yoga postures that you need to develop a complete yoga practice. Yoga is more than just a physical practice yoga is a lifestyle that includes living a peaceful life. Living the yoga lifestyle is about yoga practice, inner peace, yoga diet and being a good person on and off your yoga mat. Kino is a yoga teacher, author of three books, international teacher, writer, blogger, online yoga class teacher, IG yoga challenge host and much more. She co-founded Miami Life Center and Miami Yoga Magazine as well as produced six Ashtanga Yoga DVDs. Practice yoga, change your world one breath at a time. Kino believes that yoga is a vehicle for each student to experience the limitless potential of the human spirit. You don’t have to be strong or flexible to begin the yoga practice, all you need is an open heart and the inspiration to practice yoga. Unroll your mat and do the practice!\n\nFacebook - http://www.facebook.com/KinoYoga\nInstagram - http://www.instagram.com/KinoYoga\nBlog - http://www.kinoyoga.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/eV8wVvlGq50/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/eV8wVvlGq50/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/eV8wVvlGq50/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/eV8wVvlGq50/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/eV8wVvlGq50/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "KinoYoga",
        "playlistId": "PL508C30656B253DBF",
        "position": 34,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "eV8wVvlGq50"
        }
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "ZB6Q_mZFpe7_qEfKWjbJtPvu7XY",
      "id": "UEw1MDhDMzA2NTZCMjUzREJGLjU2OEEyQzU5MzhENzFEQjk=",
      "snippet": {
        "publishedAt": "2014-05-22T22:45:50Z",
        "channelId": "UCH-81uaxCwAAaSgxRtxMkxg",
        "title": "Easy Yoga Passive Stretch for Forward Bend with Kino",
        "description": "If you’re looking for yoga videos that will show you the perfect way for you to start your yoga journey then Kino MacGregor’s yoga channel is perfect for you! Whether you are new to yoga or an advanced yoga student you will find a full yoga library with all the yoga postures that you need to develop a complete yoga practice. Yoga is more than just a physical practice yoga is a lifestyle that includes living a peaceful life. Living the yoga lifestyle is about yoga practice, inner peace, yoga diet and being a good person on and off your yoga mat. Kino is a yoga teacher, author of three books, international teacher, writer, blogger, online yoga class teacher, IG yoga challenge host and much more. She co-founded Miami Life Center and Miami Yoga Magazine as well as produced six Ashtanga Yoga DVDs. Practice yoga, change your world one breath at a time. Kino believes that yoga is a vehicle for each student to experience the limitless potential of the human spirit. You don’t have to be strong or flexible to begin the yoga practice, all you need is an open heart and the inspiration to practice yoga. Unroll your mat and do the practice!\n\nFacebook - http://www.facebook.com/KinoYoga\nInstagram - http://www.instagram.com/KinoYoga\nBlog - http://www.kinoyoga.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/aIwmQMmIdbM/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/aIwmQMmIdbM/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/aIwmQMmIdbM/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/aIwmQMmIdbM/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/aIwmQMmIdbM/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "KinoYoga",
        "playlistId": "PL508C30656B253DBF",
        "position": 35,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "aIwmQMmIdbM"
        }
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "rqTXCL0YF4IDc3rReO7ojabXhok",
      "id": "UEw1MDhDMzA2NTZCMjUzREJGLjRERUU0MzAwOTUwRjEzMEM=",
      "snippet": {
        "publishedAt": "2014-05-22T22:36:15Z",
        "channelId": "UCH-81uaxCwAAaSgxRtxMkxg",
        "title": "Beginner Yoga Arm Balance: Bakasana with Kino",
        "description": "Practice with me on http://www.omstars.com\n\nIf you’re looking for yoga videos that will show you the perfect way for you to start your yoga journey then Kino MacGregor’s yoga channel is perfect for you! Whether you are new to yoga or an advanced yoga student you will find a full yoga library with all the yoga postures that you need to develop a complete yoga practice. Yoga is more than just a physical practice yoga is a lifestyle that includes living a peaceful life. Living the yoga lifestyle is about yoga practice, inner peace, yoga diet and being a good person on and off your yoga mat. Kino is a yoga teacher, author of three books, international teacher, writer, blogger, online yoga class teacher, IG yoga challenge host and much more. She co-founded Miami Life Center and Miami Yoga Magazine as well as produced six Ashtanga Yoga DVDs. Practice yoga, change your world one breath at a time. Kino believes that yoga is a vehicle for each student to experience the limitless potential of the human spirit. You don’t have to be strong or flexible to begin the yoga practice, all you need is an open heart and the inspiration to practice yoga. Unroll your mat and do the practice!\n\nFacebook - http://www.facebook.com/KinoYoga\nInstagram - http://www.instagram.com/KinoYoga\nBlog - http://www.kinoyoga.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/tmTrSGBvaoE/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/tmTrSGBvaoE/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/tmTrSGBvaoE/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/tmTrSGBvaoE/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/tmTrSGBvaoE/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "KinoYoga",
        "playlistId": "PL508C30656B253DBF",
        "position": 36,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "tmTrSGBvaoE"
        }
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "XThxfqeuOx9zQMPmb-uiCOQYHbI",
      "id": "UEw1MDhDMzA2NTZCMjUzREJGLjlDM0U5REIxQjEzNDFCRDU=",
      "snippet": {
        "publishedAt": "2014-05-22T22:35:52Z",
        "channelId": "UCH-81uaxCwAAaSgxRtxMkxg",
        "title": "Yoga Cobra Posture, Bujangasana with Kino",
        "description": "If you’re looking for yoga videos that will show you the perfect way for you to start your yoga journey then Kino MacGregor’s yoga channel is perfect for you! Whether you are new to yoga or an advanced yoga student you will find a full yoga library with all the yoga postures that you need to develop a complete yoga practice. Yoga is more than just a physical practice yoga is a lifestyle that includes living a peaceful life. Living the yoga lifestyle is about yoga practice, inner peace, yoga diet and being a good person on and off your yoga mat. Kino is a yoga teacher, author of three books, international teacher, writer, blogger, online yoga class teacher, IG yoga challenge host and much more. She co-founded Miami Life Center and Miami Yoga Magazine as well as produced six Ashtanga Yoga DVDs. Practice yoga, change your world one breath at a time. Kino believes that yoga is a vehicle for each student to experience the limitless potential of the human spirit. You don’t have to be strong or flexible to begin the yoga practice, all you need is an open heart and the inspiration to practice yoga. Unroll your mat and do the practice!\n\nFacebook - http://www.facebook.com/KinoYoga\nInstagram - http://www.instagram.com/KinoYoga\nBlog - http://www.kinoyoga.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/WABVlSEz-cc/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/WABVlSEz-cc/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/WABVlSEz-cc/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/WABVlSEz-cc/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/WABVlSEz-cc/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "KinoYoga",
        "playlistId": "PL508C30656B253DBF",
        "position": 37,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "WABVlSEz-cc"
        }
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "LaglolkRizZhdt0kNipDRszIXD4",
      "id": "UEw1MDhDMzA2NTZCMjUzREJGLkRCMTM3MDA3MzU2RTExNTE=",
      "snippet": {
        "publishedAt": "2014-05-22T22:34:16Z",
        "channelId": "UCH-81uaxCwAAaSgxRtxMkxg",
        "title": "Easy Yoga Backbends with Kino",
        "description": "If you’re looking for yoga videos that will show you the perfect way for you to start your yoga journey then Kino MacGregor’s yoga channel is perfect for you! Whether you are new to yoga or an advanced yoga student you will find a full yoga library with all the yoga postures that you need to develop a complete yoga practice. Yoga is more than just a physical practice yoga is a lifestyle that includes living a peaceful life. Living the yoga lifestyle is about yoga practice, inner peace, yoga diet and being a good person on and off your yoga mat. Kino is a yoga teacher, author of three books, international teacher, writer, blogger, online yoga class teacher, IG yoga challenge host and much more. She co-founded Miami Life Center and Miami Yoga Magazine as well as produced six Ashtanga Yoga DVDs. Practice yoga, change your world one breath at a time. Kino believes that yoga is a vehicle for each student to experience the limitless potential of the human spirit. You don’t have to be strong or flexible to begin the yoga practice, all you need is an open heart and the inspiration to practice yoga. Unroll your mat and do the practice!\n\nFacebook - http://www.facebook.com/KinoYoga\nInstagram - http://www.instagram.com/KinoYoga\nBlog - http://www.kinoyoga.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/mvdTxWBdOik/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/mvdTxWBdOik/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/mvdTxWBdOik/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/mvdTxWBdOik/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/mvdTxWBdOik/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "KinoYoga",
        "playlistId": "PL508C30656B253DBF",
        "position": 38,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "mvdTxWBdOik"
        }
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "3dA6x-2opOIDDJWqEAPS-eB_Z3A",
      "id": "UEw1MDhDMzA2NTZCMjUzREJGLkM0Q0JFQjlFMTEwMUJFMzU=",
      "snippet": {
        "publishedAt": "2014-05-22T22:33:42Z",
        "channelId": "UCH-81uaxCwAAaSgxRtxMkxg",
        "title": "Yoga Therapy Technique for Easy Backbends and Healthy Discs with Kino MacGregor and Patrick Nolan",
        "description": "Practice with me on http://www.omstars.com\nPractice with me in Miami  http://www.miamilifecenter.com\n\nIf you’re looking for yoga videos that will show you the perfect way for you to start your yoga journey then Kino MacGregor’s yoga channel is perfect for you! Whether you are new to yoga or an advanced yoga student you will find a full yoga library with all the yoga postures that you need to develop a complete yoga practice. Yoga is more than just a physical practice yoga is a lifestyle that includes living a peaceful life. Living the yoga lifestyle is about yoga practice, inner peace, yoga diet and being a good person on and off your yoga mat. Kino is a yoga teacher, author of three books, international teacher, writer, blogger, online yoga class teacher, IG yoga challenge host and much more. She co-founded Miami Life Center and Miami Yoga Magazine as well as produced six Ashtanga Yoga DVDs. Practice yoga, change your world one breath at a time. Kino believes that yoga is a vehicle for each student to experience the limitless potential of the human spirit. You don’t have to be strong or flexible to begin the yoga practice, all you need is an open heart and the inspiration to practice yoga. Unroll your mat and do the practice!\n\nFacebook - http://www.facebook.com/KinoYoga\nInstagram - http://www.instagram.com/KinoYoga\nBlog - http://www.kinoyoga.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/I8LHdP4c5tc/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/I8LHdP4c5tc/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/I8LHdP4c5tc/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/I8LHdP4c5tc/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/I8LHdP4c5tc/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "KinoYoga",
        "playlistId": "PL508C30656B253DBF",
        "position": 39,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "I8LHdP4c5tc"
        }
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "HO5rpp0FS2b0WOYpbhVz1Ilw8Q8",
      "id": "UEw1MDhDMzA2NTZCMjUzREJGLjg5MDQ4RjQ1MjE4OTM0NzI=",
      "snippet": {
        "publishedAt": "2014-05-22T22:31:52Z",
        "channelId": "UCH-81uaxCwAAaSgxRtxMkxg",
        "title": "Beginner Yoga Standing Twisting Posture, Parsvakonasana B with Kino Macgregor",
        "description": "If you’re looking for yoga videos that will show you the perfect way for you to start your yoga journey then Kino MacGregor’s yoga channel is perfect for you! Whether you are new to yoga or an advanced yoga student you will find a full yoga library with all the yoga postures that you need to develop a complete yoga practice. Yoga is more than just a physical practice yoga is a lifestyle that includes living a peaceful life. Living the yoga lifestyle is about yoga practice, inner peace, yoga diet and being a good person on and off your yoga mat. Kino is a yoga teacher, author of three books, international teacher, writer, blogger, online yoga class teacher, IG yoga challenge host and much more. She co-founded Miami Life Center and Miami Yoga Magazine as well as produced six Ashtanga Yoga DVDs. Practice yoga, change your world one breath at a time. Kino believes that yoga is a vehicle for each student to experience the limitless potential of the human spirit. You don’t have to be strong or flexible to begin the yoga practice, all you need is an open heart and the inspiration to practice yoga. Unroll your mat and do the practice!\n\nFacebook - http://www.facebook.com/KinoYoga\nInstagram - http://www.instagram.com/KinoYoga\nBlog - http://www.kinoyoga.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/vFqc0Oxv-yM/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/vFqc0Oxv-yM/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/vFqc0Oxv-yM/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/vFqc0Oxv-yM/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/vFqc0Oxv-yM/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "KinoYoga",
        "playlistId": "PL508C30656B253DBF",
        "position": 40,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "vFqc0Oxv-yM"
        }
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "CACRhGgMsY8nGF86ZbrNNBy3kok",
      "id": "UEw1MDhDMzA2NTZCMjUzREJGLjA3RDQwQTYxMkRGM0JCMzE=",
      "snippet": {
        "publishedAt": "2014-05-22T22:30:15Z",
        "channelId": "UCH-81uaxCwAAaSgxRtxMkxg",
        "title": "Beginner Yoga: Utthita Hasta Padangusthasana with Kino",
        "description": "If you’re looking for yoga videos that will show you the perfect way for you to start your yoga journey then Kino MacGregor’s yoga channel is perfect for you! Whether you are new to yoga or an advanced yoga student you will find a full yoga library with all the yoga postures that you need to develop a complete yoga practice. Yoga is more than just a physical practice yoga is a lifestyle that includes living a peaceful life. Living the yoga lifestyle is about yoga practice, inner peace, yoga diet and being a good person on and off your yoga mat. Kino is a yoga teacher, author of three books, international teacher, writer, blogger, online yoga class teacher, IG yoga challenge host and much more. She co-founded Miami Life Center and Miami Yoga Magazine as well as produced six Ashtanga Yoga DVDs. Practice yoga, change your world one breath at a time. Kino believes that yoga is a vehicle for each student to experience the limitless potential of the human spirit. You don’t have to be strong or flexible to begin the yoga practice, all you need is an open heart and the inspiration to practice yoga. Unroll your mat and do the practice!\n\nFacebook - http://www.facebook.com/KinoYoga\nInstagram - http://www.instagram.com/KinoYoga\nBlog - http://www.kinoyoga.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/y1WTISYvTTQ/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/y1WTISYvTTQ/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/y1WTISYvTTQ/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/y1WTISYvTTQ/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/y1WTISYvTTQ/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "KinoYoga",
        "playlistId": "PL508C30656B253DBF",
        "position": 41,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "y1WTISYvTTQ"
        }
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "nAFvvHHoc2WS_-v_-aH1PY0LHZs",
      "id": "UEw1MDhDMzA2NTZCMjUzREJGLjgxNUZFNjc0MzU0MkIwMTY=",
      "snippet": {
        "publishedAt": "2014-05-22T22:11:31Z",
        "channelId": "UCH-81uaxCwAAaSgxRtxMkxg",
        "title": "Warrior II, Virabhadrasana B with Kino Yoga",
        "description": "If you’re looking for yoga videos that will show you the perfect way for you to start your yoga journey then Kino MacGregor’s yoga channel is perfect for you! Whether you are new to yoga or an advanced yoga student you will find a full yoga library with all the yoga postures that you need to develop a complete yoga practice. Yoga is more than just a physical practice yoga is a lifestyle that includes living a peaceful life. Living the yoga lifestyle is about yoga practice, inner peace, yoga diet and being a good person on and off your yoga mat. Kino is a yoga teacher, author of three books, international teacher, writer, blogger, online yoga class teacher, IG yoga challenge host and much more. She co-founded Miami Life Center and Miami Yoga Magazine as well as produced six Ashtanga Yoga DVDs. Practice yoga, change your world one breath at a time. Kino believes that yoga is a vehicle for each student to experience the limitless potential of the human spirit. You don’t have to be strong or flexible to begin the yoga practice, all you need is an open heart and the inspiration to practice yoga. Unroll your mat and do the practice!\n\nFacebook - http://www.facebook.com/KinoYoga\nInstagram - http://www.instagram.com/KinoYoga\nBlog - http://www.kinoyoga.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/PZcp3Lz7WJs/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/PZcp3Lz7WJs/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/PZcp3Lz7WJs/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/PZcp3Lz7WJs/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/PZcp3Lz7WJs/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "KinoYoga",
        "playlistId": "PL508C30656B253DBF",
        "position": 42,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "PZcp3Lz7WJs"
        }
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "rHYxm5_aztqt93WrnXUJyMZuvTA",
      "id": "UEw1MDhDMzA2NTZCMjUzREJGLjc0RTZGOEFERjBCMTBENjQ=",
      "snippet": {
        "publishedAt": "2014-05-14T01:28:15Z",
        "channelId": "UCH-81uaxCwAAaSgxRtxMkxg",
        "title": "Beginner Yoga: Trikonasana with Kino",
        "description": "If you’re looking for yoga videos that will show you the perfect way for you to start your yoga journey then Kino MacGregor’s yoga channel is perfect for you! Whether you are new to yoga or an advanced yoga student you will find a full yoga library with all the yoga postures that you need to develop a complete yoga practice. Yoga is more than just a physical practice yoga is a lifestyle that includes living a peaceful life. Living the yoga lifestyle is about yoga practice, inner peace, yoga diet and being a good person on and off your yoga mat. Kino is a yoga teacher, author of three books, international teacher, writer, blogger, online yoga class teacher, IG yoga challenge host and much more. She co-founded Miami Life Center and Miami Yoga Magazine as well as produced six Ashtanga Yoga DVDs. Practice yoga, change your world one breath at a time. Kino believes that yoga is a vehicle for each student to experience the limitless potential of the human spirit. You don’t have to be strong or flexible to begin the yoga practice, all you need is an open heart and the inspiration to practice yoga. Unroll your mat and do the practice!\n\nFacebook - http://www.facebook.com/KinoYoga\nInstagram - http://www.instagram.com/KinoYoga\nBlog - http://www.kinoyoga.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/sx1DpVzYpl4/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/sx1DpVzYpl4/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/sx1DpVzYpl4/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/sx1DpVzYpl4/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/sx1DpVzYpl4/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "KinoYoga",
        "playlistId": "PL508C30656B253DBF",
        "position": 43,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "sx1DpVzYpl4"
        }
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "EhnX5fTv1TUBViXh1GGy1XdIT4M",
      "id": "UEw1MDhDMzA2NTZCMjUzREJGLkMzRUQ4RTk4ODE4NTFGNTY=",
      "snippet": {
        "publishedAt": "2014-04-04T11:29:46Z",
        "channelId": "UCH-81uaxCwAAaSgxRtxMkxg",
        "title": "Yoga for Beginners DVD Trailer with Kino MacGregor JUST RELEASED!!!",
        "description": "If you’re looking for yoga videos that will show you the perfect way for you to start your yoga journey then Kino MacGregor’s yoga channel is perfect for you! Whether you are new to yoga or an advanced yoga student you will find a full yoga library with all the yoga postures that you need to develop a complete yoga practice. Yoga is more than just a physical practice yoga is a lifestyle that includes living a peaceful life. Living the yoga lifestyle is about yoga practice, inner peace, yoga diet and being a good person on and off your yoga mat. Kino is a yoga teacher, author of three books, international teacher, writer, blogger, online yoga class teacher, IG yoga challenge host and much more. She co-founded Miami Life Center and Miami Yoga Magazine as well as produced six Ashtanga Yoga DVDs. Practice yoga, change your world one breath at a time. Kino believes that yoga is a vehicle for each student to experience the limitless potential of the human spirit. You don’t have to be strong or flexible to begin the yoga practice, all you need is an open heart and the inspiration to practice yoga. Unroll your mat and do the practice!\n\nFacebook - http://www.facebook.com/KinoYoga\nInstagram - http://www.instagram.com/KinoYoga\nBlog - http://www.kinoyoga.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/nAxYkm0Gof4/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/nAxYkm0Gof4/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/nAxYkm0Gof4/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/nAxYkm0Gof4/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/nAxYkm0Gof4/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "KinoYoga",
        "playlistId": "PL508C30656B253DBF",
        "position": 44,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "nAxYkm0Gof4"
        }
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "ygKUFtLX-R71T8ePQZYFRB2RyIQ",
      "id": "UEw1MDhDMzA2NTZCMjUzREJGLkRFRjg4NjVBQTNBNjgzMTE=",
      "snippet": {
        "publishedAt": "2014-01-01T08:01:24Z",
        "channelId": "UCH-81uaxCwAAaSgxRtxMkxg",
        "title": "Yoga Standing Posture Parsvakonasana with Kino",
        "description": "If you’re looking for yoga videos that will show you the perfect way for you to start your yoga journey then Kino MacGregor’s yoga channel is perfect for you! Whether you are new to yoga or an advanced yoga student you will find a full yoga library with all the yoga postures that you need to develop a complete yoga practice. Yoga is more than just a physical practice yoga is a lifestyle that includes living a peaceful life. Living the yoga lifestyle is about yoga practice, inner peace, yoga diet and being a good person on and off your yoga mat. Kino is a yoga teacher, author of three books, international teacher, writer, blogger, online yoga class teacher, IG yoga challenge host and much more. She co-founded Miami Life Center and Miami Yoga Magazine as well as produced six Ashtanga Yoga DVDs. Practice yoga, change your world one breath at a time. Kino believes that yoga is a vehicle for each student to experience the limitless potential of the human spirit. You don’t have to be strong or flexible to begin the yoga practice, all you need is an open heart and the inspiration to practice yoga. Unroll your mat and do the practice!\n\nFacebook - http://www.facebook.com/KinoYoga\nInstagram - http://www.instagram.com/KinoYoga\nBlog - http://www.kinoyoga.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/-b24U8JgxFY/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/-b24U8JgxFY/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/-b24U8JgxFY/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/-b24U8JgxFY/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/-b24U8JgxFY/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "KinoYoga",
        "playlistId": "PL508C30656B253DBF",
        "position": 45,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "-b24U8JgxFY"
        }
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "dVxxuWOptWCW5569jrpJCRq7gfI",
      "id": "UEw1MDhDMzA2NTZCMjUzREJGLjkzNkRCQTY3RDhDMjhEMDE=",
      "snippet": {
        "publishedAt": "2013-12-03T14:56:19Z",
        "channelId": "UCH-81uaxCwAAaSgxRtxMkxg",
        "title": "Beginner Yoga - Core Strength with Kino Do You Yoga Series Part 3",
        "description": "If you’re looking for yoga videos that will show you the perfect way for you to start your yoga journey then Kino MacGregor’s yoga channel is perfect for you! Whether you are new to yoga or an advanced yoga student you will find a full yoga library with all the yoga postures that you need to develop a complete yoga practice. Yoga is more than just a physical practice yoga is a lifestyle that includes living a peaceful life. Living the yoga lifestyle is about yoga practice, inner peace, yoga diet and being a good person on and off your yoga mat. Kino is a yoga teacher, author of three books, international teacher, writer, blogger, online yoga class teacher, IG yoga challenge host and much more. She co-founded Miami Life Center and Miami Yoga Magazine as well as produced six Ashtanga Yoga DVDs. Practice yoga, change your world one breath at a time. Kino believes that yoga is a vehicle for each student to experience the limitless potential of the human spirit. You don’t have to be strong or flexible to begin the yoga practice, all you need is an open heart and the inspiration to practice yoga. Unroll your mat and do the practice!\n\nFacebook - http://www.facebook.com/KinoYoga\nInstagram - http://www.instagram.com/KinoYoga\nBlog - http://www.kinoyoga.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/ahEZvKWFAYU/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/ahEZvKWFAYU/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/ahEZvKWFAYU/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/ahEZvKWFAYU/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/ahEZvKWFAYU/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "KinoYoga",
        "playlistId": "PL508C30656B253DBF",
        "position": 46,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "ahEZvKWFAYU"
        }
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "xA4umYjzCPPpNAwM3Zp4hYiBRW8",
      "id": "UEw1MDhDMzA2NTZCMjUzREJGLkZFOUVCNDUxREQ1OTg2MjE=",
      "snippet": {
        "publishedAt": "2013-12-03T14:56:12Z",
        "channelId": "UCH-81uaxCwAAaSgxRtxMkxg",
        "title": "Beginner Yoga - Relaxation with Kino Do You Yoga Series Video 4",
        "description": "If you’re looking for yoga videos that will show you the perfect way for you to start your yoga journey then Kino MacGregor’s yoga channel is perfect for you! Whether you are new to yoga or an advanced yoga student you will find a full yoga library with all the yoga postures that you need to develop a complete yoga practice. Yoga is more than just a physical practice yoga is a lifestyle that includes living a peaceful life. Living the yoga lifestyle is about yoga practice, inner peace, yoga diet and being a good person on and off your yoga mat. Kino is a yoga teacher, author of three books, international teacher, writer, blogger, online yoga class teacher, IG yoga challenge host and much more. She co-founded Miami Life Center and Miami Yoga Magazine as well as produced six Ashtanga Yoga DVDs. Practice yoga, change your world one breath at a time. Kino believes that yoga is a vehicle for each student to experience the limitless potential of the human spirit. You don’t have to be strong or flexible to begin the yoga practice, all you need is an open heart and the inspiration to practice yoga. Unroll your mat and do the practice!\n\nFacebook - http://www.facebook.com/KinoYoga\nInstagram - http://www.instagram.com/KinoYoga\nBlog - http://www.kinoyoga.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/T7Hpq-HWi94/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/T7Hpq-HWi94/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/T7Hpq-HWi94/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/T7Hpq-HWi94/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/T7Hpq-HWi94/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "KinoYoga",
        "playlistId": "PL508C30656B253DBF",
        "position": 47,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "T7Hpq-HWi94"
        }
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "33z1Y9-GQSgGJ9QlUVh5ZDBqXsE",
      "id": "UEw1MDhDMzA2NTZCMjUzREJGLkJCN0JEN0YyMkFFREJDQjg=",
      "snippet": {
        "publishedAt": "2013-12-02T21:16:17Z",
        "channelId": "UCH-81uaxCwAAaSgxRtxMkxg",
        "title": "Beginner Yoga: Marichasana C with Kino",
        "description": "If you’re looking for yoga videos that will show you the perfect way for you to start your yoga journey then Kino MacGregor’s yoga channel is perfect for you! Whether you are new to yoga or an advanced yoga student you will find a full yoga library with all the yoga postures that you need to develop a complete yoga practice. Yoga is more than just a physical practice yoga is a lifestyle that includes living a peaceful life. Living the yoga lifestyle is about yoga practice, inner peace, yoga diet and being a good person on and off your yoga mat. Kino is a yoga teacher, author of three books, international teacher, writer, blogger, online yoga class teacher, IG yoga challenge host and much more. She co-founded Miami Life Center and Miami Yoga Magazine as well as produced six Ashtanga Yoga DVDs. Practice yoga, change your world one breath at a time. Kino believes that yoga is a vehicle for each student to experience the limitless potential of the human spirit. You don’t have to be strong or flexible to begin the yoga practice, all you need is an open heart and the inspiration to practice yoga. Unroll your mat and do the practice!\n\nFacebook - http://www.facebook.com/KinoYoga\nInstagram - http://www.instagram.com/KinoYoga\nBlog - http://www.kinoyoga.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/q1q2dbWxkWc/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/q1q2dbWxkWc/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/q1q2dbWxkWc/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/q1q2dbWxkWc/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/q1q2dbWxkWc/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "KinoYoga",
        "playlistId": "PL508C30656B253DBF",
        "position": 48,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "q1q2dbWxkWc"
        }
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "KaM6bcSkghyPB1Duuvndf4UWPxc",
      "id": "UEw1MDhDMzA2NTZCMjUzREJGLjJBQkMyOEE0OTkwRjY0Rjc=",
      "snippet": {
        "publishedAt": "2013-10-14T15:22:17Z",
        "channelId": "UCH-81uaxCwAAaSgxRtxMkxg",
        "title": "Beginner Yoga - Sun Salutations with Kino Do You Yoga Series Video Two",
        "description": "If you’re looking for yoga videos that will show you the perfect way for you to start your yoga journey then Kino MacGregor’s yoga channel is perfect for you! Whether you are new to yoga or an advanced yoga student you will find a full yoga library with all the yoga postures that you need to develop a complete yoga practice. Yoga is more than just a physical practice yoga is a lifestyle that includes living a peaceful life. Living the yoga lifestyle is about yoga practice, inner peace, yoga diet and being a good person on and off your yoga mat. Kino is a yoga teacher, author of three books, international teacher, writer, blogger, online yoga class teacher, IG yoga challenge host and much more. She co-founded Miami Life Center and Miami Yoga Magazine as well as produced six Ashtanga Yoga DVDs. Practice yoga, change your world one breath at a time. Kino believes that yoga is a vehicle for each student to experience the limitless potential of the human spirit. You don’t have to be strong or flexible to begin the yoga practice, all you need is an open heart and the inspiration to practice yoga. Unroll your mat and do the practice!\n\nFacebook - http://www.facebook.com/KinoYoga\nInstagram - http://www.instagram.com/KinoYoga\nBlog - http://www.kinoyoga.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/Ia2RW2muN7k/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/Ia2RW2muN7k/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/Ia2RW2muN7k/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/Ia2RW2muN7k/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/Ia2RW2muN7k/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "KinoYoga",
        "playlistId": "PL508C30656B253DBF",
        "position": 49,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "Ia2RW2muN7k"
        }
      }
    }
  ],
  "pageInfo": {
    "totalResults": 75,
    "resultsPerPage": 50
  }
}

    http_version: null
  recorded_at: Mon, 11 May 2020 22:05:55 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/playlistItems?key=AIzaSyD3OAw77Zd5iI3iYjagAtYTyz5mYhDSsBg&maxResults=50&pageToken=CDIQAA&part=snippet&playlistId=PL508C30656B253DBF
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Mon, 11 May 2020 22:05:56 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-Q050=":443"; ma=2592000,h3-Q049=":443";
        ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443"; ma=2592000,h3-Q043=":443";
        ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        {
  "kind": "youtube#playlistItemListResponse",
  "etag": "Y0pT2xpEaM49FjejhSSPhm2kdPs",
  "prevPageToken": "CDIQAQ",
  "items": [
    {
      "kind": "youtube#playlistItem",
      "etag": "87-i3GILzi183HJ__plN515qvlI",
      "id": "UEw1MDhDMzA2NTZCMjUzREJGLkUyRkQyM0NDQjUzMzE2NDI=",
      "snippet": {
        "publishedAt": "2013-10-14T15:22:06Z",
        "channelId": "UCH-81uaxCwAAaSgxRtxMkxg",
        "title": "Beginner Yoga Breathing with Kino",
        "description": "If you’re looking for yoga videos that will show you the perfect way for you to start your yoga journey then Kino MacGregor’s yoga channel is perfect for you! Whether you are new to yoga or an advanced yoga student you will find a full yoga library with all the yoga postures that you need to develop a complete yoga practice. Yoga is more than just a physical practice yoga is a lifestyle that includes living a peaceful life. Living the yoga lifestyle is about yoga practice, inner peace, yoga diet and being a good person on and off your yoga mat. Kino is a yoga teacher, author of three books, international teacher, writer, blogger, online yoga class teacher, IG yoga challenge host and much more. She co-founded Miami Life Center and Miami Yoga Magazine as well as produced six Ashtanga Yoga DVDs. Practice yoga, change your world one breath at a time. Kino believes that yoga is a vehicle for each student to experience the limitless potential of the human spirit. You don’t have to be strong or flexible to begin the yoga practice, all you need is an open heart and the inspiration to practice yoga. Unroll your mat and do the practice!\n\nFacebook - http://www.facebook.com/KinoYoga\nInstagram - http://www.instagram.com/KinoYoga\nBlog - http://www.kinoyoga.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/ui9zgdGd5eU/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/ui9zgdGd5eU/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/ui9zgdGd5eU/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/ui9zgdGd5eU/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/ui9zgdGd5eU/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "KinoYoga",
        "playlistId": "PL508C30656B253DBF",
        "position": 50,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "ui9zgdGd5eU"
        }
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "3gOLLeWVivMayFUShN6r4Ao4rv8",
      "id": "UEw1MDhDMzA2NTZCMjUzREJGLkM1RkM2QjA3QUVBOUVFMDQ=",
      "snippet": {
        "publishedAt": "2013-08-30T03:31:35Z",
        "channelId": "UCH-81uaxCwAAaSgxRtxMkxg",
        "title": "Beginner Yoga Twisting, Marichasana C with Kino",
        "description": "If you’re looking for yoga videos that will show you the perfect way for you to start your yoga journey then Kino MacGregor’s yoga channel is perfect for you! Whether you are new to yoga or an advanced yoga student you will find a full yoga library with all the yoga postures that you need to develop a complete yoga practice. Yoga is more than just a physical practice yoga is a lifestyle that includes living a peaceful life. Living the yoga lifestyle is about yoga practice, inner peace, yoga diet and being a good person on and off your yoga mat. Kino is a yoga teacher, author of three books, international teacher, writer, blogger, online yoga class teacher, IG yoga challenge host and much more. She co-founded Miami Life Center and Miami Yoga Magazine as well as produced six Ashtanga Yoga DVDs. Practice yoga, change your world one breath at a time. Kino believes that yoga is a vehicle for each student to experience the limitless potential of the human spirit. You don’t have to be strong or flexible to begin the yoga practice, all you need is an open heart and the inspiration to practice yoga. Unroll your mat and do the practice!\n\nFacebook - http://www.facebook.com/KinoYoga\nInstagram - http://www.instagram.com/KinoYoga\nBlog - http://www.kinoyoga.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/vRz5Urwk_Mw/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/vRz5Urwk_Mw/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/vRz5Urwk_Mw/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/vRz5Urwk_Mw/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/vRz5Urwk_Mw/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "KinoYoga",
        "playlistId": "PL508C30656B253DBF",
        "position": 51,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "vRz5Urwk_Mw"
        }
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "JAAHPZvbaR4vHkWip6-sBJLrh3M",
      "id": "UEw1MDhDMzA2NTZCMjUzREJGLkQwMENENTYwNTg1QzYwNzY=",
      "snippet": {
        "publishedAt": "2013-03-12T11:50:15Z",
        "channelId": "UCH-81uaxCwAAaSgxRtxMkxg",
        "title": "Easy Yoga Shoulder Warm-Up with Kino on Maui",
        "description": "If you’re looking for yoga videos that will show you the perfect way for you to start your yoga journey then Kino MacGregor’s yoga channel is perfect for you! Whether you are new to yoga or an advanced yoga student you will find a full yoga library with all the yoga postures that you need to develop a complete yoga practice. Yoga is more than just a physical practice yoga is a lifestyle that includes living a peaceful life. Living the yoga lifestyle is about yoga practice, inner peace, yoga diet and being a good person on and off your yoga mat. Kino is a yoga teacher, author of three books, international teacher, writer, blogger, online yoga class teacher, IG yoga challenge host and much more. She co-founded Miami Life Center and Miami Yoga Magazine as well as produced six Ashtanga Yoga DVDs. Practice yoga, change your world one breath at a time. Kino believes that yoga is a vehicle for each student to experience the limitless potential of the human spirit. You don’t have to be strong or flexible to begin the yoga practice, all you need is an open heart and the inspiration to practice yoga. Unroll your mat and do the practice!\n\nFacebook - http://www.facebook.com/KinoYoga\nInstagram - http://www.instagram.com/KinoYoga\nBlog - http://www.kinoyoga.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/c-oxW-rIOfk/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/c-oxW-rIOfk/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/c-oxW-rIOfk/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/c-oxW-rIOfk/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/c-oxW-rIOfk/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "KinoYoga",
        "playlistId": "PL508C30656B253DBF",
        "position": 52,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "c-oxW-rIOfk"
        }
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "XMDWygOXYSy5xkPE8_DJhs_Nd_A",
      "id": "UEw1MDhDMzA2NTZCMjUzREJGLjBENkZBQzFEQzcwQzIxNTg=",
      "snippet": {
        "publishedAt": "2013-03-12T11:49:21Z",
        "channelId": "UCH-81uaxCwAAaSgxRtxMkxg",
        "title": "Headstand for Beginners with Kino",
        "description": "Practice with me on http://www.omstars.com\n\nIf you’re looking for yoga videos that will show you the perfect way for you to start your yoga journey then Kino MacGregor’s yoga channel is perfect for you! Whether you are new to yoga or an advanced yoga student you will find a full yoga library with all the yoga postures that you need to develop a complete yoga practice. Yoga is more than just a physical practice yoga is a lifestyle that includes living a peaceful life. Living the yoga lifestyle is about yoga practice, inner peace, yoga diet and being a good person on and off your yoga mat. Kino is a yoga teacher, author of three books, international teacher, writer, blogger, online yoga class teacher, IG yoga challenge host and much more. She co-founded Miami Life Center and Miami Yoga Magazine as well as produced six Ashtanga Yoga DVDs. Practice yoga, change your world one breath at a time. Kino believes that yoga is a vehicle for each student to experience the limitless potential of the human spirit. You don’t have to be strong or flexible to begin the yoga practice, all you need is an open heart and the inspiration to practice yoga. Unroll your mat and do the practice!\n\nFacebook - http://www.facebook.com/KinoYoga\nInstagram - http://www.instagram.com/KinoYoga\nBlog - http://www.kinoyoga.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/ejpPDifQwA8/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/ejpPDifQwA8/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/ejpPDifQwA8/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/ejpPDifQwA8/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/ejpPDifQwA8/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "KinoYoga",
        "playlistId": "PL508C30656B253DBF",
        "position": 53,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "ejpPDifQwA8"
        }
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "nzwrgGiVWKVN6AwGyOgvvQ4pkFw",
      "id": "UEw1MDhDMzA2NTZCMjUzREJGLkU4M0MyQjZDRUVFRUVDRjQ=",
      "snippet": {
        "publishedAt": "2013-03-12T11:48:20Z",
        "channelId": "UCH-81uaxCwAAaSgxRtxMkxg",
        "title": "Yoga Core Strength for Beginners",
        "description": "If you’re looking for yoga videos that will show you the perfect way for you to start your yoga journey then Kino MacGregor’s yoga channel is perfect for you! Whether you are new to yoga or an advanced yoga student you will find a full yoga library with all the yoga postures that you need to develop a complete yoga practice. Yoga is more than just a physical practice yoga is a lifestyle that includes living a peaceful life. Living the yoga lifestyle is about yoga practice, inner peace, yoga diet and being a good person on and off your yoga mat. Kino is a yoga teacher, author of three books, international teacher, writer, blogger, online yoga class teacher, IG yoga challenge host and much more. She co-founded Miami Life Center and Miami Yoga Magazine as well as produced six Ashtanga Yoga DVDs. Practice yoga, change your world one breath at a time. Kino believes that yoga is a vehicle for each student to experience the limitless potential of the human spirit. You don’t have to be strong or flexible to begin the yoga practice, all you need is an open heart and the inspiration to practice yoga. Unroll your mat and do the practice!\n\nFacebook - http://www.facebook.com/KinoYoga\nInstagram - http://www.instagram.com/KinoYoga\nBlog - http://www.kinoyoga.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/CxhrM2Rn0LA/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/CxhrM2Rn0LA/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/CxhrM2Rn0LA/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/CxhrM2Rn0LA/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/CxhrM2Rn0LA/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "KinoYoga",
        "playlistId": "PL508C30656B253DBF",
        "position": 54,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "CxhrM2Rn0LA"
        }
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "3QOigBl_1roU5rM4q0tV0Gnq_Us",
      "id": "UEw1MDhDMzA2NTZCMjUzREJGLkVFOTE4RjE4OUI3RURFMDE=",
      "snippet": {
        "publishedAt": "2013-03-12T11:47:50Z",
        "channelId": "UCH-81uaxCwAAaSgxRtxMkxg",
        "title": "Beginner Yoga, Sun Salutation A with Kino on Waiheke Island, New Zealand",
        "description": "If you’re looking for yoga videos that will show you the perfect way for you to start your yoga journey then Kino MacGregor’s yoga channel is perfect for you! Whether you are new to yoga or an advanced yoga student you will find a full yoga library with all the yoga postures that you need to develop a complete yoga practice. Yoga is more than just a physical practice yoga is a lifestyle that includes living a peaceful life. Living the yoga lifestyle is about yoga practice, inner peace, yoga diet and being a good person on and off your yoga mat. Kino is a yoga teacher, author of three books, international teacher, writer, blogger, online yoga class teacher, IG yoga challenge host and much more. She co-founded Miami Life Center and Miami Yoga Magazine as well as produced six Ashtanga Yoga DVDs. Practice yoga, change your world one breath at a time. Kino believes that yoga is a vehicle for each student to experience the limitless potential of the human spirit. You don’t have to be strong or flexible to begin the yoga practice, all you need is an open heart and the inspiration to practice yoga. Unroll your mat and do the practice!\n\nFacebook - http://www.facebook.com/KinoYoga\nInstagram - http://www.instagram.com/KinoYoga\nBlog - http://www.kinoyoga.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/tehT6-Q3g-M/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/tehT6-Q3g-M/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/tehT6-Q3g-M/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/tehT6-Q3g-M/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/tehT6-Q3g-M/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "KinoYoga",
        "playlistId": "PL508C30656B253DBF",
        "position": 55,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "tehT6-Q3g-M"
        }
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "DpdpBuPpp4azirWk11R-WOQu_NE",
      "id": "UEw1MDhDMzA2NTZCMjUzREJGLkFFRTY0QjA4NTJENTU2RkU=",
      "snippet": {
        "publishedAt": "2013-03-12T11:47:19Z",
        "channelId": "UCH-81uaxCwAAaSgxRtxMkxg",
        "title": "Marichasana B for Beginners in Ashtanga Yoga Primary Series with Kino",
        "description": "If you’re looking for yoga videos that will show you the perfect way for you to start your yoga journey then Kino MacGregor’s yoga channel is perfect for you! Whether you are new to yoga or an advanced yoga student you will find a full yoga library with all the yoga postures that you need to develop a complete yoga practice. Yoga is more than just a physical practice yoga is a lifestyle that includes living a peaceful life. Living the yoga lifestyle is about yoga practice, inner peace, yoga diet and being a good person on and off your yoga mat. Kino is a yoga teacher, author of three books, international teacher, writer, blogger, online yoga class teacher, IG yoga challenge host and much more. She co-founded Miami Life Center and Miami Yoga Magazine as well as produced six Ashtanga Yoga DVDs. Practice yoga, change your world one breath at a time. Kino believes that yoga is a vehicle for each student to experience the limitless potential of the human spirit. You don’t have to be strong or flexible to begin the yoga practice, all you need is an open heart and the inspiration to practice yoga. Unroll your mat and do the practice!\n\nFacebook - http://www.facebook.com/KinoYoga\nInstagram - http://www.instagram.com/KinoYoga\nBlog - http://www.kinoyoga.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/uNCULda48KY/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/uNCULda48KY/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/uNCULda48KY/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/uNCULda48KY/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/uNCULda48KY/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "KinoYoga",
        "playlistId": "PL508C30656B253DBF",
        "position": 56,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "uNCULda48KY"
        }
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "_a6LN5YvyNrGo0QsKuNqdKeaJ18",
      "id": "UEw1MDhDMzA2NTZCMjUzREJGLkVGMUM3RTgxOTkwODgyMUU=",
      "snippet": {
        "publishedAt": "2013-01-24T23:49:44Z",
        "channelId": "UCH-81uaxCwAAaSgxRtxMkxg",
        "title": "Breath and Movement in Yoga Sun Salutations",
        "description": "If you’re looking for yoga videos that will show you the perfect way for you to start your yoga journey then Kino MacGregor’s yoga channel is perfect for you! Whether you are new to yoga or an advanced yoga student you will find a full yoga library with all the yoga postures that you need to develop a complete yoga practice. Yoga is more than just a physical practice yoga is a lifestyle that includes living a peaceful life. Living the yoga lifestyle is about yoga practice, inner peace, yoga diet and being a good person on and off your yoga mat. Kino is a yoga teacher, author of three books, international teacher, writer, blogger, online yoga class teacher, IG yoga challenge host and much more. She co-founded Miami Life Center and Miami Yoga Magazine as well as produced six Ashtanga Yoga DVDs. Practice yoga, change your world one breath at a time. Kino believes that yoga is a vehicle for each student to experience the limitless potential of the human spirit. You don’t have to be strong or flexible to begin the yoga practice, all you need is an open heart and the inspiration to practice yoga. Unroll your mat and do the practice!\n\nFacebook - http://www.facebook.com/KinoYoga\nInstagram - http://www.instagram.com/KinoYoga\nBlog - http://www.kinoyoga.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/2muLMRZ2Rsk/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/2muLMRZ2Rsk/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/2muLMRZ2Rsk/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/2muLMRZ2Rsk/sddefault.jpg",
            "width": 640,
            "height": 480
          }
        },
        "channelTitle": "KinoYoga",
        "playlistId": "PL508C30656B253DBF",
        "position": 57,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "2muLMRZ2Rsk"
        }
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "pPkdSbZQGnCl0v1zuZ29Rkm_Tb8",
      "id": "UEw1MDhDMzA2NTZCMjUzREJGLjY2NzE1MjRFRkY5ODYyMEM=",
      "snippet": {
        "publishedAt": "2012-12-31T12:51:57Z",
        "channelId": "UCH-81uaxCwAAaSgxRtxMkxg",
        "title": "Bandhas in Ashtanga Yoga - Accessing the Deep Core Strength with Kino",
        "description": "If you’re looking for yoga videos that will show you the perfect way for you to start your yoga journey then Kino MacGregor’s yoga channel is perfect for you! Whether you are new to yoga or an advanced yoga student you will find a full yoga library with all the yoga postures that you need to develop a complete yoga practice. Yoga is more than just a physical practice yoga is a lifestyle that includes living a peaceful life. Living the yoga lifestyle is about yoga practice, inner peace, yoga diet and being a good person on and off your yoga mat. Kino is a yoga teacher, author of three books, international teacher, writer, blogger, online yoga class teacher, IG yoga challenge host and much more. She co-founded Miami Life Center and Miami Yoga Magazine as well as produced six Ashtanga Yoga DVDs. Practice yoga, change your world one breath at a time. Kino believes that yoga is a vehicle for each student to experience the limitless potential of the human spirit. You don’t have to be strong or flexible to begin the yoga practice, all you need is an open heart and the inspiration to practice yoga. Unroll your mat and do the practice!\n\nFacebook - http://www.facebook.com/KinoYoga\nInstagram - http://www.instagram.com/KinoYoga\nBlog - http://www.kinoyoga.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/6OIwu7dsT3A/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/6OIwu7dsT3A/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/6OIwu7dsT3A/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/6OIwu7dsT3A/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/6OIwu7dsT3A/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "KinoYoga",
        "playlistId": "PL508C30656B253DBF",
        "position": 58,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "6OIwu7dsT3A"
        }
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "3b3N_i-hljAsXRcMAdx3j0zSYwk",
      "id": "UEw1MDhDMzA2NTZCMjUzREJGLjUzNzg4QThDRTY4NzRDNjI=",
      "snippet": {
        "publishedAt": "2012-12-28T15:41:56Z",
        "channelId": "UCH-81uaxCwAAaSgxRtxMkxg",
        "title": "Easy Jump Back Jump Through for Beginners in Ashtanga Yoga",
        "description": "If you’re looking for yoga videos that will show you the perfect way for you to start your yoga journey then Kino MacGregor’s yoga channel is perfect for you! Whether you are new to yoga or an advanced yoga student you will find a full yoga library with all the yoga postures that you need to develop a complete yoga practice. Yoga is more than just a physical practice yoga is a lifestyle that includes living a peaceful life. Living the yoga lifestyle is about yoga practice, inner peace, yoga diet and being a good person on and off your yoga mat. Kino is a yoga teacher, author of three books, international teacher, writer, blogger, online yoga class teacher, IG yoga challenge host and much more. She co-founded Miami Life Center and Miami Yoga Magazine as well as produced six Ashtanga Yoga DVDs. Practice yoga, change your world one breath at a time. Kino believes that yoga is a vehicle for each student to experience the limitless potential of the human spirit. You don’t have to be strong or flexible to begin the yoga practice, all you need is an open heart and the inspiration to practice yoga. Unroll your mat and do the practice!\n\nFacebook - http://www.facebook.com/KinoYoga\nInstagram - http://www.instagram.com/KinoYoga\nBlog - http://www.kinoyoga.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/xjf0tkd5Khs/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/xjf0tkd5Khs/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/xjf0tkd5Khs/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/xjf0tkd5Khs/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/xjf0tkd5Khs/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "KinoYoga",
        "playlistId": "PL508C30656B253DBF",
        "position": 59,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "xjf0tkd5Khs"
        }
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "sEFT1CR_Ilox_CpuetOUOlDLjX8",
      "id": "UEw1MDhDMzA2NTZCMjUzREJGLjgxMjhFOUFCMDBFMjM2NDQ=",
      "snippet": {
        "publishedAt": "2012-12-26T11:16:16Z",
        "channelId": "UCH-81uaxCwAAaSgxRtxMkxg",
        "title": "Ashtanga Yoga for Beginners, Modified Closing Practice \"Last Three Postures\" with Kino",
        "description": "If you’re looking for yoga videos that will show you the perfect way for you to start your yoga journey then Kino MacGregor’s yoga channel is perfect for you! Whether you are new to yoga or an advanced yoga student you will find a full yoga library with all the yoga postures that you need to develop a complete yoga practice. Yoga is more than just a physical practice yoga is a lifestyle that includes living a peaceful life. Living the yoga lifestyle is about yoga practice, inner peace, yoga diet and being a good person on and off your yoga mat. Kino is a yoga teacher, author of three books, international teacher, writer, blogger, online yoga class teacher, IG yoga challenge host and much more. She co-founded Miami Life Center and Miami Yoga Magazine as well as produced six Ashtanga Yoga DVDs. Practice yoga, change your world one breath at a time. Kino believes that yoga is a vehicle for each student to experience the limitless potential of the human spirit. You don’t have to be strong or flexible to begin the yoga practice, all you need is an open heart and the inspiration to practice yoga. Unroll your mat and do the practice!\n\nFacebook - http://www.facebook.com/KinoYoga\nInstagram - http://www.instagram.com/KinoYoga\nBlog - http://www.kinoyoga.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/2YSv0wq-tSc/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/2YSv0wq-tSc/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/2YSv0wq-tSc/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/2YSv0wq-tSc/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/2YSv0wq-tSc/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "KinoYoga",
        "playlistId": "PL508C30656B253DBF",
        "position": 60,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "2YSv0wq-tSc"
        }
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "3PmPFzRgv5tbRGc47DSudpBcrR8",
      "id": "UEw1MDhDMzA2NTZCMjUzREJGLjU1M0ZGRDk5REQyNDZDNDU=",
      "snippet": {
        "publishedAt": "2012-12-13T15:56:07Z",
        "channelId": "UCH-81uaxCwAAaSgxRtxMkxg",
        "title": "Yoga for Beginners, Utthita Hasta Padangusthasana from Ashtanga Primary Series with Kino",
        "description": "If you’re looking for yoga videos that will show you the perfect way for you to start your yoga journey then Kino MacGregor’s yoga channel is perfect for you! Whether you are new to yoga or an advanced yoga student you will find a full yoga library with all the yoga postures that you need to develop a complete yoga practice. Yoga is more than just a physical practice yoga is a lifestyle that includes living a peaceful life. Living the yoga lifestyle is about yoga practice, inner peace, yoga diet and being a good person on and off your yoga mat. Kino is a yoga teacher, author of three books, international teacher, writer, blogger, online yoga class teacher, IG yoga challenge host and much more. She co-founded Miami Life Center and Miami Yoga Magazine as well as produced six Ashtanga Yoga DVDs. Practice yoga, change your world one breath at a time. Kino believes that yoga is a vehicle for each student to experience the limitless potential of the human spirit. You don’t have to be strong or flexible to begin the yoga practice, all you need is an open heart and the inspiration to practice yoga. Unroll your mat and do the practice!\n\nFacebook - http://www.facebook.com/KinoYoga\nInstagram - http://www.instagram.com/KinoYoga\nBlog - http://www.kinoyoga.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/LsIbmX32kQ4/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/LsIbmX32kQ4/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/LsIbmX32kQ4/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/LsIbmX32kQ4/sddefault.jpg",
            "width": 640,
            "height": 480
          }
        },
        "channelTitle": "KinoYoga",
        "playlistId": "PL508C30656B253DBF",
        "position": 61,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "LsIbmX32kQ4"
        }
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "dp-m-N1A_f5RBv1kQSRIZyMxWEk",
      "id": "UEw1MDhDMzA2NTZCMjUzREJGLjcyQkRGNEMzNjcxRTM3Qjc=",
      "snippet": {
        "publishedAt": "2012-12-07T18:23:54Z",
        "channelId": "UCH-81uaxCwAAaSgxRtxMkxg",
        "title": "Yogic Breathing Exercises - Ujjayi Pranayama with Kino",
        "description": "If you’re looking for yoga videos that will show you the perfect way for you to start your yoga journey then Kino MacGregor’s yoga channel is perfect for you! Whether you are new to yoga or an advanced yoga student you will find a full yoga library with all the yoga postures that you need to develop a complete yoga practice. Yoga is more than just a physical practice yoga is a lifestyle that includes living a peaceful life. Living the yoga lifestyle is about yoga practice, inner peace, yoga diet and being a good person on and off your yoga mat. Kino is a yoga teacher, author of three books, international teacher, writer, blogger, online yoga class teacher, IG yoga challenge host and much more. She co-founded Miami Life Center and Miami Yoga Magazine as well as produced six Ashtanga Yoga DVDs. Practice yoga, change your world one breath at a time. Kino believes that yoga is a vehicle for each student to experience the limitless potential of the human spirit. You don’t have to be strong or flexible to begin the yoga practice, all you need is an open heart and the inspiration to practice yoga. Unroll your mat and do the practice!\n\nFacebook - http://www.facebook.com/KinoYoga\nInstagram - http://www.instagram.com/KinoYoga\nBlog - http://www.kinoyoga.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/oRb56apRa40/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/oRb56apRa40/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/oRb56apRa40/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/oRb56apRa40/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/oRb56apRa40/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "KinoYoga",
        "playlistId": "PL508C30656B253DBF",
        "position": 62,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "oRb56apRa40"
        }
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "_N0NbKnEyl9bWX-vwgu5FifnJrg",
      "id": "UEw1MDhDMzA2NTZCMjUzREJGLjg5ODM5MUNFMTRCMjMwQ0Y=",
      "snippet": {
        "publishedAt": "2012-10-06T12:21:21Z",
        "channelId": "UCH-81uaxCwAAaSgxRtxMkxg",
        "title": "Hips in Yoga, Beginner Tips for Marichasana A from Ashtanga Primary Series with Kino",
        "description": "If you’re looking for yoga videos that will show you the perfect way for you to start your yoga journey then Kino MacGregor’s yoga channel is perfect for you! Whether you are new to yoga or an advanced yoga student you will find a full yoga library with all the yoga postures that you need to develop a complete yoga practice. Yoga is more than just a physical practice yoga is a lifestyle that includes living a peaceful life. Living the yoga lifestyle is about yoga practice, inner peace, yoga diet and being a good person on and off your yoga mat. Kino is a yoga teacher, author of three books, international teacher, writer, blogger, online yoga class teacher, IG yoga challenge host and much more. She co-founded Miami Life Center and Miami Yoga Magazine as well as produced six Ashtanga Yoga DVDs. Practice yoga, change your world one breath at a time. Kino believes that yoga is a vehicle for each student to experience the limitless potential of the human spirit. You don’t have to be strong or flexible to begin the yoga practice, all you need is an open heart and the inspiration to practice yoga. Unroll your mat and do the practice!\n\nFacebook - http://www.facebook.com/KinoYoga\nInstagram - http://www.instagram.com/KinoYoga\nBlog - http://www.kinoyoga.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/bUM8insBKbo/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/bUM8insBKbo/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/bUM8insBKbo/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/bUM8insBKbo/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/bUM8insBKbo/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "KinoYoga",
        "playlistId": "PL508C30656B253DBF",
        "position": 63,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "bUM8insBKbo"
        }
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "1Bz0_1xyw_2tSrgzMQSlcL5hYyU",
      "id": "UEw1MDhDMzA2NTZCMjUzREJGLjM5QjFCOEFFMjNBMUM5ODM=",
      "snippet": {
        "publishedAt": "2012-09-17T12:08:26Z",
        "channelId": "UCH-81uaxCwAAaSgxRtxMkxg",
        "title": "Beginner's Tips on Yoga with Kino in Finland",
        "description": "If you’re looking for yoga videos that will show you the perfect way for you to start your yoga journey then Kino MacGregor’s yoga channel is perfect for you! Whether you are new to yoga or an advanced yoga student you will find a full yoga library with all the yoga postures that you need to develop a complete yoga practice. Yoga is more than just a physical practice yoga is a lifestyle that includes living a peaceful life. Living the yoga lifestyle is about yoga practice, inner peace, yoga diet and being a good person on and off your yoga mat. Kino is a yoga teacher, author of three books, international teacher, writer, blogger, online yoga class teacher, IG yoga challenge host and much more. She co-founded Miami Life Center and Miami Yoga Magazine as well as produced six Ashtanga Yoga DVDs. Practice yoga, change your world one breath at a time. Kino believes that yoga is a vehicle for each student to experience the limitless potential of the human spirit. You don’t have to be strong or flexible to begin the yoga practice, all you need is an open heart and the inspiration to practice yoga. Unroll your mat and do the practice!\n\nFacebook - http://www.facebook.com/KinoYoga\nInstagram - http://www.instagram.com/KinoYoga\nBlog - http://www.kinoyoga.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/mKSzYnbAFpw/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/mKSzYnbAFpw/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/mKSzYnbAFpw/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/mKSzYnbAFpw/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/mKSzYnbAFpw/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "KinoYoga",
        "playlistId": "PL508C30656B253DBF",
        "position": 64,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "mKSzYnbAFpw"
        }
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "3AvzSFkSXk_dwAguOC0QQ13UOXo",
      "id": "UEw1MDhDMzA2NTZCMjUzREJGLkQzNEQ2Q0VBMzRDQjQ0NEI=",
      "snippet": {
        "publishedAt": "2012-09-17T12:08:15Z",
        "channelId": "UCH-81uaxCwAAaSgxRtxMkxg",
        "title": "Balance in Yoga, How to Use Your Feet with Kino in Finland",
        "description": "If you’re looking for yoga videos that will show you the perfect way for you to start your yoga journey then Kino MacGregor’s yoga channel is perfect for you! Whether you are new to yoga or an advanced yoga student you will find a full yoga library with all the yoga postures that you need to develop a complete yoga practice. Yoga is more than just a physical practice yoga is a lifestyle that includes living a peaceful life. Living the yoga lifestyle is about yoga practice, inner peace, yoga diet and being a good person on and off your yoga mat. Kino is a yoga teacher, author of three books, international teacher, writer, blogger, online yoga class teacher, IG yoga challenge host and much more. She co-founded Miami Life Center and Miami Yoga Magazine as well as produced six Ashtanga Yoga DVDs. Practice yoga, change your world one breath at a time. Kino believes that yoga is a vehicle for each student to experience the limitless potential of the human spirit. You don’t have to be strong or flexible to begin the yoga practice, all you need is an open heart and the inspiration to practice yoga. Unroll your mat and do the practice!\n\nFacebook - http://www.facebook.com/KinoYoga\nInstagram - http://www.instagram.com/KinoYoga\nBlog - http://www.kinoyoga.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/Stv5uS3PoG8/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/Stv5uS3PoG8/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/Stv5uS3PoG8/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/Stv5uS3PoG8/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/Stv5uS3PoG8/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "KinoYoga",
        "playlistId": "PL508C30656B253DBF",
        "position": 65,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "Stv5uS3PoG8"
        }
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "ocjGZjlV-9u9TWshbJmtmyzwC2I",
      "id": "UEw1MDhDMzA2NTZCMjUzREJGLjFCNDIwQzY3NTBDRDg1MjM=",
      "snippet": {
        "publishedAt": "2012-07-29T18:01:10Z",
        "channelId": "UCH-81uaxCwAAaSgxRtxMkxg",
        "title": "Who Can Practice Yoga? with Kino MacGregor",
        "description": "If you’re looking for yoga videos that will show you the perfect way for you to start your yoga journey then Kino MacGregor’s yoga channel is perfect for you! Whether you are new to yoga or an advanced yoga student you will find a full yoga library with all the yoga postures that you need to develop a complete yoga practice. Yoga is more than just a physical practice yoga is a lifestyle that includes living a peaceful life. Living the yoga lifestyle is about yoga practice, inner peace, yoga diet and being a good person on and off your yoga mat. Kino is a yoga teacher, author of three books, international teacher, writer, blogger, online yoga class teacher, IG yoga challenge host and much more. She co-founded Miami Life Center and Miami Yoga Magazine as well as produced six Ashtanga Yoga DVDs. Practice yoga, change your world one breath at a time. Kino believes that yoga is a vehicle for each student to experience the limitless potential of the human spirit. You don’t have to be strong or flexible to begin the yoga practice, all you need is an open heart and the inspiration to practice yoga. Unroll your mat and do the practice!\n\nFacebook - http://www.facebook.com/KinoYoga\nInstagram - http://www.instagram.com/KinoYoga\nBlog - http://www.kinoyoga.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/-mPh_zx1pQ8/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/-mPh_zx1pQ8/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/-mPh_zx1pQ8/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/-mPh_zx1pQ8/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/-mPh_zx1pQ8/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "KinoYoga",
        "playlistId": "PL508C30656B253DBF",
        "position": 66,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "-mPh_zx1pQ8"
        }
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "osk89-9jwUPpuHcDLchi8ubwafQ",
      "id": "UEw1MDhDMzA2NTZCMjUzREJGLkJCOEYyREU5NzM3NzQ4ODM=",
      "snippet": {
        "publishedAt": "2012-07-29T18:01:10Z",
        "channelId": "UCH-81uaxCwAAaSgxRtxMkxg",
        "title": "Ashtanga Yoga : Trikonasana with Kino MacGregor and Alexandra Santos",
        "description": "If you’re looking for yoga videos that will show you the perfect way for you to start your yoga journey then Kino MacGregor’s yoga channel is perfect for you! Whether you are new to yoga or an advanced yoga student you will find a full yoga library with all the yoga postures that you need to develop a complete yoga practice. Yoga is more than just a physical practice yoga is a lifestyle that includes living a peaceful life. Living the yoga lifestyle is about yoga practice, inner peace, yoga diet and being a good person on and off your yoga mat. Kino is a yoga teacher, author of three books, international teacher, writer, blogger, online yoga class teacher, IG yoga challenge host and much more. She co-founded Miami Life Center and Miami Yoga Magazine as well as produced six Ashtanga Yoga DVDs. Practice yoga, change your world one breath at a time. Kino believes that yoga is a vehicle for each student to experience the limitless potential of the human spirit. You don’t have to be strong or flexible to begin the yoga practice, all you need is an open heart and the inspiration to practice yoga. Unroll your mat and do the practice!\n\nFacebook - http://www.facebook.com/KinoYoga\nInstagram - http://www.instagram.com/KinoYoga\nBlog - http://www.kinoyoga.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/kPW2V4OYOMo/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/kPW2V4OYOMo/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/kPW2V4OYOMo/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/kPW2V4OYOMo/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/kPW2V4OYOMo/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "KinoYoga",
        "playlistId": "PL508C30656B253DBF",
        "position": 67,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "kPW2V4OYOMo"
        }
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "AlZMtjA9VXaRZo2fF4ErLcvU0VM",
      "id": "UEw1MDhDMzA2NTZCMjUzREJGLjk0Rjg5QUUxM0M5RkNCNEI=",
      "snippet": {
        "publishedAt": "2012-07-29T18:01:06Z",
        "channelId": "UCH-81uaxCwAAaSgxRtxMkxg",
        "title": "Strong Body and Mind in Yoga Practice with Kino MacGregor",
        "description": "If you’re looking for yoga videos that will show you the perfect way for you to start your yoga journey then Kino MacGregor’s yoga channel is perfect for you! Whether you are new to yoga or an advanced yoga student you will find a full yoga library with all the yoga postures that you need to develop a complete yoga practice. Yoga is more than just a physical practice yoga is a lifestyle that includes living a peaceful life. Living the yoga lifestyle is about yoga practice, inner peace, yoga diet and being a good person on and off your yoga mat. Kino is a yoga teacher, author of three books, international teacher, writer, blogger, online yoga class teacher, IG yoga challenge host and much more. She co-founded Miami Life Center and Miami Yoga Magazine as well as produced six Ashtanga Yoga DVDs. Practice yoga, change your world one breath at a time. Kino believes that yoga is a vehicle for each student to experience the limitless potential of the human spirit. You don’t have to be strong or flexible to begin the yoga practice, all you need is an open heart and the inspiration to practice yoga. Unroll your mat and do the practice!\n\nFacebook - http://www.facebook.com/KinoYoga\nInstagram - http://www.instagram.com/KinoYoga\nBlog - http://www.kinoyoga.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/b0dy47tizl8/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/b0dy47tizl8/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/b0dy47tizl8/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/b0dy47tizl8/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/b0dy47tizl8/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "KinoYoga",
        "playlistId": "PL508C30656B253DBF",
        "position": 68,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "b0dy47tizl8"
        }
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "tb6G5AsvTuKmwtDzVCQ3PlFfIao",
      "id": "UEw1MDhDMzA2NTZCMjUzREJGLjlBMjgwNTM3ODdFQkQxNUE=",
      "snippet": {
        "publishedAt": "2012-07-29T18:01:06Z",
        "channelId": "UCH-81uaxCwAAaSgxRtxMkxg",
        "title": "Yoga for Beginners, Chaturanga Dandasana with Kino",
        "description": "If you’re looking for yoga videos that will show you the perfect way for you to start your yoga journey then Kino MacGregor’s yoga channel is perfect for you! Whether you are new to yoga or an advanced yoga student you will find a full yoga library with all the yoga postures that you need to develop a complete yoga practice. Yoga is more than just a physical practice yoga is a lifestyle that includes living a peaceful life. Living the yoga lifestyle is about yoga practice, inner peace, yoga diet and being a good person on and off your yoga mat. Kino is a yoga teacher, author of three books, international teacher, writer, blogger, online yoga class teacher, IG yoga challenge host and much more. She co-founded Miami Life Center and Miami Yoga Magazine as well as produced six Ashtanga Yoga DVDs. Practice yoga, change your world one breath at a time. Kino believes that yoga is a vehicle for each student to experience the limitless potential of the human spirit. You don’t have to be strong or flexible to begin the yoga practice, all you need is an open heart and the inspiration to practice yoga. Unroll your mat and do the practice!\n\nFacebook - http://www.facebook.com/KinoYoga\nInstagram - http://www.instagram.com/KinoYoga\nBlog - http://www.kinoyoga.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/T97QTGcEr1s/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/T97QTGcEr1s/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/T97QTGcEr1s/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/T97QTGcEr1s/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/T97QTGcEr1s/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "KinoYoga",
        "playlistId": "PL508C30656B253DBF",
        "position": 69,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "T97QTGcEr1s"
        }
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "o1Mm001QJFbobbUuQo5zZkDgxJE",
      "id": "UEw1MDhDMzA2NTZCMjUzREJGLjM4QUU1MkZFQzBEMzhGMjk=",
      "snippet": {
        "publishedAt": "2012-07-29T18:01:06Z",
        "channelId": "UCH-81uaxCwAAaSgxRtxMkxg",
        "title": "Half Lotus Position, Open your Hips for Padmasana with Kino MacGregor",
        "description": "If you’re looking for yoga videos that will show you the perfect way for you to start your yoga journey then Kino MacGregor’s yoga channel is perfect for you! Whether you are new to yoga or an advanced yoga student you will find a full yoga library with all the yoga postures that you need to develop a complete yoga practice. Yoga is more than just a physical practice yoga is a lifestyle that includes living a peaceful life. Living the yoga lifestyle is about yoga practice, inner peace, yoga diet and being a good person on and off your yoga mat. Kino is a yoga teacher, author of three books, international teacher, writer, blogger, online yoga class teacher, IG yoga challenge host and much more. She co-founded Miami Life Center and Miami Yoga Magazine as well as produced six Ashtanga Yoga DVDs. Practice yoga, change your world one breath at a time. Kino believes that yoga is a vehicle for each student to experience the limitless potential of the human spirit. You don’t have to be strong or flexible to begin the yoga practice, all you need is an open heart and the inspiration to practice yoga. Unroll your mat and do the practice!\n\nFacebook - http://www.facebook.com/KinoYoga\nInstagram - http://www.instagram.com/KinoYoga\nBlog - http://www.kinoyoga.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/ELRWR913F1w/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/ELRWR913F1w/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/ELRWR913F1w/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/ELRWR913F1w/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/ELRWR913F1w/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "KinoYoga",
        "playlistId": "PL508C30656B253DBF",
        "position": 70,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "ELRWR913F1w"
        }
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "JCAGv54g1bXyqejwig4J9_De97c",
      "id": "UEw1MDhDMzA2NTZCMjUzREJGLkMzM0FBOUZEODczQ0YxQzU=",
      "snippet": {
        "publishedAt": "2012-07-29T18:01:06Z",
        "channelId": "UCH-81uaxCwAAaSgxRtxMkxg",
        "title": "Safely Getting Into Full Lotus Position, Padmasana for Beginners with Kino MacGregor",
        "description": "If you’re looking for yoga videos that will show you the perfect way for you to start your yoga journey then Kino MacGregor’s yoga channel is perfect for you! Whether you are new to yoga or an advanced yoga student you will find a full yoga library with all the yoga postures that you need to develop a complete yoga practice. Yoga is more than just a physical practice yoga is a lifestyle that includes living a peaceful life. Living the yoga lifestyle is about yoga practice, inner peace, yoga diet and being a good person on and off your yoga mat. Kino is a yoga teacher, author of three books, international teacher, writer, blogger, online yoga class teacher, IG yoga challenge host and much more. She co-founded Miami Life Center and Miami Yoga Magazine as well as produced six Ashtanga Yoga DVDs. Practice yoga, change your world one breath at a time. Kino believes that yoga is a vehicle for each student to experience the limitless potential of the human spirit. You don’t have to be strong or flexible to begin the yoga practice, all you need is an open heart and the inspiration to practice yoga. Unroll your mat and do the practice!\n\nFacebook - http://www.facebook.com/KinoYoga\nInstagram - http://www.instagram.com/KinoYoga\nBlog - http://www.kinoyoga.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/BdVHk5C0L8U/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/BdVHk5C0L8U/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/BdVHk5C0L8U/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/BdVHk5C0L8U/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/BdVHk5C0L8U/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "KinoYoga",
        "playlistId": "PL508C30656B253DBF",
        "position": 71,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "BdVHk5C0L8U"
        }
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "qaj0eInVUzY1dHIXtf9tfScvATs",
      "id": "UEw1MDhDMzA2NTZCMjUzREJGLjUxRjI0MjAyRTg1Q0M3RDU=",
      "snippet": {
        "publishedAt": "2012-07-29T18:01:06Z",
        "channelId": "UCH-81uaxCwAAaSgxRtxMkxg",
        "title": "Ashtanga Yoga Tristana Method, Breath, Posture and Dristhi with Kino MacGregor",
        "description": "If you’re looking for yoga videos that will show you the perfect way for you to start your yoga journey then Kino MacGregor’s yoga channel is perfect for you! Whether you are new to yoga or an advanced yoga student you will find a full yoga library with all the yoga postures that you need to develop a complete yoga practice. Yoga is more than just a physical practice yoga is a lifestyle that includes living a peaceful life. Living the yoga lifestyle is about yoga practice, inner peace, yoga diet and being a good person on and off your yoga mat. Kino is a yoga teacher, author of three books, international teacher, writer, blogger, online yoga class teacher, IG yoga challenge host and much more. She co-founded Miami Life Center and Miami Yoga Magazine as well as produced six Ashtanga Yoga DVDs. Practice yoga, change your world one breath at a time. Kino believes that yoga is a vehicle for each student to experience the limitless potential of the human spirit. You don’t have to be strong or flexible to begin the yoga practice, all you need is an open heart and the inspiration to practice yoga. Unroll your mat and do the practice!\n\nFacebook - http://www.facebook.com/KinoYoga\nInstagram - http://www.instagram.com/KinoYoga\nBlog - http://www.kinoyoga.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/UecPLO92oh0/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/UecPLO92oh0/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/UecPLO92oh0/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/UecPLO92oh0/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/UecPLO92oh0/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "KinoYoga",
        "playlistId": "PL508C30656B253DBF",
        "position": 72,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "UecPLO92oh0"
        }
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "bKf4PgMLOUn8afmXvH0n93212cE",
      "id": "UEw1MDhDMzA2NTZCMjUzREJGLjQxNUQxRDczMEJENEZFNzU=",
      "snippet": {
        "publishedAt": "2012-07-29T18:01:05Z",
        "channelId": "UCH-81uaxCwAAaSgxRtxMkxg",
        "title": "Shoulders Strengthening Yoga Exercise in Downward Dog with Kino MacGregor",
        "description": "If you’re looking for yoga videos that will show you the perfect way for you to start your yoga journey then Kino MacGregor’s yoga channel is perfect for you! Whether you are new to yoga or an advanced yoga student you will find a full yoga library with all the yoga postures that you need to develop a complete yoga practice. Yoga is more than just a physical practice yoga is a lifestyle that includes living a peaceful life. Living the yoga lifestyle is about yoga practice, inner peace, yoga diet and being a good person on and off your yoga mat. Kino is a yoga teacher, author of three books, international teacher, writer, blogger, online yoga class teacher, IG yoga challenge host and much more. She co-founded Miami Life Center and Miami Yoga Magazine as well as produced six Ashtanga Yoga DVDs. Practice yoga, change your world one breath at a time. Kino believes that yoga is a vehicle for each student to experience the limitless potential of the human spirit. You don’t have to be strong or flexible to begin the yoga practice, all you need is an open heart and the inspiration to practice yoga. Unroll your mat and do the practice!\n\nFacebook - http://www.facebook.com/KinoYoga\nInstagram - http://www.instagram.com/KinoYoga\nBlog - http://www.kinoyoga.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/jkj8r92IT4Y/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/jkj8r92IT4Y/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/jkj8r92IT4Y/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/jkj8r92IT4Y/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/jkj8r92IT4Y/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "KinoYoga",
        "playlistId": "PL508C30656B253DBF",
        "position": 73,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "jkj8r92IT4Y"
        }
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "20JemfoKBRCGA49fA-0lNcQv__4",
      "id": "UEw1MDhDMzA2NTZCMjUzREJGLjU4RkQwM0NCMzk3QkRFMEM=",
      "snippet": {
        "publishedAt": "2012-07-29T18:01:05Z",
        "channelId": "UCH-81uaxCwAAaSgxRtxMkxg",
        "title": "What is Ashtanga Vinyasa Yoga? with Kino MacGregor",
        "description": "If you’re looking for yoga videos that will show you the perfect way for you to start your yoga journey then Kino MacGregor’s yoga channel is perfect for you! Whether you are new to yoga or an advanced yoga student you will find a full yoga library with all the yoga postures that you need to develop a complete yoga practice. Yoga is more than just a physical practice yoga is a lifestyle that includes living a peaceful life. Living the yoga lifestyle is about yoga practice, inner peace, yoga diet and being a good person on and off your yoga mat. Kino is a yoga teacher, author of three books, international teacher, writer, blogger, online yoga class teacher, IG yoga challenge host and much more. She co-founded Miami Life Center and Miami Yoga Magazine as well as produced six Ashtanga Yoga DVDs. Practice yoga, change your world one breath at a time. Kino believes that yoga is a vehicle for each student to experience the limitless potential of the human spirit. You don’t have to be strong or flexible to begin the yoga practice, all you need is an open heart and the inspiration to practice yoga. Unroll your mat and do the practice!\n\nFacebook - http://www.facebook.com/KinoYoga\nInstagram - http://www.instagram.com/KinoYoga\nBlog - http://www.kinoyoga.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/11C1021vKGU/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/11C1021vKGU/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/11C1021vKGU/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/11C1021vKGU/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/11C1021vKGU/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "KinoYoga",
        "playlistId": "PL508C30656B253DBF",
        "position": 74,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "11C1021vKGU"
        }
      }
    }
  ],
  "pageInfo": {
    "totalResults": 75,
    "resultsPerPage": 50
  }
}

    http_version: null
  recorded_at: Mon, 11 May 2020 22:05:56 GMT
recorded_with: VCR 5.1.0
