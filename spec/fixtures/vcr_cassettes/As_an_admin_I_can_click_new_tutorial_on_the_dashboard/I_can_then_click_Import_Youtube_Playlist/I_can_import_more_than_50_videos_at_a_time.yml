---
http_interactions:
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/playlistItems?key=AIzaSyBzuvHC9RfJWA876vCBSvAPserZy7oqWM8&maxResults=10&part=snippet&playlistId=PL508C30656B253DBF
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Tue, 12 May 2020 19:29:56 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443"; ma=2592000,h3-Q050=":443";
        ma=2592000,h3-Q049=":443"; ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Tue, 12 May 2020 19:29:56 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/playlistItems?key=AIzaSyBzuvHC9RfJWA876vCBSvAPserZy7oqWM8&maxResults=10&pageToken=CAoQAA&part=snippet&playlistId=PL508C30656B253DBF
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Tue, 12 May 2020 19:29:56 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443"; ma=2592000,h3-Q050=":443";
        ma=2592000,h3-Q049=":443"; ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Tue, 12 May 2020 19:29:56 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/playlistItems?key=AIzaSyBzuvHC9RfJWA876vCBSvAPserZy7oqWM8&maxResults=10&pageToken=CBQQAA&part=snippet&playlistId=PL508C30656B253DBF
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Tue, 12 May 2020 19:29:56 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443"; ma=2592000,h3-Q050=":443";
        ma=2592000,h3-Q049=":443"; ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Tue, 12 May 2020 19:29:56 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/playlistItems?key=AIzaSyBzuvHC9RfJWA876vCBSvAPserZy7oqWM8&maxResults=10&pageToken=CB4QAA&part=snippet&playlistId=PL508C30656B253DBF
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Tue, 12 May 2020 19:29:56 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443"; ma=2592000,h3-Q050=":443";
        ma=2592000,h3-Q049=":443"; ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Tue, 12 May 2020 19:29:56 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/playlistItems?key=AIzaSyBzuvHC9RfJWA876vCBSvAPserZy7oqWM8&maxResults=10&pageToken=CCgQAA&part=snippet&playlistId=PL508C30656B253DBF
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Tue, 12 May 2020 19:29:57 GMT
      Date:
      - Tue, 12 May 2020 19:29:57 GMT
      Cache-Control:
      - private, max-age=0, must-revalidate, no-transform
      Etag:
      - '"Dn5xIderbhAnUk5TAW0qkFFir0M/QtlyLCBt_CFi2UNdmatkYFmvTA8"'
      Vary:
      - Origin
      - X-Origin
      Content-Type:
      - application/json; charset=UTF-8
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      Content-Security-Policy:
      - frame-ancestors 'self'
      X-Xss-Protection:
      - 1; mode=block
      Server:
      - GSE
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443"; ma=2592000,h3-Q050=":443";
        ma=2592000,h3-Q049=":443"; ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        ewogImtpbmQiOiAieW91dHViZSNwbGF5bGlzdEl0ZW1MaXN0UmVzcG9uc2UiLAogImV0YWciOiAiXCJEbjV4SWRlcmJoQW5VazVUQVcwcWtGRmlyME0vUXRseUxDQnRfQ0ZpMlVOZG1hdGtZRm12VEE4XCIiLAogIm5leHRQYWdlVG9rZW4iOiAiQ0RJUUFBIiwKICJwcmV2UGFnZVRva2VuIjogIkNDZ1FBUSIsCiAicGFnZUluZm8iOiB7CiAgInRvdGFsUmVzdWx0cyI6IDc1LAogICJyZXN1bHRzUGVyUGFnZSI6IDEwCiB9LAogIml0ZW1zIjogWwogIHsKICAgImtpbmQiOiAieW91dHViZSNwbGF5bGlzdEl0ZW0iLAogICAiZXRhZyI6ICJcIkRuNXhJZGVyYmhBblVrNVRBVzBxa0ZGaXIwTS9wZFhVTDkzN2Q1UlRBSzRMQjVWX181ZGN6UlVcIiIsCiAgICJpZCI6ICJVRXcxTURoRE16QTJOVFpDTWpVelJFSkdMamc1TURRNFJqUTFNakU0T1RNME56ST0iLAogICAic25pcHBldCI6IHsKICAgICJwdWJsaXNoZWRBdCI6ICIyMDE0LTA1LTIyVDIyOjMxOjUyLjAwMFoiLAogICAgImNoYW5uZWxJZCI6ICJVQ0gtODF1YXhDd0FBYVNneFJ0eE1reGciLAogICAgInRpdGxlIjogIkJlZ2lubmVyIFlvZ2EgU3RhbmRpbmcgVHdpc3RpbmcgUG9zdHVyZSwgUGFyc3Zha29uYXNhbmEgQiB3aXRoIEtpbm8gTWFjZ3JlZ29yIiwKICAgICJkZXNjcmlwdGlvbiI6ICJJZiB5b3XigJlyZSBsb29raW5nIGZvciB5b2dhIHZpZGVvcyB0aGF0IHdpbGwgc2hvdyB5b3UgdGhlIHBlcmZlY3Qgd2F5IGZvciB5b3UgdG8gc3RhcnQgeW91ciB5b2dhIGpvdXJuZXkgdGhlbiBLaW5vIE1hY0dyZWdvcuKAmXMgeW9nYSBjaGFubmVsIGlzIHBlcmZlY3QgZm9yIHlvdSEgV2hldGhlciB5b3UgYXJlIG5ldyB0byB5b2dhIG9yIGFuIGFkdmFuY2VkIHlvZ2Egc3R1ZGVudCB5b3Ugd2lsbCBmaW5kIGEgZnVsbCB5b2dhIGxpYnJhcnkgd2l0aCBhbGwgdGhlIHlvZ2EgcG9zdHVyZXMgdGhhdCB5b3UgbmVlZCB0byBkZXZlbG9wIGEgY29tcGxldGUgeW9nYSBwcmFjdGljZS4gWW9nYSBpcyBtb3JlIHRoYW4ganVzdCBhIHBoeXNpY2FsIHByYWN0aWNlIHlvZ2EgaXMgYSBsaWZlc3R5bGUgdGhhdCBpbmNsdWRlcyBsaXZpbmcgYSBwZWFjZWZ1bCBsaWZlLiBMaXZpbmcgdGhlIHlvZ2EgbGlmZXN0eWxlIGlzIGFib3V0IHlvZ2EgcHJhY3RpY2UsIGlubmVyIHBlYWNlLCB5b2dhIGRpZXQgYW5kIGJlaW5nIGEgZ29vZCBwZXJzb24gb24gYW5kIG9mZiB5b3VyIHlvZ2EgbWF0LiBLaW5vIGlzIGEgeW9nYSB0ZWFjaGVyLCBhdXRob3Igb2YgdGhyZWUgYm9va3MsIGludGVybmF0aW9uYWwgdGVhY2hlciwgd3JpdGVyLCBibG9nZ2VyLCBvbmxpbmUgeW9nYSBjbGFzcyB0ZWFjaGVyLCBJRyB5b2dhIGNoYWxsZW5nZSBob3N0IGFuZCBtdWNoIG1vcmUuIFNoZSBjby1mb3VuZGVkIE1pYW1pIExpZmUgQ2VudGVyIGFuZCBNaWFtaSBZb2dhIE1hZ2F6aW5lIGFzIHdlbGwgYXMgcHJvZHVjZWQgc2l4IEFzaHRhbmdhIFlvZ2EgRFZEcy4gUHJhY3RpY2UgeW9nYSwgY2hhbmdlIHlvdXIgd29ybGQgb25lIGJyZWF0aCBhdCBhIHRpbWUuIEtpbm8gYmVsaWV2ZXMgdGhhdCB5b2dhIGlzIGEgdmVoaWNsZSBmb3IgZWFjaCBzdHVkZW50IHRvIGV4cGVyaWVuY2UgdGhlIGxpbWl0bGVzcyBwb3RlbnRpYWwgb2YgdGhlIGh1bWFuIHNwaXJpdC4gWW91IGRvbuKAmXQgaGF2ZSB0byBiZSBzdHJvbmcgb3IgZmxleGlibGUgdG8gYmVnaW4gdGhlIHlvZ2EgcHJhY3RpY2UsIGFsbCB5b3UgbmVlZCBpcyBhbiBvcGVuIGhlYXJ0IGFuZCB0aGUgaW5zcGlyYXRpb24gdG8gcHJhY3RpY2UgeW9nYS4gVW5yb2xsIHlvdXIgbWF0IGFuZCBkbyB0aGUgcHJhY3RpY2UhXG5cbkZhY2Vib29rIC0gaHR0cDovL3d3dy5mYWNlYm9vay5jb20vS2lub1lvZ2Fcbkluc3RhZ3JhbSAtIGh0dHA6Ly93d3cuaW5zdGFncmFtLmNvbS9LaW5vWW9nYVxuQmxvZyAtIGh0dHA6Ly93d3cua2lub3lvZ2EuY29tIiwKICAgICJ0aHVtYm5haWxzIjogewogICAgICJkZWZhdWx0IjogewogICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvdkZxYzBPeHYteU0vZGVmYXVsdC5qcGciLAogICAgICAid2lkdGgiOiAxMjAsCiAgICAgICJoZWlnaHQiOiA5MAogICAgIH0sCiAgICAgIm1lZGl1bSI6IHsKICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL3ZGcWMwT3h2LXlNL21xZGVmYXVsdC5qcGciLAogICAgICAid2lkdGgiOiAzMjAsCiAgICAgICJoZWlnaHQiOiAxODAKICAgICB9LAogICAgICJoaWdoIjogewogICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvdkZxYzBPeHYteU0vaHFkZWZhdWx0LmpwZyIsCiAgICAgICJ3aWR0aCI6IDQ4MCwKICAgICAgImhlaWdodCI6IDM2MAogICAgIH0sCiAgICAgInN0YW5kYXJkIjogewogICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvdkZxYzBPeHYteU0vc2RkZWZhdWx0LmpwZyIsCiAgICAgICJ3aWR0aCI6IDY0MCwKICAgICAgImhlaWdodCI6IDQ4MAogICAgIH0sCiAgICAgIm1heHJlcyI6IHsKICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL3ZGcWMwT3h2LXlNL21heHJlc2RlZmF1bHQuanBnIiwKICAgICAgIndpZHRoIjogMTI4MCwKICAgICAgImhlaWdodCI6IDcyMAogICAgIH0KICAgIH0sCiAgICAiY2hhbm5lbFRpdGxlIjogIktpbm9Zb2dhIiwKICAgICJwbGF5bGlzdElkIjogIlBMNTA4QzMwNjU2QjI1M0RCRiIsCiAgICAicG9zaXRpb24iOiA0MCwKICAgICJyZXNvdXJjZUlkIjogewogICAgICJraW5kIjogInlvdXR1YmUjdmlkZW8iLAogICAgICJ2aWRlb0lkIjogInZGcWMwT3h2LXlNIgogICAgfQogICB9CiAgfSwKICB7CiAgICJraW5kIjogInlvdXR1YmUjcGxheWxpc3RJdGVtIiwKICAgImV0YWciOiAiXCJEbjV4SWRlcmJoQW5VazVUQVcwcWtGRmlyME0vTVJKLUpnZHhraDhLMVlBRndNU0szbEF0aUZjXCIiLAogICAiaWQiOiAiVUV3MU1EaERNekEyTlRaQ01qVXpSRUpHTGpBM1JEUXdRVFl4TWtSR00wSkNNekU9IiwKICAgInNuaXBwZXQiOiB7CiAgICAicHVibGlzaGVkQXQiOiAiMjAxNC0wNS0yMlQyMjozMDoxNS4wMDBaIiwKICAgICJjaGFubmVsSWQiOiAiVUNILTgxdWF4Q3dBQWFTZ3hSdHhNa3hnIiwKICAgICJ0aXRsZSI6ICJCZWdpbm5lciBZb2dhOiBVdHRoaXRhIEhhc3RhIFBhZGFuZ3VzdGhhc2FuYSB3aXRoIEtpbm8iLAogICAgImRlc2NyaXB0aW9uIjogIklmIHlvdeKAmXJlIGxvb2tpbmcgZm9yIHlvZ2EgdmlkZW9zIHRoYXQgd2lsbCBzaG93IHlvdSB0aGUgcGVyZmVjdCB3YXkgZm9yIHlvdSB0byBzdGFydCB5b3VyIHlvZ2Egam91cm5leSB0aGVuIEtpbm8gTWFjR3JlZ29y4oCZcyB5b2dhIGNoYW5uZWwgaXMgcGVyZmVjdCBmb3IgeW91ISBXaGV0aGVyIHlvdSBhcmUgbmV3IHRvIHlvZ2Egb3IgYW4gYWR2YW5jZWQgeW9nYSBzdHVkZW50IHlvdSB3aWxsIGZpbmQgYSBmdWxsIHlvZ2EgbGlicmFyeSB3aXRoIGFsbCB0aGUgeW9nYSBwb3N0dXJlcyB0aGF0IHlvdSBuZWVkIHRvIGRldmVsb3AgYSBjb21wbGV0ZSB5b2dhIHByYWN0aWNlLiBZb2dhIGlzIG1vcmUgdGhhbiBqdXN0IGEgcGh5c2ljYWwgcHJhY3RpY2UgeW9nYSBpcyBhIGxpZmVzdHlsZSB0aGF0IGluY2x1ZGVzIGxpdmluZyBhIHBlYWNlZnVsIGxpZmUuIExpdmluZyB0aGUgeW9nYSBsaWZlc3R5bGUgaXMgYWJvdXQgeW9nYSBwcmFjdGljZSwgaW5uZXIgcGVhY2UsIHlvZ2EgZGlldCBhbmQgYmVpbmcgYSBnb29kIHBlcnNvbiBvbiBhbmQgb2ZmIHlvdXIgeW9nYSBtYXQuIEtpbm8gaXMgYSB5b2dhIHRlYWNoZXIsIGF1dGhvciBvZiB0aHJlZSBib29rcywgaW50ZXJuYXRpb25hbCB0ZWFjaGVyLCB3cml0ZXIsIGJsb2dnZXIsIG9ubGluZSB5b2dhIGNsYXNzIHRlYWNoZXIsIElHIHlvZ2EgY2hhbGxlbmdlIGhvc3QgYW5kIG11Y2ggbW9yZS4gU2hlIGNvLWZvdW5kZWQgTWlhbWkgTGlmZSBDZW50ZXIgYW5kIE1pYW1pIFlvZ2EgTWFnYXppbmUgYXMgd2VsbCBhcyBwcm9kdWNlZCBzaXggQXNodGFuZ2EgWW9nYSBEVkRzLiBQcmFjdGljZSB5b2dhLCBjaGFuZ2UgeW91ciB3b3JsZCBvbmUgYnJlYXRoIGF0IGEgdGltZS4gS2lubyBiZWxpZXZlcyB0aGF0IHlvZ2EgaXMgYSB2ZWhpY2xlIGZvciBlYWNoIHN0dWRlbnQgdG8gZXhwZXJpZW5jZSB0aGUgbGltaXRsZXNzIHBvdGVudGlhbCBvZiB0aGUgaHVtYW4gc3Bpcml0LiBZb3UgZG9u4oCZdCBoYXZlIHRvIGJlIHN0cm9uZyBvciBmbGV4aWJsZSB0byBiZWdpbiB0aGUgeW9nYSBwcmFjdGljZSwgYWxsIHlvdSBuZWVkIGlzIGFuIG9wZW4gaGVhcnQgYW5kIHRoZSBpbnNwaXJhdGlvbiB0byBwcmFjdGljZSB5b2dhLiBVbnJvbGwgeW91ciBtYXQgYW5kIGRvIHRoZSBwcmFjdGljZSFcblxuRmFjZWJvb2sgLSBodHRwOi8vd3d3LmZhY2Vib29rLmNvbS9LaW5vWW9nYVxuSW5zdGFncmFtIC0gaHR0cDovL3d3dy5pbnN0YWdyYW0uY29tL0tpbm9Zb2dhXG5CbG9nIC0gaHR0cDovL3d3dy5raW5veW9nYS5jb20iLAogICAgInRodW1ibmFpbHMiOiB7CiAgICAgImRlZmF1bHQiOiB7CiAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS95MVdUSVNZdlRUUS9kZWZhdWx0LmpwZyIsCiAgICAgICJ3aWR0aCI6IDEyMCwKICAgICAgImhlaWdodCI6IDkwCiAgICAgfSwKICAgICAibWVkaXVtIjogewogICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkveTFXVElTWXZUVFEvbXFkZWZhdWx0LmpwZyIsCiAgICAgICJ3aWR0aCI6IDMyMCwKICAgICAgImhlaWdodCI6IDE4MAogICAgIH0sCiAgICAgImhpZ2giOiB7CiAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS95MVdUSVNZdlRUUS9ocWRlZmF1bHQuanBnIiwKICAgICAgIndpZHRoIjogNDgwLAogICAgICAiaGVpZ2h0IjogMzYwCiAgICAgfSwKICAgICAic3RhbmRhcmQiOiB7CiAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS95MVdUSVNZdlRUUS9zZGRlZmF1bHQuanBnIiwKICAgICAgIndpZHRoIjogNjQwLAogICAgICAiaGVpZ2h0IjogNDgwCiAgICAgfSwKICAgICAibWF4cmVzIjogewogICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkveTFXVElTWXZUVFEvbWF4cmVzZGVmYXVsdC5qcGciLAogICAgICAid2lkdGgiOiAxMjgwLAogICAgICAiaGVpZ2h0IjogNzIwCiAgICAgfQogICAgfSwKICAgICJjaGFubmVsVGl0bGUiOiAiS2lub1lvZ2EiLAogICAgInBsYXlsaXN0SWQiOiAiUEw1MDhDMzA2NTZCMjUzREJGIiwKICAgICJwb3NpdGlvbiI6IDQxLAogICAgInJlc291cmNlSWQiOiB7CiAgICAgImtpbmQiOiAieW91dHViZSN2aWRlbyIsCiAgICAgInZpZGVvSWQiOiAieTFXVElTWXZUVFEiCiAgICB9CiAgIH0KICB9LAogIHsKICAgImtpbmQiOiAieW91dHViZSNwbGF5bGlzdEl0ZW0iLAogICAiZXRhZyI6ICJcIkRuNXhJZGVyYmhBblVrNVRBVzBxa0ZGaXIwTS9MeEF2WnEtQ1dmMzE5bVMwRDM3OU1qRzdTOW9cIiIsCiAgICJpZCI6ICJVRXcxTURoRE16QTJOVFpDTWpVelJFSkdMamd4TlVaRk5qYzBNelUwTWtJd01UWT0iLAogICAic25pcHBldCI6IHsKICAgICJwdWJsaXNoZWRBdCI6ICIyMDE0LTA1LTIyVDIyOjExOjMxLjAwMFoiLAogICAgImNoYW5uZWxJZCI6ICJVQ0gtODF1YXhDd0FBYVNneFJ0eE1reGciLAogICAgInRpdGxlIjogIldhcnJpb3IgSUksIFZpcmFiaGFkcmFzYW5hIEIgd2l0aCBLaW5vIFlvZ2EiLAogICAgImRlc2NyaXB0aW9uIjogIklmIHlvdeKAmXJlIGxvb2tpbmcgZm9yIHlvZ2EgdmlkZW9zIHRoYXQgd2lsbCBzaG93IHlvdSB0aGUgcGVyZmVjdCB3YXkgZm9yIHlvdSB0byBzdGFydCB5b3VyIHlvZ2Egam91cm5leSB0aGVuIEtpbm8gTWFjR3JlZ29y4oCZcyB5b2dhIGNoYW5uZWwgaXMgcGVyZmVjdCBmb3IgeW91ISBXaGV0aGVyIHlvdSBhcmUgbmV3IHRvIHlvZ2Egb3IgYW4gYWR2YW5jZWQgeW9nYSBzdHVkZW50IHlvdSB3aWxsIGZpbmQgYSBmdWxsIHlvZ2EgbGlicmFyeSB3aXRoIGFsbCB0aGUgeW9nYSBwb3N0dXJlcyB0aGF0IHlvdSBuZWVkIHRvIGRldmVsb3AgYSBjb21wbGV0ZSB5b2dhIHByYWN0aWNlLiBZb2dhIGlzIG1vcmUgdGhhbiBqdXN0IGEgcGh5c2ljYWwgcHJhY3RpY2UgeW9nYSBpcyBhIGxpZmVzdHlsZSB0aGF0IGluY2x1ZGVzIGxpdmluZyBhIHBlYWNlZnVsIGxpZmUuIExpdmluZyB0aGUgeW9nYSBsaWZlc3R5bGUgaXMgYWJvdXQgeW9nYSBwcmFjdGljZSwgaW5uZXIgcGVhY2UsIHlvZ2EgZGlldCBhbmQgYmVpbmcgYSBnb29kIHBlcnNvbiBvbiBhbmQgb2ZmIHlvdXIgeW9nYSBtYXQuIEtpbm8gaXMgYSB5b2dhIHRlYWNoZXIsIGF1dGhvciBvZiB0aHJlZSBib29rcywgaW50ZXJuYXRpb25hbCB0ZWFjaGVyLCB3cml0ZXIsIGJsb2dnZXIsIG9ubGluZSB5b2dhIGNsYXNzIHRlYWNoZXIsIElHIHlvZ2EgY2hhbGxlbmdlIGhvc3QgYW5kIG11Y2ggbW9yZS4gU2hlIGNvLWZvdW5kZWQgTWlhbWkgTGlmZSBDZW50ZXIgYW5kIE1pYW1pIFlvZ2EgTWFnYXppbmUgYXMgd2VsbCBhcyBwcm9kdWNlZCBzaXggQXNodGFuZ2EgWW9nYSBEVkRzLiBQcmFjdGljZSB5b2dhLCBjaGFuZ2UgeW91ciB3b3JsZCBvbmUgYnJlYXRoIGF0IGEgdGltZS4gS2lubyBiZWxpZXZlcyB0aGF0IHlvZ2EgaXMgYSB2ZWhpY2xlIGZvciBlYWNoIHN0dWRlbnQgdG8gZXhwZXJpZW5jZSB0aGUgbGltaXRsZXNzIHBvdGVudGlhbCBvZiB0aGUgaHVtYW4gc3Bpcml0LiBZb3UgZG9u4oCZdCBoYXZlIHRvIGJlIHN0cm9uZyBvciBmbGV4aWJsZSB0byBiZWdpbiB0aGUgeW9nYSBwcmFjdGljZSwgYWxsIHlvdSBuZWVkIGlzIGFuIG9wZW4gaGVhcnQgYW5kIHRoZSBpbnNwaXJhdGlvbiB0byBwcmFjdGljZSB5b2dhLiBVbnJvbGwgeW91ciBtYXQgYW5kIGRvIHRoZSBwcmFjdGljZSFcblxuRmFjZWJvb2sgLSBodHRwOi8vd3d3LmZhY2Vib29rLmNvbS9LaW5vWW9nYVxuSW5zdGFncmFtIC0gaHR0cDovL3d3dy5pbnN0YWdyYW0uY29tL0tpbm9Zb2dhXG5CbG9nIC0gaHR0cDovL3d3dy5raW5veW9nYS5jb20iLAogICAgInRodW1ibmFpbHMiOiB7CiAgICAgImRlZmF1bHQiOiB7CiAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9QWmNwM0x6N1dKcy9kZWZhdWx0LmpwZyIsCiAgICAgICJ3aWR0aCI6IDEyMCwKICAgICAgImhlaWdodCI6IDkwCiAgICAgfSwKICAgICAibWVkaXVtIjogewogICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvUFpjcDNMejdXSnMvbXFkZWZhdWx0LmpwZyIsCiAgICAgICJ3aWR0aCI6IDMyMCwKICAgICAgImhlaWdodCI6IDE4MAogICAgIH0sCiAgICAgImhpZ2giOiB7CiAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9QWmNwM0x6N1dKcy9ocWRlZmF1bHQuanBnIiwKICAgICAgIndpZHRoIjogNDgwLAogICAgICAiaGVpZ2h0IjogMzYwCiAgICAgfSwKICAgICAic3RhbmRhcmQiOiB7CiAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9QWmNwM0x6N1dKcy9zZGRlZmF1bHQuanBnIiwKICAgICAgIndpZHRoIjogNjQwLAogICAgICAiaGVpZ2h0IjogNDgwCiAgICAgfSwKICAgICAibWF4cmVzIjogewogICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvUFpjcDNMejdXSnMvbWF4cmVzZGVmYXVsdC5qcGciLAogICAgICAid2lkdGgiOiAxMjgwLAogICAgICAiaGVpZ2h0IjogNzIwCiAgICAgfQogICAgfSwKICAgICJjaGFubmVsVGl0bGUiOiAiS2lub1lvZ2EiLAogICAgInBsYXlsaXN0SWQiOiAiUEw1MDhDMzA2NTZCMjUzREJGIiwKICAgICJwb3NpdGlvbiI6IDQyLAogICAgInJlc291cmNlSWQiOiB7CiAgICAgImtpbmQiOiAieW91dHViZSN2aWRlbyIsCiAgICAgInZpZGVvSWQiOiAiUFpjcDNMejdXSnMiCiAgICB9CiAgIH0KICB9LAogIHsKICAgImtpbmQiOiAieW91dHViZSNwbGF5bGlzdEl0ZW0iLAogICAiZXRhZyI6ICJcIkRuNXhJZGVyYmhBblVrNVRBVzBxa0ZGaXIwTS9jSmhsZldiSXR1cjNVaF9EZG9BM0liSGRqOHdcIiIsCiAgICJpZCI6ICJVRXcxTURoRE16QTJOVFpDTWpVelJFSkdMamMwUlRaR09FRkVSakJDTVRCRU5qUT0iLAogICAic25pcHBldCI6IHsKICAgICJwdWJsaXNoZWRBdCI6ICIyMDE0LTA1LTE0VDAxOjI4OjE1LjAwMFoiLAogICAgImNoYW5uZWxJZCI6ICJVQ0gtODF1YXhDd0FBYVNneFJ0eE1reGciLAogICAgInRpdGxlIjogIkJlZ2lubmVyIFlvZ2E6IFRyaWtvbmFzYW5hIHdpdGggS2lubyIsCiAgICAiZGVzY3JpcHRpb24iOiAiSWYgeW914oCZcmUgbG9va2luZyBmb3IgeW9nYSB2aWRlb3MgdGhhdCB3aWxsIHNob3cgeW91IHRoZSBwZXJmZWN0IHdheSBmb3IgeW91IHRvIHN0YXJ0IHlvdXIgeW9nYSBqb3VybmV5IHRoZW4gS2lubyBNYWNHcmVnb3LigJlzIHlvZ2EgY2hhbm5lbCBpcyBwZXJmZWN0IGZvciB5b3UhIFdoZXRoZXIgeW91IGFyZSBuZXcgdG8geW9nYSBvciBhbiBhZHZhbmNlZCB5b2dhIHN0dWRlbnQgeW91IHdpbGwgZmluZCBhIGZ1bGwgeW9nYSBsaWJyYXJ5IHdpdGggYWxsIHRoZSB5b2dhIHBvc3R1cmVzIHRoYXQgeW91IG5lZWQgdG8gZGV2ZWxvcCBhIGNvbXBsZXRlIHlvZ2EgcHJhY3RpY2UuIFlvZ2EgaXMgbW9yZSB0aGFuIGp1c3QgYSBwaHlzaWNhbCBwcmFjdGljZSB5b2dhIGlzIGEgbGlmZXN0eWxlIHRoYXQgaW5jbHVkZXMgbGl2aW5nIGEgcGVhY2VmdWwgbGlmZS4gTGl2aW5nIHRoZSB5b2dhIGxpZmVzdHlsZSBpcyBhYm91dCB5b2dhIHByYWN0aWNlLCBpbm5lciBwZWFjZSwgeW9nYSBkaWV0IGFuZCBiZWluZyBhIGdvb2QgcGVyc29uIG9uIGFuZCBvZmYgeW91ciB5b2dhIG1hdC4gS2lubyBpcyBhIHlvZ2EgdGVhY2hlciwgYXV0aG9yIG9mIHRocmVlIGJvb2tzLCBpbnRlcm5hdGlvbmFsIHRlYWNoZXIsIHdyaXRlciwgYmxvZ2dlciwgb25saW5lIHlvZ2EgY2xhc3MgdGVhY2hlciwgSUcgeW9nYSBjaGFsbGVuZ2UgaG9zdCBhbmQgbXVjaCBtb3JlLiBTaGUgY28tZm91bmRlZCBNaWFtaSBMaWZlIENlbnRlciBhbmQgTWlhbWkgWW9nYSBNYWdhemluZSBhcyB3ZWxsIGFzIHByb2R1Y2VkIHNpeCBBc2h0YW5nYSBZb2dhIERWRHMuIFByYWN0aWNlIHlvZ2EsIGNoYW5nZSB5b3VyIHdvcmxkIG9uZSBicmVhdGggYXQgYSB0aW1lLiBLaW5vIGJlbGlldmVzIHRoYXQgeW9nYSBpcyBhIHZlaGljbGUgZm9yIGVhY2ggc3R1ZGVudCB0byBleHBlcmllbmNlIHRoZSBsaW1pdGxlc3MgcG90ZW50aWFsIG9mIHRoZSBodW1hbiBzcGlyaXQuIFlvdSBkb27igJl0IGhhdmUgdG8gYmUgc3Ryb25nIG9yIGZsZXhpYmxlIHRvIGJlZ2luIHRoZSB5b2dhIHByYWN0aWNlLCBhbGwgeW91IG5lZWQgaXMgYW4gb3BlbiBoZWFydCBhbmQgdGhlIGluc3BpcmF0aW9uIHRvIHByYWN0aWNlIHlvZ2EuIFVucm9sbCB5b3VyIG1hdCBhbmQgZG8gdGhlIHByYWN0aWNlIVxuXG5GYWNlYm9vayAtIGh0dHA6Ly93d3cuZmFjZWJvb2suY29tL0tpbm9Zb2dhXG5JbnN0YWdyYW0gLSBodHRwOi8vd3d3Lmluc3RhZ3JhbS5jb20vS2lub1lvZ2FcbkJsb2cgLSBodHRwOi8vd3d3Lmtpbm95b2dhLmNvbSIsCiAgICAidGh1bWJuYWlscyI6IHsKICAgICAiZGVmYXVsdCI6IHsKICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL3N4MURwVnpZcGw0L2RlZmF1bHQuanBnIiwKICAgICAgIndpZHRoIjogMTIwLAogICAgICAiaGVpZ2h0IjogOTAKICAgICB9LAogICAgICJtZWRpdW0iOiB7CiAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9zeDFEcFZ6WXBsNC9tcWRlZmF1bHQuanBnIiwKICAgICAgIndpZHRoIjogMzIwLAogICAgICAiaGVpZ2h0IjogMTgwCiAgICAgfSwKICAgICAiaGlnaCI6IHsKICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL3N4MURwVnpZcGw0L2hxZGVmYXVsdC5qcGciLAogICAgICAid2lkdGgiOiA0ODAsCiAgICAgICJoZWlnaHQiOiAzNjAKICAgICB9LAogICAgICJzdGFuZGFyZCI6IHsKICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL3N4MURwVnpZcGw0L3NkZGVmYXVsdC5qcGciLAogICAgICAid2lkdGgiOiA2NDAsCiAgICAgICJoZWlnaHQiOiA0ODAKICAgICB9LAogICAgICJtYXhyZXMiOiB7CiAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9zeDFEcFZ6WXBsNC9tYXhyZXNkZWZhdWx0LmpwZyIsCiAgICAgICJ3aWR0aCI6IDEyODAsCiAgICAgICJoZWlnaHQiOiA3MjAKICAgICB9CiAgICB9LAogICAgImNoYW5uZWxUaXRsZSI6ICJLaW5vWW9nYSIsCiAgICAicGxheWxpc3RJZCI6ICJQTDUwOEMzMDY1NkIyNTNEQkYiLAogICAgInBvc2l0aW9uIjogNDMsCiAgICAicmVzb3VyY2VJZCI6IHsKICAgICAia2luZCI6ICJ5b3V0dWJlI3ZpZGVvIiwKICAgICAidmlkZW9JZCI6ICJzeDFEcFZ6WXBsNCIKICAgIH0KICAgfQogIH0sCiAgewogICAia2luZCI6ICJ5b3V0dWJlI3BsYXlsaXN0SXRlbSIsCiAgICJldGFnIjogIlwiRG41eElkZXJiaEFuVWs1VEFXMHFrRkZpcjBNL3BXMWoxU1l5ekRNMlVhdjUwUV9SRm1PdmNPWVwiIiwKICAgImlkIjogIlVFdzFNRGhETXpBMk5UWkNNalV6UkVKR0xrTXpSVVE0UlRrNE9ERTROVEZHTlRZPSIsCiAgICJzbmlwcGV0IjogewogICAgInB1Ymxpc2hlZEF0IjogIjIwMTQtMDQtMDRUMTE6Mjk6NDYuMDAwWiIsCiAgICAiY2hhbm5lbElkIjogIlVDSC04MXVheEN3QUFhU2d4UnR4TWt4ZyIsCiAgICAidGl0bGUiOiAiWW9nYSBmb3IgQmVnaW5uZXJzIERWRCBUcmFpbGVyIHdpdGggS2lubyBNYWNHcmVnb3IgSlVTVCBSRUxFQVNFRCEhISIsCiAgICAiZGVzY3JpcHRpb24iOiAiSWYgeW914oCZcmUgbG9va2luZyBmb3IgeW9nYSB2aWRlb3MgdGhhdCB3aWxsIHNob3cgeW91IHRoZSBwZXJmZWN0IHdheSBmb3IgeW91IHRvIHN0YXJ0IHlvdXIgeW9nYSBqb3VybmV5IHRoZW4gS2lubyBNYWNHcmVnb3LigJlzIHlvZ2EgY2hhbm5lbCBpcyBwZXJmZWN0IGZvciB5b3UhIFdoZXRoZXIgeW91IGFyZSBuZXcgdG8geW9nYSBvciBhbiBhZHZhbmNlZCB5b2dhIHN0dWRlbnQgeW91IHdpbGwgZmluZCBhIGZ1bGwgeW9nYSBsaWJyYXJ5IHdpdGggYWxsIHRoZSB5b2dhIHBvc3R1cmVzIHRoYXQgeW91IG5lZWQgdG8gZGV2ZWxvcCBhIGNvbXBsZXRlIHlvZ2EgcHJhY3RpY2UuIFlvZ2EgaXMgbW9yZSB0aGFuIGp1c3QgYSBwaHlzaWNhbCBwcmFjdGljZSB5b2dhIGlzIGEgbGlmZXN0eWxlIHRoYXQgaW5jbHVkZXMgbGl2aW5nIGEgcGVhY2VmdWwgbGlmZS4gTGl2aW5nIHRoZSB5b2dhIGxpZmVzdHlsZSBpcyBhYm91dCB5b2dhIHByYWN0aWNlLCBpbm5lciBwZWFjZSwgeW9nYSBkaWV0IGFuZCBiZWluZyBhIGdvb2QgcGVyc29uIG9uIGFuZCBvZmYgeW91ciB5b2dhIG1hdC4gS2lubyBpcyBhIHlvZ2EgdGVhY2hlciwgYXV0aG9yIG9mIHRocmVlIGJvb2tzLCBpbnRlcm5hdGlvbmFsIHRlYWNoZXIsIHdyaXRlciwgYmxvZ2dlciwgb25saW5lIHlvZ2EgY2xhc3MgdGVhY2hlciwgSUcgeW9nYSBjaGFsbGVuZ2UgaG9zdCBhbmQgbXVjaCBtb3JlLiBTaGUgY28tZm91bmRlZCBNaWFtaSBMaWZlIENlbnRlciBhbmQgTWlhbWkgWW9nYSBNYWdhemluZSBhcyB3ZWxsIGFzIHByb2R1Y2VkIHNpeCBBc2h0YW5nYSBZb2dhIERWRHMuIFByYWN0aWNlIHlvZ2EsIGNoYW5nZSB5b3VyIHdvcmxkIG9uZSBicmVhdGggYXQgYSB0aW1lLiBLaW5vIGJlbGlldmVzIHRoYXQgeW9nYSBpcyBhIHZlaGljbGUgZm9yIGVhY2ggc3R1ZGVudCB0byBleHBlcmllbmNlIHRoZSBsaW1pdGxlc3MgcG90ZW50aWFsIG9mIHRoZSBodW1hbiBzcGlyaXQuIFlvdSBkb27igJl0IGhhdmUgdG8gYmUgc3Ryb25nIG9yIGZsZXhpYmxlIHRvIGJlZ2luIHRoZSB5b2dhIHByYWN0aWNlLCBhbGwgeW91IG5lZWQgaXMgYW4gb3BlbiBoZWFydCBhbmQgdGhlIGluc3BpcmF0aW9uIHRvIHByYWN0aWNlIHlvZ2EuIFVucm9sbCB5b3VyIG1hdCBhbmQgZG8gdGhlIHByYWN0aWNlIVxuXG5GYWNlYm9vayAtIGh0dHA6Ly93d3cuZmFjZWJvb2suY29tL0tpbm9Zb2dhXG5JbnN0YWdyYW0gLSBodHRwOi8vd3d3Lmluc3RhZ3JhbS5jb20vS2lub1lvZ2FcbkJsb2cgLSBodHRwOi8vd3d3Lmtpbm95b2dhLmNvbSIsCiAgICAidGh1bWJuYWlscyI6IHsKICAgICAiZGVmYXVsdCI6IHsKICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL25BeFlrbTBHb2Y0L2RlZmF1bHQuanBnIiwKICAgICAgIndpZHRoIjogMTIwLAogICAgICAiaGVpZ2h0IjogOTAKICAgICB9LAogICAgICJtZWRpdW0iOiB7CiAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9uQXhZa20wR29mNC9tcWRlZmF1bHQuanBnIiwKICAgICAgIndpZHRoIjogMzIwLAogICAgICAiaGVpZ2h0IjogMTgwCiAgICAgfSwKICAgICAiaGlnaCI6IHsKICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL25BeFlrbTBHb2Y0L2hxZGVmYXVsdC5qcGciLAogICAgICAid2lkdGgiOiA0ODAsCiAgICAgICJoZWlnaHQiOiAzNjAKICAgICB9LAogICAgICJzdGFuZGFyZCI6IHsKICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL25BeFlrbTBHb2Y0L3NkZGVmYXVsdC5qcGciLAogICAgICAid2lkdGgiOiA2NDAsCiAgICAgICJoZWlnaHQiOiA0ODAKICAgICB9LAogICAgICJtYXhyZXMiOiB7CiAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9uQXhZa20wR29mNC9tYXhyZXNkZWZhdWx0LmpwZyIsCiAgICAgICJ3aWR0aCI6IDEyODAsCiAgICAgICJoZWlnaHQiOiA3MjAKICAgICB9CiAgICB9LAogICAgImNoYW5uZWxUaXRsZSI6ICJLaW5vWW9nYSIsCiAgICAicGxheWxpc3RJZCI6ICJQTDUwOEMzMDY1NkIyNTNEQkYiLAogICAgInBvc2l0aW9uIjogNDQsCiAgICAicmVzb3VyY2VJZCI6IHsKICAgICAia2luZCI6ICJ5b3V0dWJlI3ZpZGVvIiwKICAgICAidmlkZW9JZCI6ICJuQXhZa20wR29mNCIKICAgIH0KICAgfQogIH0sCiAgewogICAia2luZCI6ICJ5b3V0dWJlI3BsYXlsaXN0SXRlbSIsCiAgICJldGFnIjogIlwiRG41eElkZXJiaEFuVWs1VEFXMHFrRkZpcjBNL3MyQjlURWVjZ29hZE4zWVFtZmtkZ2tPY2U0VVwiIiwKICAgImlkIjogIlVFdzFNRGhETXpBMk5UWkNNalV6UkVKR0xrUkZSamc0TmpWQlFUTkJOamd6TVRFPSIsCiAgICJzbmlwcGV0IjogewogICAgInB1Ymxpc2hlZEF0IjogIjIwMTQtMDEtMDFUMDg6MDE6MjQuMDAwWiIsCiAgICAiY2hhbm5lbElkIjogIlVDSC04MXVheEN3QUFhU2d4UnR4TWt4ZyIsCiAgICAidGl0bGUiOiAiWW9nYSBTdGFuZGluZyBQb3N0dXJlIFBhcnN2YWtvbmFzYW5hIHdpdGggS2lubyIsCiAgICAiZGVzY3JpcHRpb24iOiAiSWYgeW914oCZcmUgbG9va2luZyBmb3IgeW9nYSB2aWRlb3MgdGhhdCB3aWxsIHNob3cgeW91IHRoZSBwZXJmZWN0IHdheSBmb3IgeW91IHRvIHN0YXJ0IHlvdXIgeW9nYSBqb3VybmV5IHRoZW4gS2lubyBNYWNHcmVnb3LigJlzIHlvZ2EgY2hhbm5lbCBpcyBwZXJmZWN0IGZvciB5b3UhIFdoZXRoZXIgeW91IGFyZSBuZXcgdG8geW9nYSBvciBhbiBhZHZhbmNlZCB5b2dhIHN0dWRlbnQgeW91IHdpbGwgZmluZCBhIGZ1bGwgeW9nYSBsaWJyYXJ5IHdpdGggYWxsIHRoZSB5b2dhIHBvc3R1cmVzIHRoYXQgeW91IG5lZWQgdG8gZGV2ZWxvcCBhIGNvbXBsZXRlIHlvZ2EgcHJhY3RpY2UuIFlvZ2EgaXMgbW9yZSB0aGFuIGp1c3QgYSBwaHlzaWNhbCBwcmFjdGljZSB5b2dhIGlzIGEgbGlmZXN0eWxlIHRoYXQgaW5jbHVkZXMgbGl2aW5nIGEgcGVhY2VmdWwgbGlmZS4gTGl2aW5nIHRoZSB5b2dhIGxpZmVzdHlsZSBpcyBhYm91dCB5b2dhIHByYWN0aWNlLCBpbm5lciBwZWFjZSwgeW9nYSBkaWV0IGFuZCBiZWluZyBhIGdvb2QgcGVyc29uIG9uIGFuZCBvZmYgeW91ciB5b2dhIG1hdC4gS2lubyBpcyBhIHlvZ2EgdGVhY2hlciwgYXV0aG9yIG9mIHRocmVlIGJvb2tzLCBpbnRlcm5hdGlvbmFsIHRlYWNoZXIsIHdyaXRlciwgYmxvZ2dlciwgb25saW5lIHlvZ2EgY2xhc3MgdGVhY2hlciwgSUcgeW9nYSBjaGFsbGVuZ2UgaG9zdCBhbmQgbXVjaCBtb3JlLiBTaGUgY28tZm91bmRlZCBNaWFtaSBMaWZlIENlbnRlciBhbmQgTWlhbWkgWW9nYSBNYWdhemluZSBhcyB3ZWxsIGFzIHByb2R1Y2VkIHNpeCBBc2h0YW5nYSBZb2dhIERWRHMuIFByYWN0aWNlIHlvZ2EsIGNoYW5nZSB5b3VyIHdvcmxkIG9uZSBicmVhdGggYXQgYSB0aW1lLiBLaW5vIGJlbGlldmVzIHRoYXQgeW9nYSBpcyBhIHZlaGljbGUgZm9yIGVhY2ggc3R1ZGVudCB0byBleHBlcmllbmNlIHRoZSBsaW1pdGxlc3MgcG90ZW50aWFsIG9mIHRoZSBodW1hbiBzcGlyaXQuIFlvdSBkb27igJl0IGhhdmUgdG8gYmUgc3Ryb25nIG9yIGZsZXhpYmxlIHRvIGJlZ2luIHRoZSB5b2dhIHByYWN0aWNlLCBhbGwgeW91IG5lZWQgaXMgYW4gb3BlbiBoZWFydCBhbmQgdGhlIGluc3BpcmF0aW9uIHRvIHByYWN0aWNlIHlvZ2EuIFVucm9sbCB5b3VyIG1hdCBhbmQgZG8gdGhlIHByYWN0aWNlIVxuXG5GYWNlYm9vayAtIGh0dHA6Ly93d3cuZmFjZWJvb2suY29tL0tpbm9Zb2dhXG5JbnN0YWdyYW0gLSBodHRwOi8vd3d3Lmluc3RhZ3JhbS5jb20vS2lub1lvZ2FcbkJsb2cgLSBodHRwOi8vd3d3Lmtpbm95b2dhLmNvbSIsCiAgICAidGh1bWJuYWlscyI6IHsKICAgICAiZGVmYXVsdCI6IHsKICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpLy1iMjRVOEpneEZZL2RlZmF1bHQuanBnIiwKICAgICAgIndpZHRoIjogMTIwLAogICAgICAiaGVpZ2h0IjogOTAKICAgICB9LAogICAgICJtZWRpdW0iOiB7CiAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS8tYjI0VThKZ3hGWS9tcWRlZmF1bHQuanBnIiwKICAgICAgIndpZHRoIjogMzIwLAogICAgICAiaGVpZ2h0IjogMTgwCiAgICAgfSwKICAgICAiaGlnaCI6IHsKICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpLy1iMjRVOEpneEZZL2hxZGVmYXVsdC5qcGciLAogICAgICAid2lkdGgiOiA0ODAsCiAgICAgICJoZWlnaHQiOiAzNjAKICAgICB9LAogICAgICJzdGFuZGFyZCI6IHsKICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpLy1iMjRVOEpneEZZL3NkZGVmYXVsdC5qcGciLAogICAgICAid2lkdGgiOiA2NDAsCiAgICAgICJoZWlnaHQiOiA0ODAKICAgICB9LAogICAgICJtYXhyZXMiOiB7CiAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS8tYjI0VThKZ3hGWS9tYXhyZXNkZWZhdWx0LmpwZyIsCiAgICAgICJ3aWR0aCI6IDEyODAsCiAgICAgICJoZWlnaHQiOiA3MjAKICAgICB9CiAgICB9LAogICAgImNoYW5uZWxUaXRsZSI6ICJLaW5vWW9nYSIsCiAgICAicGxheWxpc3RJZCI6ICJQTDUwOEMzMDY1NkIyNTNEQkYiLAogICAgInBvc2l0aW9uIjogNDUsCiAgICAicmVzb3VyY2VJZCI6IHsKICAgICAia2luZCI6ICJ5b3V0dWJlI3ZpZGVvIiwKICAgICAidmlkZW9JZCI6ICItYjI0VThKZ3hGWSIKICAgIH0KICAgfQogIH0sCiAgewogICAia2luZCI6ICJ5b3V0dWJlI3BsYXlsaXN0SXRlbSIsCiAgICJldGFnIjogIlwiRG41eElkZXJiaEFuVWs1VEFXMHFrRkZpcjBNL1EzWHJWR1B1b1Q4c0JmREtROENLSjBXLWpETVwiIiwKICAgImlkIjogIlVFdzFNRGhETXpBMk5UWkNNalV6UkVKR0xqa3pOa1JDUVRZM1JEaERNamhFTURFPSIsCiAgICJzbmlwcGV0IjogewogICAgInB1Ymxpc2hlZEF0IjogIjIwMTMtMTItMDNUMTQ6NTY6MTkuMDAwWiIsCiAgICAiY2hhbm5lbElkIjogIlVDSC04MXVheEN3QUFhU2d4UnR4TWt4ZyIsCiAgICAidGl0bGUiOiAiQmVnaW5uZXIgWW9nYSAtIENvcmUgU3RyZW5ndGggd2l0aCBLaW5vIERvIFlvdSBZb2dhIFNlcmllcyBQYXJ0IDMiLAogICAgImRlc2NyaXB0aW9uIjogIklmIHlvdeKAmXJlIGxvb2tpbmcgZm9yIHlvZ2EgdmlkZW9zIHRoYXQgd2lsbCBzaG93IHlvdSB0aGUgcGVyZmVjdCB3YXkgZm9yIHlvdSB0byBzdGFydCB5b3VyIHlvZ2Egam91cm5leSB0aGVuIEtpbm8gTWFjR3JlZ29y4oCZcyB5b2dhIGNoYW5uZWwgaXMgcGVyZmVjdCBmb3IgeW91ISBXaGV0aGVyIHlvdSBhcmUgbmV3IHRvIHlvZ2Egb3IgYW4gYWR2YW5jZWQgeW9nYSBzdHVkZW50IHlvdSB3aWxsIGZpbmQgYSBmdWxsIHlvZ2EgbGlicmFyeSB3aXRoIGFsbCB0aGUgeW9nYSBwb3N0dXJlcyB0aGF0IHlvdSBuZWVkIHRvIGRldmVsb3AgYSBjb21wbGV0ZSB5b2dhIHByYWN0aWNlLiBZb2dhIGlzIG1vcmUgdGhhbiBqdXN0IGEgcGh5c2ljYWwgcHJhY3RpY2UgeW9nYSBpcyBhIGxpZmVzdHlsZSB0aGF0IGluY2x1ZGVzIGxpdmluZyBhIHBlYWNlZnVsIGxpZmUuIExpdmluZyB0aGUgeW9nYSBsaWZlc3R5bGUgaXMgYWJvdXQgeW9nYSBwcmFjdGljZSwgaW5uZXIgcGVhY2UsIHlvZ2EgZGlldCBhbmQgYmVpbmcgYSBnb29kIHBlcnNvbiBvbiBhbmQgb2ZmIHlvdXIgeW9nYSBtYXQuIEtpbm8gaXMgYSB5b2dhIHRlYWNoZXIsIGF1dGhvciBvZiB0aHJlZSBib29rcywgaW50ZXJuYXRpb25hbCB0ZWFjaGVyLCB3cml0ZXIsIGJsb2dnZXIsIG9ubGluZSB5b2dhIGNsYXNzIHRlYWNoZXIsIElHIHlvZ2EgY2hhbGxlbmdlIGhvc3QgYW5kIG11Y2ggbW9yZS4gU2hlIGNvLWZvdW5kZWQgTWlhbWkgTGlmZSBDZW50ZXIgYW5kIE1pYW1pIFlvZ2EgTWFnYXppbmUgYXMgd2VsbCBhcyBwcm9kdWNlZCBzaXggQXNodGFuZ2EgWW9nYSBEVkRzLiBQcmFjdGljZSB5b2dhLCBjaGFuZ2UgeW91ciB3b3JsZCBvbmUgYnJlYXRoIGF0IGEgdGltZS4gS2lubyBiZWxpZXZlcyB0aGF0IHlvZ2EgaXMgYSB2ZWhpY2xlIGZvciBlYWNoIHN0dWRlbnQgdG8gZXhwZXJpZW5jZSB0aGUgbGltaXRsZXNzIHBvdGVudGlhbCBvZiB0aGUgaHVtYW4gc3Bpcml0LiBZb3UgZG9u4oCZdCBoYXZlIHRvIGJlIHN0cm9uZyBvciBmbGV4aWJsZSB0byBiZWdpbiB0aGUgeW9nYSBwcmFjdGljZSwgYWxsIHlvdSBuZWVkIGlzIGFuIG9wZW4gaGVhcnQgYW5kIHRoZSBpbnNwaXJhdGlvbiB0byBwcmFjdGljZSB5b2dhLiBVbnJvbGwgeW91ciBtYXQgYW5kIGRvIHRoZSBwcmFjdGljZSFcblxuRmFjZWJvb2sgLSBodHRwOi8vd3d3LmZhY2Vib29rLmNvbS9LaW5vWW9nYVxuSW5zdGFncmFtIC0gaHR0cDovL3d3dy5pbnN0YWdyYW0uY29tL0tpbm9Zb2dhXG5CbG9nIC0gaHR0cDovL3d3dy5raW5veW9nYS5jb20iLAogICAgInRodW1ibmFpbHMiOiB7CiAgICAgImRlZmF1bHQiOiB7CiAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9haEVadktXRkFZVS9kZWZhdWx0LmpwZyIsCiAgICAgICJ3aWR0aCI6IDEyMCwKICAgICAgImhlaWdodCI6IDkwCiAgICAgfSwKICAgICAibWVkaXVtIjogewogICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvYWhFWnZLV0ZBWVUvbXFkZWZhdWx0LmpwZyIsCiAgICAgICJ3aWR0aCI6IDMyMCwKICAgICAgImhlaWdodCI6IDE4MAogICAgIH0sCiAgICAgImhpZ2giOiB7CiAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9haEVadktXRkFZVS9ocWRlZmF1bHQuanBnIiwKICAgICAgIndpZHRoIjogNDgwLAogICAgICAiaGVpZ2h0IjogMzYwCiAgICAgfSwKICAgICAic3RhbmRhcmQiOiB7CiAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9haEVadktXRkFZVS9zZGRlZmF1bHQuanBnIiwKICAgICAgIndpZHRoIjogNjQwLAogICAgICAiaGVpZ2h0IjogNDgwCiAgICAgfSwKICAgICAibWF4cmVzIjogewogICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvYWhFWnZLV0ZBWVUvbWF4cmVzZGVmYXVsdC5qcGciLAogICAgICAid2lkdGgiOiAxMjgwLAogICAgICAiaGVpZ2h0IjogNzIwCiAgICAgfQogICAgfSwKICAgICJjaGFubmVsVGl0bGUiOiAiS2lub1lvZ2EiLAogICAgInBsYXlsaXN0SWQiOiAiUEw1MDhDMzA2NTZCMjUzREJGIiwKICAgICJwb3NpdGlvbiI6IDQ2LAogICAgInJlc291cmNlSWQiOiB7CiAgICAgImtpbmQiOiAieW91dHViZSN2aWRlbyIsCiAgICAgInZpZGVvSWQiOiAiYWhFWnZLV0ZBWVUiCiAgICB9CiAgIH0KICB9LAogIHsKICAgImtpbmQiOiAieW91dHViZSNwbGF5bGlzdEl0ZW0iLAogICAiZXRhZyI6ICJcIkRuNXhJZGVyYmhBblVrNVRBVzBxa0ZGaXIwTS8zbVhPTkZYQ1NLOWVLdmVMbXBqelVZOXlpbzhcIiIsCiAgICJpZCI6ICJVRXcxTURoRE16QTJOVFpDTWpVelJFSkdMa1pGT1VWQ05EVXhSRVExT1RnMk1qRT0iLAogICAic25pcHBldCI6IHsKICAgICJwdWJsaXNoZWRBdCI6ICIyMDEzLTEyLTAzVDE0OjU2OjEyLjAwMFoiLAogICAgImNoYW5uZWxJZCI6ICJVQ0gtODF1YXhDd0FBYVNneFJ0eE1reGciLAogICAgInRpdGxlIjogIkJlZ2lubmVyIFlvZ2EgLSBSZWxheGF0aW9uIHdpdGggS2lubyBEbyBZb3UgWW9nYSBTZXJpZXMgVmlkZW8gNCIsCiAgICAiZGVzY3JpcHRpb24iOiAiSWYgeW914oCZcmUgbG9va2luZyBmb3IgeW9nYSB2aWRlb3MgdGhhdCB3aWxsIHNob3cgeW91IHRoZSBwZXJmZWN0IHdheSBmb3IgeW91IHRvIHN0YXJ0IHlvdXIgeW9nYSBqb3VybmV5IHRoZW4gS2lubyBNYWNHcmVnb3LigJlzIHlvZ2EgY2hhbm5lbCBpcyBwZXJmZWN0IGZvciB5b3UhIFdoZXRoZXIgeW91IGFyZSBuZXcgdG8geW9nYSBvciBhbiBhZHZhbmNlZCB5b2dhIHN0dWRlbnQgeW91IHdpbGwgZmluZCBhIGZ1bGwgeW9nYSBsaWJyYXJ5IHdpdGggYWxsIHRoZSB5b2dhIHBvc3R1cmVzIHRoYXQgeW91IG5lZWQgdG8gZGV2ZWxvcCBhIGNvbXBsZXRlIHlvZ2EgcHJhY3RpY2UuIFlvZ2EgaXMgbW9yZSB0aGFuIGp1c3QgYSBwaHlzaWNhbCBwcmFjdGljZSB5b2dhIGlzIGEgbGlmZXN0eWxlIHRoYXQgaW5jbHVkZXMgbGl2aW5nIGEgcGVhY2VmdWwgbGlmZS4gTGl2aW5nIHRoZSB5b2dhIGxpZmVzdHlsZSBpcyBhYm91dCB5b2dhIHByYWN0aWNlLCBpbm5lciBwZWFjZSwgeW9nYSBkaWV0IGFuZCBiZWluZyBhIGdvb2QgcGVyc29uIG9uIGFuZCBvZmYgeW91ciB5b2dhIG1hdC4gS2lubyBpcyBhIHlvZ2EgdGVhY2hlciwgYXV0aG9yIG9mIHRocmVlIGJvb2tzLCBpbnRlcm5hdGlvbmFsIHRlYWNoZXIsIHdyaXRlciwgYmxvZ2dlciwgb25saW5lIHlvZ2EgY2xhc3MgdGVhY2hlciwgSUcgeW9nYSBjaGFsbGVuZ2UgaG9zdCBhbmQgbXVjaCBtb3JlLiBTaGUgY28tZm91bmRlZCBNaWFtaSBMaWZlIENlbnRlciBhbmQgTWlhbWkgWW9nYSBNYWdhemluZSBhcyB3ZWxsIGFzIHByb2R1Y2VkIHNpeCBBc2h0YW5nYSBZb2dhIERWRHMuIFByYWN0aWNlIHlvZ2EsIGNoYW5nZSB5b3VyIHdvcmxkIG9uZSBicmVhdGggYXQgYSB0aW1lLiBLaW5vIGJlbGlldmVzIHRoYXQgeW9nYSBpcyBhIHZlaGljbGUgZm9yIGVhY2ggc3R1ZGVudCB0byBleHBlcmllbmNlIHRoZSBsaW1pdGxlc3MgcG90ZW50aWFsIG9mIHRoZSBodW1hbiBzcGlyaXQuIFlvdSBkb27igJl0IGhhdmUgdG8gYmUgc3Ryb25nIG9yIGZsZXhpYmxlIHRvIGJlZ2luIHRoZSB5b2dhIHByYWN0aWNlLCBhbGwgeW91IG5lZWQgaXMgYW4gb3BlbiBoZWFydCBhbmQgdGhlIGluc3BpcmF0aW9uIHRvIHByYWN0aWNlIHlvZ2EuIFVucm9sbCB5b3VyIG1hdCBhbmQgZG8gdGhlIHByYWN0aWNlIVxuXG5GYWNlYm9vayAtIGh0dHA6Ly93d3cuZmFjZWJvb2suY29tL0tpbm9Zb2dhXG5JbnN0YWdyYW0gLSBodHRwOi8vd3d3Lmluc3RhZ3JhbS5jb20vS2lub1lvZ2FcbkJsb2cgLSBodHRwOi8vd3d3Lmtpbm95b2dhLmNvbSIsCiAgICAidGh1bWJuYWlscyI6IHsKICAgICAiZGVmYXVsdCI6IHsKICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL1Q3SHBxLUhXaTk0L2RlZmF1bHQuanBnIiwKICAgICAgIndpZHRoIjogMTIwLAogICAgICAiaGVpZ2h0IjogOTAKICAgICB9LAogICAgICJtZWRpdW0iOiB7CiAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9UN0hwcS1IV2k5NC9tcWRlZmF1bHQuanBnIiwKICAgICAgIndpZHRoIjogMzIwLAogICAgICAiaGVpZ2h0IjogMTgwCiAgICAgfSwKICAgICAiaGlnaCI6IHsKICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL1Q3SHBxLUhXaTk0L2hxZGVmYXVsdC5qcGciLAogICAgICAid2lkdGgiOiA0ODAsCiAgICAgICJoZWlnaHQiOiAzNjAKICAgICB9LAogICAgICJzdGFuZGFyZCI6IHsKICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL1Q3SHBxLUhXaTk0L3NkZGVmYXVsdC5qcGciLAogICAgICAid2lkdGgiOiA2NDAsCiAgICAgICJoZWlnaHQiOiA0ODAKICAgICB9LAogICAgICJtYXhyZXMiOiB7CiAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9UN0hwcS1IV2k5NC9tYXhyZXNkZWZhdWx0LmpwZyIsCiAgICAgICJ3aWR0aCI6IDEyODAsCiAgICAgICJoZWlnaHQiOiA3MjAKICAgICB9CiAgICB9LAogICAgImNoYW5uZWxUaXRsZSI6ICJLaW5vWW9nYSIsCiAgICAicGxheWxpc3RJZCI6ICJQTDUwOEMzMDY1NkIyNTNEQkYiLAogICAgInBvc2l0aW9uIjogNDcsCiAgICAicmVzb3VyY2VJZCI6IHsKICAgICAia2luZCI6ICJ5b3V0dWJlI3ZpZGVvIiwKICAgICAidmlkZW9JZCI6ICJUN0hwcS1IV2k5NCIKICAgIH0KICAgfQogIH0sCiAgewogICAia2luZCI6ICJ5b3V0dWJlI3BsYXlsaXN0SXRlbSIsCiAgICJldGFnIjogIlwiRG41eElkZXJiaEFuVWs1VEFXMHFrRkZpcjBNL0Q0b3RCcmYxN3RPM1c1MVFkcEZvNzhlZ1h1VVwiIiwKICAgImlkIjogIlVFdzFNRGhETXpBMk5UWkNNalV6UkVKR0xrSkNOMEpFTjBZeU1rRkZSRUpEUWpnPSIsCiAgICJzbmlwcGV0IjogewogICAgInB1Ymxpc2hlZEF0IjogIjIwMTMtMTItMDJUMjE6MTY6MTcuMDAwWiIsCiAgICAiY2hhbm5lbElkIjogIlVDSC04MXVheEN3QUFhU2d4UnR4TWt4ZyIsCiAgICAidGl0bGUiOiAiQmVnaW5uZXIgWW9nYTogTWFyaWNoYXNhbmEgQyB3aXRoIEtpbm8iLAogICAgImRlc2NyaXB0aW9uIjogIklmIHlvdeKAmXJlIGxvb2tpbmcgZm9yIHlvZ2EgdmlkZW9zIHRoYXQgd2lsbCBzaG93IHlvdSB0aGUgcGVyZmVjdCB3YXkgZm9yIHlvdSB0byBzdGFydCB5b3VyIHlvZ2Egam91cm5leSB0aGVuIEtpbm8gTWFjR3JlZ29y4oCZcyB5b2dhIGNoYW5uZWwgaXMgcGVyZmVjdCBmb3IgeW91ISBXaGV0aGVyIHlvdSBhcmUgbmV3IHRvIHlvZ2Egb3IgYW4gYWR2YW5jZWQgeW9nYSBzdHVkZW50IHlvdSB3aWxsIGZpbmQgYSBmdWxsIHlvZ2EgbGlicmFyeSB3aXRoIGFsbCB0aGUgeW9nYSBwb3N0dXJlcyB0aGF0IHlvdSBuZWVkIHRvIGRldmVsb3AgYSBjb21wbGV0ZSB5b2dhIHByYWN0aWNlLiBZb2dhIGlzIG1vcmUgdGhhbiBqdXN0IGEgcGh5c2ljYWwgcHJhY3RpY2UgeW9nYSBpcyBhIGxpZmVzdHlsZSB0aGF0IGluY2x1ZGVzIGxpdmluZyBhIHBlYWNlZnVsIGxpZmUuIExpdmluZyB0aGUgeW9nYSBsaWZlc3R5bGUgaXMgYWJvdXQgeW9nYSBwcmFjdGljZSwgaW5uZXIgcGVhY2UsIHlvZ2EgZGlldCBhbmQgYmVpbmcgYSBnb29kIHBlcnNvbiBvbiBhbmQgb2ZmIHlvdXIgeW9nYSBtYXQuIEtpbm8gaXMgYSB5b2dhIHRlYWNoZXIsIGF1dGhvciBvZiB0aHJlZSBib29rcywgaW50ZXJuYXRpb25hbCB0ZWFjaGVyLCB3cml0ZXIsIGJsb2dnZXIsIG9ubGluZSB5b2dhIGNsYXNzIHRlYWNoZXIsIElHIHlvZ2EgY2hhbGxlbmdlIGhvc3QgYW5kIG11Y2ggbW9yZS4gU2hlIGNvLWZvdW5kZWQgTWlhbWkgTGlmZSBDZW50ZXIgYW5kIE1pYW1pIFlvZ2EgTWFnYXppbmUgYXMgd2VsbCBhcyBwcm9kdWNlZCBzaXggQXNodGFuZ2EgWW9nYSBEVkRzLiBQcmFjdGljZSB5b2dhLCBjaGFuZ2UgeW91ciB3b3JsZCBvbmUgYnJlYXRoIGF0IGEgdGltZS4gS2lubyBiZWxpZXZlcyB0aGF0IHlvZ2EgaXMgYSB2ZWhpY2xlIGZvciBlYWNoIHN0dWRlbnQgdG8gZXhwZXJpZW5jZSB0aGUgbGltaXRsZXNzIHBvdGVudGlhbCBvZiB0aGUgaHVtYW4gc3Bpcml0LiBZb3UgZG9u4oCZdCBoYXZlIHRvIGJlIHN0cm9uZyBvciBmbGV4aWJsZSB0byBiZWdpbiB0aGUgeW9nYSBwcmFjdGljZSwgYWxsIHlvdSBuZWVkIGlzIGFuIG9wZW4gaGVhcnQgYW5kIHRoZSBpbnNwaXJhdGlvbiB0byBwcmFjdGljZSB5b2dhLiBVbnJvbGwgeW91ciBtYXQgYW5kIGRvIHRoZSBwcmFjdGljZSFcblxuRmFjZWJvb2sgLSBodHRwOi8vd3d3LmZhY2Vib29rLmNvbS9LaW5vWW9nYVxuSW5zdGFncmFtIC0gaHR0cDovL3d3dy5pbnN0YWdyYW0uY29tL0tpbm9Zb2dhXG5CbG9nIC0gaHR0cDovL3d3dy5raW5veW9nYS5jb20iLAogICAgInRodW1ibmFpbHMiOiB7CiAgICAgImRlZmF1bHQiOiB7CiAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9xMXEyZGJXeGtXYy9kZWZhdWx0LmpwZyIsCiAgICAgICJ3aWR0aCI6IDEyMCwKICAgICAgImhlaWdodCI6IDkwCiAgICAgfSwKICAgICAibWVkaXVtIjogewogICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvcTFxMmRiV3hrV2MvbXFkZWZhdWx0LmpwZyIsCiAgICAgICJ3aWR0aCI6IDMyMCwKICAgICAgImhlaWdodCI6IDE4MAogICAgIH0sCiAgICAgImhpZ2giOiB7CiAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9xMXEyZGJXeGtXYy9ocWRlZmF1bHQuanBnIiwKICAgICAgIndpZHRoIjogNDgwLAogICAgICAiaGVpZ2h0IjogMzYwCiAgICAgfSwKICAgICAic3RhbmRhcmQiOiB7CiAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9xMXEyZGJXeGtXYy9zZGRlZmF1bHQuanBnIiwKICAgICAgIndpZHRoIjogNjQwLAogICAgICAiaGVpZ2h0IjogNDgwCiAgICAgfSwKICAgICAibWF4cmVzIjogewogICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvcTFxMmRiV3hrV2MvbWF4cmVzZGVmYXVsdC5qcGciLAogICAgICAid2lkdGgiOiAxMjgwLAogICAgICAiaGVpZ2h0IjogNzIwCiAgICAgfQogICAgfSwKICAgICJjaGFubmVsVGl0bGUiOiAiS2lub1lvZ2EiLAogICAgInBsYXlsaXN0SWQiOiAiUEw1MDhDMzA2NTZCMjUzREJGIiwKICAgICJwb3NpdGlvbiI6IDQ4LAogICAgInJlc291cmNlSWQiOiB7CiAgICAgImtpbmQiOiAieW91dHViZSN2aWRlbyIsCiAgICAgInZpZGVvSWQiOiAicTFxMmRiV3hrV2MiCiAgICB9CiAgIH0KICB9LAogIHsKICAgImtpbmQiOiAieW91dHViZSNwbGF5bGlzdEl0ZW0iLAogICAiZXRhZyI6ICJcIkRuNXhJZGVyYmhBblVrNVRBVzBxa0ZGaXIwTS9BUFZ3RlpaeEtyUlpyRFVwTHB6ZDRHNzRlNllcIiIsCiAgICJpZCI6ICJVRXcxTURoRE16QTJOVFpDTWpVelJFSkdMakpCUWtNeU9FRTBPVGt3UmpZMFJqYz0iLAogICAic25pcHBldCI6IHsKICAgICJwdWJsaXNoZWRBdCI6ICIyMDEzLTEwLTE0VDE1OjIyOjE3LjAwMFoiLAogICAgImNoYW5uZWxJZCI6ICJVQ0gtODF1YXhDd0FBYVNneFJ0eE1reGciLAogICAgInRpdGxlIjogIkJlZ2lubmVyIFlvZ2EgLSBTdW4gU2FsdXRhdGlvbnMgd2l0aCBLaW5vIERvIFlvdSBZb2dhIFNlcmllcyBWaWRlbyBUd28iLAogICAgImRlc2NyaXB0aW9uIjogIklmIHlvdeKAmXJlIGxvb2tpbmcgZm9yIHlvZ2EgdmlkZW9zIHRoYXQgd2lsbCBzaG93IHlvdSB0aGUgcGVyZmVjdCB3YXkgZm9yIHlvdSB0byBzdGFydCB5b3VyIHlvZ2Egam91cm5leSB0aGVuIEtpbm8gTWFjR3JlZ29y4oCZcyB5b2dhIGNoYW5uZWwgaXMgcGVyZmVjdCBmb3IgeW91ISBXaGV0aGVyIHlvdSBhcmUgbmV3IHRvIHlvZ2Egb3IgYW4gYWR2YW5jZWQgeW9nYSBzdHVkZW50IHlvdSB3aWxsIGZpbmQgYSBmdWxsIHlvZ2EgbGlicmFyeSB3aXRoIGFsbCB0aGUgeW9nYSBwb3N0dXJlcyB0aGF0IHlvdSBuZWVkIHRvIGRldmVsb3AgYSBjb21wbGV0ZSB5b2dhIHByYWN0aWNlLiBZb2dhIGlzIG1vcmUgdGhhbiBqdXN0IGEgcGh5c2ljYWwgcHJhY3RpY2UgeW9nYSBpcyBhIGxpZmVzdHlsZSB0aGF0IGluY2x1ZGVzIGxpdmluZyBhIHBlYWNlZnVsIGxpZmUuIExpdmluZyB0aGUgeW9nYSBsaWZlc3R5bGUgaXMgYWJvdXQgeW9nYSBwcmFjdGljZSwgaW5uZXIgcGVhY2UsIHlvZ2EgZGlldCBhbmQgYmVpbmcgYSBnb29kIHBlcnNvbiBvbiBhbmQgb2ZmIHlvdXIgeW9nYSBtYXQuIEtpbm8gaXMgYSB5b2dhIHRlYWNoZXIsIGF1dGhvciBvZiB0aHJlZSBib29rcywgaW50ZXJuYXRpb25hbCB0ZWFjaGVyLCB3cml0ZXIsIGJsb2dnZXIsIG9ubGluZSB5b2dhIGNsYXNzIHRlYWNoZXIsIElHIHlvZ2EgY2hhbGxlbmdlIGhvc3QgYW5kIG11Y2ggbW9yZS4gU2hlIGNvLWZvdW5kZWQgTWlhbWkgTGlmZSBDZW50ZXIgYW5kIE1pYW1pIFlvZ2EgTWFnYXppbmUgYXMgd2VsbCBhcyBwcm9kdWNlZCBzaXggQXNodGFuZ2EgWW9nYSBEVkRzLiBQcmFjdGljZSB5b2dhLCBjaGFuZ2UgeW91ciB3b3JsZCBvbmUgYnJlYXRoIGF0IGEgdGltZS4gS2lubyBiZWxpZXZlcyB0aGF0IHlvZ2EgaXMgYSB2ZWhpY2xlIGZvciBlYWNoIHN0dWRlbnQgdG8gZXhwZXJpZW5jZSB0aGUgbGltaXRsZXNzIHBvdGVudGlhbCBvZiB0aGUgaHVtYW4gc3Bpcml0LiBZb3UgZG9u4oCZdCBoYXZlIHRvIGJlIHN0cm9uZyBvciBmbGV4aWJsZSB0byBiZWdpbiB0aGUgeW9nYSBwcmFjdGljZSwgYWxsIHlvdSBuZWVkIGlzIGFuIG9wZW4gaGVhcnQgYW5kIHRoZSBpbnNwaXJhdGlvbiB0byBwcmFjdGljZSB5b2dhLiBVbnJvbGwgeW91ciBtYXQgYW5kIGRvIHRoZSBwcmFjdGljZSFcblxuRmFjZWJvb2sgLSBodHRwOi8vd3d3LmZhY2Vib29rLmNvbS9LaW5vWW9nYVxuSW5zdGFncmFtIC0gaHR0cDovL3d3dy5pbnN0YWdyYW0uY29tL0tpbm9Zb2dhXG5CbG9nIC0gaHR0cDovL3d3dy5raW5veW9nYS5jb20iLAogICAgInRodW1ibmFpbHMiOiB7CiAgICAgImRlZmF1bHQiOiB7CiAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9JYTJSVzJtdU43ay9kZWZhdWx0LmpwZyIsCiAgICAgICJ3aWR0aCI6IDEyMCwKICAgICAgImhlaWdodCI6IDkwCiAgICAgfSwKICAgICAibWVkaXVtIjogewogICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvSWEyUlcybXVON2svbXFkZWZhdWx0LmpwZyIsCiAgICAgICJ3aWR0aCI6IDMyMCwKICAgICAgImhlaWdodCI6IDE4MAogICAgIH0sCiAgICAgImhpZ2giOiB7CiAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9JYTJSVzJtdU43ay9ocWRlZmF1bHQuanBnIiwKICAgICAgIndpZHRoIjogNDgwLAogICAgICAiaGVpZ2h0IjogMzYwCiAgICAgfSwKICAgICAic3RhbmRhcmQiOiB7CiAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9JYTJSVzJtdU43ay9zZGRlZmF1bHQuanBnIiwKICAgICAgIndpZHRoIjogNjQwLAogICAgICAiaGVpZ2h0IjogNDgwCiAgICAgfSwKICAgICAibWF4cmVzIjogewogICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvSWEyUlcybXVON2svbWF4cmVzZGVmYXVsdC5qcGciLAogICAgICAid2lkdGgiOiAxMjgwLAogICAgICAiaGVpZ2h0IjogNzIwCiAgICAgfQogICAgfSwKICAgICJjaGFubmVsVGl0bGUiOiAiS2lub1lvZ2EiLAogICAgInBsYXlsaXN0SWQiOiAiUEw1MDhDMzA2NTZCMjUzREJGIiwKICAgICJwb3NpdGlvbiI6IDQ5LAogICAgInJlc291cmNlSWQiOiB7CiAgICAgImtpbmQiOiAieW91dHViZSN2aWRlbyIsCiAgICAgInZpZGVvSWQiOiAiSWEyUlcybXVON2siCiAgICB9CiAgIH0KICB9CiBdCn0K
    http_version: null
  recorded_at: Tue, 12 May 2020 19:29:57 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/playlistItems?key=AIzaSyBzuvHC9RfJWA876vCBSvAPserZy7oqWM8&maxResults=10&pageToken=CDIQAA&part=snippet&playlistId=PL508C30656B253DBF
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Tue, 12 May 2020 19:29:57 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443"; ma=2592000,h3-Q050=":443";
        ma=2592000,h3-Q049=":443"; ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Tue, 12 May 2020 19:29:57 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/playlistItems?key=AIzaSyBzuvHC9RfJWA876vCBSvAPserZy7oqWM8&maxResults=10&pageToken=CDwQAA&part=snippet&playlistId=PL508C30656B253DBF
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Tue, 12 May 2020 19:29:57 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443"; ma=2592000,h3-Q050=":443";
        ma=2592000,h3-Q049=":443"; ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Tue, 12 May 2020 19:29:57 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/playlistItems?key=AIzaSyBzuvHC9RfJWA876vCBSvAPserZy7oqWM8&maxResults=10&pageToken=CEYQAA&part=snippet&playlistId=PL508C30656B253DBF
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Tue, 12 May 2020 19:29:57 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443"; ma=2592000,h3-Q050=":443";
        ma=2592000,h3-Q049=":443"; ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Tue, 12 May 2020 19:29:57 GMT
recorded_with: VCR 5.1.0
