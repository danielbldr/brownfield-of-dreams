---
http_interactions:
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/playlistItems?key=AIzaSyD3OAw77Zd5iI3iYjagAtYTyz5mYhDSsBg&maxResults=10&part=snippet&playlistId=PL508C30656B253DBF
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Mon, 11 May 2020 23:06:34 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-Q050=":443"; ma=2592000,h3-Q049=":443";
        ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443"; ma=2592000,h3-Q043=":443";
        ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Mon, 11 May 2020 23:06:34 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/playlistItems?key=AIzaSyD3OAw77Zd5iI3iYjagAtYTyz5mYhDSsBg&maxResults=10&pageToken=CAoQAA&part=snippet&playlistId=PL508C30656B253DBF
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Mon, 11 May 2020 23:06:34 GMT
      Date:
      - Mon, 11 May 2020 23:06:34 GMT
      Cache-Control:
      - private, max-age=0, must-revalidate, no-transform
      Etag:
      - '"Dn5xIderbhAnUk5TAW0qkFFir0M/dlfB-0pG7K6l1iKWmgMv0_CaU8I"'
      Vary:
      - Origin
      - X-Origin
      Content-Type:
      - application/json; charset=UTF-8
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      Content-Security-Policy:
      - frame-ancestors 'self'
      X-Xss-Protection:
      - 1; mode=block
      Server:
      - GSE
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-Q050=":443"; ma=2592000,h3-Q049=":443";
        ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443"; ma=2592000,h3-Q043=":443";
        ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        ewogImtpbmQiOiAieW91dHViZSNwbGF5bGlzdEl0ZW1MaXN0UmVzcG9uc2UiLAogImV0YWciOiAiXCJEbjV4SWRlcmJoQW5VazVUQVcwcWtGRmlyME0vZGxmQi0wcEc3SzZsMWlLV21nTXYwX0NhVThJXCIiLAogIm5leHRQYWdlVG9rZW4iOiAiQ0JRUUFBIiwKICJwcmV2UGFnZVRva2VuIjogIkNBb1FBUSIsCiAicGFnZUluZm8iOiB7CiAgInRvdGFsUmVzdWx0cyI6IDc1LAogICJyZXN1bHRzUGVyUGFnZSI6IDEwCiB9LAogIml0ZW1zIjogWwogIHsKICAgImtpbmQiOiAieW91dHViZSNwbGF5bGlzdEl0ZW0iLAogICAiZXRhZyI6ICJcIkRuNXhJZGVyYmhBblVrNVRBVzBxa0ZGaXIwTS9oSTR3R2tFdmZYUlJrUEpMMFUtTWIzUVhPdEFcIiIsCiAgICJpZCI6ICJVRXcxTURoRE16QTJOVFpDTWpVelJFSkdMalJGUkVRd1F6azJOVUZDUlVORU9FVT0iLAogICAic25pcHBldCI6IHsKICAgICJwdWJsaXNoZWRBdCI6ICIyMDE2LTA0LTE5VDExOjUzOjIzLjAwMFoiLAogICAgImNoYW5uZWxJZCI6ICJVQ0gtODF1YXhDd0FBYVNneFJ0eE1reGciLAogICAgInRpdGxlIjogIllvZ2EgZm9yIGEgS2luZCBIZWFydCBhbmQgRnJlZSBTcGlyaXQiLAogICAgImRlc2NyaXB0aW9uIjogIkpvaW4gS2lubyBpbiB0aGlzIHByYWN0aWNlIHNlc3Npb24gdG8gY3VsdGl2YXRlIGEga2luZCBoZWFydCBhbmQgZnJlZSBzcGlyaXQgdGhyb3VnaCB5b2dhLiBHcmVhdCBmb3IgQmVnaW5uZXJzIVxuXG5JZiB5b3XigJlyZSBsb29raW5nIGZvciB5b2dhIHZpZGVvcyB0aGF0IHdpbGwgc2hvdyB5b3UgdGhlIHBlcmZlY3Qgd2F5IGZvciB5b3UgdG8gc3RhcnQgeW91ciB5b2dhIGpvdXJuZXkgdGhlbiBLaW5vIE1hY0dyZWdvcuKAmXMgeW9nYSBjaGFubmVsIGlzIHBlcmZlY3QgZm9yIHlvdSEgV2hldGhlciB5b3UgYXJlIG5ldyB0byB5b2dhIG9yIGFuIGFkdmFuY2VkIHlvZ2Egc3R1ZGVudCB5b3Ugd2lsbCBmaW5kIGEgZnVsbCB5b2dhIGxpYnJhcnkgd2l0aCBhbGwgdGhlIHlvZ2EgcG9zdHVyZXMgdGhhdCB5b3UgbmVlZCB0byBkZXZlbG9wIGEgY29tcGxldGUgeW9nYSBwcmFjdGljZS4gWW9nYSBpcyBtb3JlIHRoYW4ganVzdCBhIHBoeXNpY2FsIHByYWN0aWNlIHlvZ2EgaXMgYSBsaWZlc3R5bGUgdGhhdCBpbmNsdWRlcyBsaXZpbmcgYSBwZWFjZWZ1bCBsaWZlLiBMaXZpbmcgdGhlIHlvZ2EgbGlmZXN0eWxlIGlzIGFib3V0IHlvZ2EgcHJhY3RpY2UsIGlubmVyIHBlYWNlLCB5b2dhIGRpZXQgYW5kIGJlaW5nIGEgZ29vZCBwZXJzb24gb24gYW5kIG9mZiB5b3VyIHlvZ2EgbWF0LiBLaW5vIGlzIGEgeW9nYSB0ZWFjaGVyLCBhdXRob3Igb2YgdGhyZWUgYm9va3MsIGludGVybmF0aW9uYWwgdGVhY2hlciwgd3JpdGVyLCBibG9nZ2VyLCBvbmxpbmUgeW9nYSBjbGFzcyB0ZWFjaGVyLCBJRyB5b2dhIGNoYWxsZW5nZSBob3N0IGFuZCBtdWNoIG1vcmUuIFNoZSBjby1mb3VuZGVkIE1pYW1pIExpZmUgQ2VudGVyIGFuZCBNaWFtaSBZb2dhIE1hZ2F6aW5lIGFzIHdlbGwgYXMgcHJvZHVjZWQgc2l4IEFzaHRhbmdhIFlvZ2EgRFZEcy4gUHJhY3RpY2UgeW9nYSwgY2hhbmdlIHlvdXIgd29ybGQgb25lIGJyZWF0aCBhdCBhIHRpbWUuIEtpbm8gYmVsaWV2ZXMgdGhhdCB5b2dhIGlzIGEgdmVoaWNsZSBmb3IgZWFjaCBzdHVkZW50IHRvIGV4cGVyaWVuY2UgdGhlIGxpbWl0bGVzcyBwb3RlbnRpYWwgb2YgdGhlIGh1bWFuIHNwaXJpdC4gWW91IGRvbuKAmXQgaGF2ZSB0byBiZSBzdHJvbmcgb3IgZmxleGlibGUgdG8gYmVnaW4gdGhlIHlvZ2EgcHJhY3RpY2UsIGFsbCB5b3UgbmVlZCBpcyBhbiBvcGVuIGhlYXJ0IGFuZCB0aGUgaW5zcGlyYXRpb24gdG8gcHJhY3RpY2UgeW9nYS4gVW5yb2xsIHlvdXIgbWF0IGFuZCBkbyB0aGUgcHJhY3RpY2UhXG5cbkZhY2Vib29rIC0gaHR0cDovL3d3dy5mYWNlYm9vLmNvbS9LaW5vWW9nYVxuSW5zdGFncmFtIC0gaHR0cDovL3d3dy5pbnN0YWdyYW0uY29tL0tpbm9Zb2dhXG5CbG9nIC0gaHR0cDovL3d3dy5raW5veW9nYS5jb20iLAogICAgInRodW1ibmFpbHMiOiB7CiAgICAgImRlZmF1bHQiOiB7CiAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9CR01LMFVmbWRRdy9kZWZhdWx0LmpwZyIsCiAgICAgICJ3aWR0aCI6IDEyMCwKICAgICAgImhlaWdodCI6IDkwCiAgICAgfSwKICAgICAibWVkaXVtIjogewogICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvQkdNSzBVZm1kUXcvbXFkZWZhdWx0LmpwZyIsCiAgICAgICJ3aWR0aCI6IDMyMCwKICAgICAgImhlaWdodCI6IDE4MAogICAgIH0sCiAgICAgImhpZ2giOiB7CiAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9CR01LMFVmbWRRdy9ocWRlZmF1bHQuanBnIiwKICAgICAgIndpZHRoIjogNDgwLAogICAgICAiaGVpZ2h0IjogMzYwCiAgICAgfSwKICAgICAic3RhbmRhcmQiOiB7CiAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9CR01LMFVmbWRRdy9zZGRlZmF1bHQuanBnIiwKICAgICAgIndpZHRoIjogNjQwLAogICAgICAiaGVpZ2h0IjogNDgwCiAgICAgfSwKICAgICAibWF4cmVzIjogewogICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvQkdNSzBVZm1kUXcvbWF4cmVzZGVmYXVsdC5qcGciLAogICAgICAid2lkdGgiOiAxMjgwLAogICAgICAiaGVpZ2h0IjogNzIwCiAgICAgfQogICAgfSwKICAgICJjaGFubmVsVGl0bGUiOiAiS2lub1lvZ2EiLAogICAgInBsYXlsaXN0SWQiOiAiUEw1MDhDMzA2NTZCMjUzREJGIiwKICAgICJwb3NpdGlvbiI6IDEwLAogICAgInJlc291cmNlSWQiOiB7CiAgICAgImtpbmQiOiAieW91dHViZSN2aWRlbyIsCiAgICAgInZpZGVvSWQiOiAiQkdNSzBVZm1kUXciCiAgICB9CiAgIH0KICB9LAogIHsKICAgImtpbmQiOiAieW91dHViZSNwbGF5bGlzdEl0ZW0iLAogICAiZXRhZyI6ICJcIkRuNXhJZGVyYmhBblVrNVRBVzBxa0ZGaXIwTS9DMFQ2aTBLUVhtcmVFV2hFMS1lLV9PZHpRQmdcIiIsCiAgICJpZCI6ICJVRXcxTURoRE16QTJOVFpDTWpVelJFSkdMamhEUWtWRU4wUkZRVE01UmtSQk9ERT0iLAogICAic25pcHBldCI6IHsKICAgICJwdWJsaXNoZWRBdCI6ICIyMDE2LTA0LTExVDE3OjQ3OjA2LjAwMFoiLAogICAgImNoYW5uZWxJZCI6ICJVQ0gtODF1YXhDd0FBYVNneFJ0eE1reGciLAogICAgInRpdGxlIjogIllvZ2EgZm9yIFN0cmVzcyBSZWxpZWYg4oCUIDIwIE1pbnV0ZSBZb2dhIiwKICAgICJkZXNjcmlwdGlvbiI6ICJKb2luIHRoaXMgZWFzeSB5b2dhIGZvciBzdHJlc3MgcmVsaWVmIHByYWN0aWNlIHdpdGggS2lubyBvbiBNaWFtaSBCZWFjaCB0byBvcGVuIHlvdXIgaGlwcywgc3RyZW5ndGggeW91ciBiYWNrIGFuZCBjYWxtIHlvdXIgbWluZC4gMjAgTWludXRlIFlvZ2EuXG5cbklmIHlvdeKAmXJlIGxvb2tpbmcgZm9yIHlvZ2EgdmlkZW9zIHRoYXQgd2lsbCBzaG93IHlvdSB0aGUgcGVyZmVjdCB3YXkgZm9yIHlvdSB0byBzdGFydCB5b3VyIHlvZ2Egam91cm5leSB0aGVuIEtpbm8gTWFjR3JlZ29y4oCZcyB5b2dhIGNoYW5uZWwgaXMgcGVyZmVjdCBmb3IgeW91ISBXaGV0aGVyIHlvdSBhcmUgbmV3IHRvIHlvZ2Egb3IgYW4gYWR2YW5jZWQgeW9nYSBzdHVkZW50IHlvdSB3aWxsIGZpbmQgYSBmdWxsIHlvZ2EgbGlicmFyeSB3aXRoIGFsbCB0aGUgeW9nYSBwb3N0dXJlcyB0aGF0IHlvdSBuZWVkIHRvIGRldmVsb3AgYSBjb21wbGV0ZSB5b2dhIHByYWN0aWNlLiBZb2dhIGlzIG1vcmUgdGhhbiBqdXN0IGEgcGh5c2ljYWwgcHJhY3RpY2UgeW9nYSBpcyBhIGxpZmVzdHlsZSB0aGF0IGluY2x1ZGVzIGxpdmluZyBhIHBlYWNlZnVsIGxpZmUuIExpdmluZyB0aGUgeW9nYSBsaWZlc3R5bGUgaXMgYWJvdXQgeW9nYSBwcmFjdGljZSwgaW5uZXIgcGVhY2UsIHlvZ2EgZGlldCBhbmQgYmVpbmcgYSBnb29kIHBlcnNvbiBvbiBhbmQgb2ZmIHlvdXIgeW9nYSBtYXQuIEtpbm8gaXMgYSB5b2dhIHRlYWNoZXIsIGF1dGhvciBvZiB0aHJlZSBib29rcywgaW50ZXJuYXRpb25hbCB0ZWFjaGVyLCB3cml0ZXIsIGJsb2dnZXIsIG9ubGluZSB5b2dhIGNsYXNzIHRlYWNoZXIsIElHIHlvZ2EgY2hhbGxlbmdlIGhvc3QgYW5kIG11Y2ggbW9yZS4gU2hlIGNvLWZvdW5kZWQgTWlhbWkgTGlmZSBDZW50ZXIgYW5kIE1pYW1pIFlvZ2EgTWFnYXppbmUgYXMgd2VsbCBhcyBwcm9kdWNlZCBzaXggQXNodGFuZ2EgWW9nYSBEVkRzLiBQcmFjdGljZSB5b2dhLCBjaGFuZ2UgeW91ciB3b3JsZCBvbmUgYnJlYXRoIGF0IGEgdGltZS4gS2lubyBiZWxpZXZlcyB0aGF0IHlvZ2EgaXMgYSB2ZWhpY2xlIGZvciBlYWNoIHN0dWRlbnQgdG8gZXhwZXJpZW5jZSB0aGUgbGltaXRsZXNzIHBvdGVudGlhbCBvZiB0aGUgaHVtYW4gc3Bpcml0LiBZb3UgZG9u4oCZdCBoYXZlIHRvIGJlIHN0cm9uZyBvciBmbGV4aWJsZSB0byBiZWdpbiB0aGUgeW9nYSBwcmFjdGljZSwgYWxsIHlvdSBuZWVkIGlzIGFuIG9wZW4gaGVhcnQgYW5kIHRoZSBpbnNwaXJhdGlvbiB0byBwcmFjdGljZSB5b2dhLiBVbnJvbGwgeW91ciBtYXQgYW5kIGRvIHRoZSBwcmFjdGljZSFcblxuRmFjZWJvb2sgLSBodHRwOi8vd3d3LmZhY2Vib28uY29tL0tpbm9Zb2dhXG5JbnN0YWdyYW0gLSBodHRwOi8vd3d3Lmluc3RhZ3JhbS5jb20vS2lub1lvZ2FcbkJsb2cgLSBodHRwOi8vd3d3Lmtpbm95b2dhLmNvbSIsCiAgICAidGh1bWJuYWlscyI6IHsKICAgICAiZGVmYXVsdCI6IHsKICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL0VwdXdxdG51TTdBL2RlZmF1bHQuanBnIiwKICAgICAgIndpZHRoIjogMTIwLAogICAgICAiaGVpZ2h0IjogOTAKICAgICB9LAogICAgICJtZWRpdW0iOiB7CiAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9FcHV3cXRudU03QS9tcWRlZmF1bHQuanBnIiwKICAgICAgIndpZHRoIjogMzIwLAogICAgICAiaGVpZ2h0IjogMTgwCiAgICAgfSwKICAgICAiaGlnaCI6IHsKICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL0VwdXdxdG51TTdBL2hxZGVmYXVsdC5qcGciLAogICAgICAid2lkdGgiOiA0ODAsCiAgICAgICJoZWlnaHQiOiAzNjAKICAgICB9LAogICAgICJzdGFuZGFyZCI6IHsKICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL0VwdXdxdG51TTdBL3NkZGVmYXVsdC5qcGciLAogICAgICAid2lkdGgiOiA2NDAsCiAgICAgICJoZWlnaHQiOiA0ODAKICAgICB9LAogICAgICJtYXhyZXMiOiB7CiAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9FcHV3cXRudU03QS9tYXhyZXNkZWZhdWx0LmpwZyIsCiAgICAgICJ3aWR0aCI6IDEyODAsCiAgICAgICJoZWlnaHQiOiA3MjAKICAgICB9CiAgICB9LAogICAgImNoYW5uZWxUaXRsZSI6ICJLaW5vWW9nYSIsCiAgICAicGxheWxpc3RJZCI6ICJQTDUwOEMzMDY1NkIyNTNEQkYiLAogICAgInBvc2l0aW9uIjogMTEsCiAgICAicmVzb3VyY2VJZCI6IHsKICAgICAia2luZCI6ICJ5b3V0dWJlI3ZpZGVvIiwKICAgICAidmlkZW9JZCI6ICJFcHV3cXRudU03QSIKICAgIH0KICAgfQogIH0sCiAgewogICAia2luZCI6ICJ5b3V0dWJlI3BsYXlsaXN0SXRlbSIsCiAgICJldGFnIjogIlwiRG41eElkZXJiaEFuVWs1VEFXMHFrRkZpcjBNL09WNkUyaVdybHZ5ZjhhcnNTX2tJTkNJTld3WVwiIiwKICAgImlkIjogIlVFdzFNRGhETXpBMk5UWkNNalV6UkVKR0xrTkNNVGsyUWtNNU1qSXlNRFkyUWpFPSIsCiAgICJzbmlwcGV0IjogewogICAgInB1Ymxpc2hlZEF0IjogIjIwMTYtMDMtMTVUMTM6MjA6MzAuMDAwWiIsCiAgICAiY2hhbm5lbElkIjogIlVDSC04MXVheEN3QUFhU2d4UnR4TWt4ZyIsCiAgICAidGl0bGUiOiAiRmluZCB0aGUgSW5uZXIgQm9keSwgRWFzeSBZb2dhIHdpdGggS2lubyIsCiAgICAiZGVzY3JpcHRpb24iOiAiVGhpcyBwcmFjdGljZSB3aWxsIGhlbHAgeW91IEZpbmQgdGhlIElubmVyIEJvZHksIEVhc3kgWW9nYSwgaW5jbHVkaW5nIHBvc2VzIGxpa2UgTWFyaWNoYXNhbmEgQSBhbmQgb3RoZXIgaGlwIG9wZW5lcnMuIFByYWN0aWNlIHdpdGggbWUgb24gaHR0cDovL3d3dy5vbXN0YXJzLmNvbVxuXG5JZiB5b3XigJlyZSBsb29raW5nIGZvciB5b2dhIHZpZGVvcyB0aGF0IHdpbGwgc2hvdyB5b3UgdGhlIHBlcmZlY3Qgd2F5IGZvciB5b3UgdG8gc3RhcnQgeW91ciB5b2dhIGpvdXJuZXkgdGhlbiBLaW5vIE1hY0dyZWdvcuKAmXMgeW9nYSBjaGFubmVsIGlzIHBlcmZlY3QgZm9yIHlvdSEgV2hldGhlciB5b3UgYXJlIG5ldyB0byB5b2dhIG9yIGFuIGFkdmFuY2VkIHlvZ2Egc3R1ZGVudCB5b3Ugd2lsbCBmaW5kIGEgZnVsbCB5b2dhIGxpYnJhcnkgd2l0aCBhbGwgdGhlIHlvZ2EgcG9zdHVyZXMgdGhhdCB5b3UgbmVlZCB0byBkZXZlbG9wIGEgY29tcGxldGUgeW9nYSBwcmFjdGljZS4gWW9nYSBpcyBtb3JlIHRoYW4ganVzdCBhIHBoeXNpY2FsIHByYWN0aWNlIHlvZ2EgaXMgYSBsaWZlc3R5bGUgdGhhdCBpbmNsdWRlcyBsaXZpbmcgYSBwZWFjZWZ1bCBsaWZlLiBMaXZpbmcgdGhlIHlvZ2EgbGlmZXN0eWxlIGlzIGFib3V0IHlvZ2EgcHJhY3RpY2UsIGlubmVyIHBlYWNlLCB5b2dhIGRpZXQgYW5kIGJlaW5nIGEgZ29vZCBwZXJzb24gb24gYW5kIG9mZiB5b3VyIHlvZ2EgbWF0LiBLaW5vIGlzIGEgeW9nYSB0ZWFjaGVyLCBhdXRob3Igb2YgdGhyZWUgYm9va3MsIGludGVybmF0aW9uYWwgdGVhY2hlciwgd3JpdGVyLCBibG9nZ2VyLCBvbmxpbmUgeW9nYSBjbGFzcyB0ZWFjaGVyLCBJRyB5b2dhIGNoYWxsZW5nZSBob3N0IGFuZCBtdWNoIG1vcmUuIFNoZSBjby1mb3VuZGVkIE1pYW1pIExpZmUgQ2VudGVyIGFuZCBNaWFtaSBZb2dhIE1hZ2F6aW5lIGFzIHdlbGwgYXMgcHJvZHVjZWQgc2l4IEFzaHRhbmdhIFlvZ2EgRFZEcy4gUHJhY3RpY2UgeW9nYSwgY2hhbmdlIHlvdXIgd29ybGQgb25lIGJyZWF0aCBhdCBhIHRpbWUuIEtpbm8gYmVsaWV2ZXMgdGhhdCB5b2dhIGlzIGEgdmVoaWNsZSBmb3IgZWFjaCBzdHVkZW50IHRvIGV4cGVyaWVuY2UgdGhlIGxpbWl0bGVzcyBwb3RlbnRpYWwgb2YgdGhlIGh1bWFuIHNwaXJpdC4gWW91IGRvbuKAmXQgaGF2ZSB0byBiZSBzdHJvbmcgb3IgZmxleGlibGUgdG8gYmVnaW4gdGhlIHlvZ2EgcHJhY3RpY2UsIGFsbCB5b3UgbmVlZCBpcyBhbiBvcGVuIGhlYXJ0IGFuZCB0aGUgaW5zcGlyYXRpb24gdG8gcHJhY3RpY2UgeW9nYS4gVW5yb2xsIHlvdXIgbWF0IGFuZCBkbyB0aGUgcHJhY3RpY2UhXG5cbkZhY2Vib29rIC0gaHR0cDovL3d3dy5mYWNlYm9vLmNvbS9LaW5vWW9nYVxuSW5zdGFncmFtIC0gaHR0cDovL3d3dy5pbnN0YWdyYW0uY29tL0tpbm9Zb2dhXG5CbG9nIC0gaHR0cDovL3d3dy5raW5veW9nYS5jb20iLAogICAgInRodW1ibmFpbHMiOiB7CiAgICAgImRlZmF1bHQiOiB7CiAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9QVTF4MU1jR2UxOC9kZWZhdWx0LmpwZyIsCiAgICAgICJ3aWR0aCI6IDEyMCwKICAgICAgImhlaWdodCI6IDkwCiAgICAgfSwKICAgICAibWVkaXVtIjogewogICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvUFUxeDFNY0dlMTgvbXFkZWZhdWx0LmpwZyIsCiAgICAgICJ3aWR0aCI6IDMyMCwKICAgICAgImhlaWdodCI6IDE4MAogICAgIH0sCiAgICAgImhpZ2giOiB7CiAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9QVTF4MU1jR2UxOC9ocWRlZmF1bHQuanBnIiwKICAgICAgIndpZHRoIjogNDgwLAogICAgICAiaGVpZ2h0IjogMzYwCiAgICAgfSwKICAgICAic3RhbmRhcmQiOiB7CiAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9QVTF4MU1jR2UxOC9zZGRlZmF1bHQuanBnIiwKICAgICAgIndpZHRoIjogNjQwLAogICAgICAiaGVpZ2h0IjogNDgwCiAgICAgfSwKICAgICAibWF4cmVzIjogewogICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvUFUxeDFNY0dlMTgvbWF4cmVzZGVmYXVsdC5qcGciLAogICAgICAid2lkdGgiOiAxMjgwLAogICAgICAiaGVpZ2h0IjogNzIwCiAgICAgfQogICAgfSwKICAgICJjaGFubmVsVGl0bGUiOiAiS2lub1lvZ2EiLAogICAgInBsYXlsaXN0SWQiOiAiUEw1MDhDMzA2NTZCMjUzREJGIiwKICAgICJwb3NpdGlvbiI6IDEyLAogICAgInJlc291cmNlSWQiOiB7CiAgICAgImtpbmQiOiAieW91dHViZSN2aWRlbyIsCiAgICAgInZpZGVvSWQiOiAiUFUxeDFNY0dlMTgiCiAgICB9CiAgIH0KICB9LAogIHsKICAgImtpbmQiOiAieW91dHViZSNwbGF5bGlzdEl0ZW0iLAogICAiZXRhZyI6ICJcIkRuNXhJZGVyYmhBblVrNVRBVzBxa0ZGaXIwTS91Qm9xRUtBaU1ZdlpvSDN4dWk2Y0gyMy1ueUlcIiIsCiAgICJpZCI6ICJVRXcxTURoRE16QTJOVFpDTWpVelJFSkdMalZCTjBFNE9EazBNemswTVRVMU9VRT0iLAogICAic25pcHBldCI6IHsKICAgICJwdWJsaXNoZWRBdCI6ICIyMDE2LTAxLTIxVDEyOjIwOjQxLjAwMFoiLAogICAgImNoYW5uZWxJZCI6ICJVQ0gtODF1YXhDd0FBYVNneFJ0eE1reGciLAogICAgInRpdGxlIjogIkVhc3kgWW9nYSBIaXAgT3BlbmluZyBQcmFjdGljZSB3aXRoIEtpbm8gaW4gTXlzb3JlLCAgSW5kaWEiLAogICAgImRlc2NyaXB0aW9uIjogIlRoaXMgaXMgYW4gRWFzeSBZb2dhIEhpcCBPcGVuaW5nIFByYWN0aWNlIHdpdGggS2lubyBpbiBNeXNvcmUsICBJbmRpYS4gUHJhY3RpY2Ugd2l0aCBtZSBvbiBodHRwOi8vd3d3Lm9tc3RhcnMuY29tXG5cbklmIHlvdeKAmXJlIGxvb2tpbmcgZm9yIHlvZ2EgdmlkZW9zIHRoYXQgd2lsbCBzaG93IHlvdSB0aGUgcGVyZmVjdCB3YXkgZm9yIHlvdSB0byBzdGFydCB5b3VyIHlvZ2Egam91cm5leSB0aGVuIEtpbm8gTWFjR3JlZ29y4oCZcyB5b2dhIGNoYW5uZWwgaXMgcGVyZmVjdCBmb3IgeW91ISBXaGV0aGVyIHlvdSBhcmUgbmV3IHRvIHlvZ2Egb3IgYW4gYWR2YW5jZWQgeW9nYSBzdHVkZW50IHlvdSB3aWxsIGZpbmQgYSBmdWxsIHlvZ2EgbGlicmFyeSB3aXRoIGFsbCB0aGUgeW9nYSBwb3N0dXJlcyB0aGF0IHlvdSBuZWVkIHRvIGRldmVsb3AgYSBjb21wbGV0ZSB5b2dhIHByYWN0aWNlLiBZb2dhIGlzIG1vcmUgdGhhbiBqdXN0IGEgcGh5c2ljYWwgcHJhY3RpY2UgeW9nYSBpcyBhIGxpZmVzdHlsZSB0aGF0IGluY2x1ZGVzIGxpdmluZyBhIHBlYWNlZnVsIGxpZmUuIExpdmluZyB0aGUgeW9nYSBsaWZlc3R5bGUgaXMgYWJvdXQgeW9nYSBwcmFjdGljZSwgaW5uZXIgcGVhY2UsIHlvZ2EgZGlldCBhbmQgYmVpbmcgYSBnb29kIHBlcnNvbiBvbiBhbmQgb2ZmIHlvdXIgeW9nYSBtYXQuIEtpbm8gaXMgYSB5b2dhIHRlYWNoZXIsIGF1dGhvciBvZiB0aHJlZSBib29rcywgaW50ZXJuYXRpb25hbCB0ZWFjaGVyLCB3cml0ZXIsIGJsb2dnZXIsIG9ubGluZSB5b2dhIGNsYXNzIHRlYWNoZXIsIElHIHlvZ2EgY2hhbGxlbmdlIGhvc3QgYW5kIG11Y2ggbW9yZS4gU2hlIGNvLWZvdW5kZWQgTWlhbWkgTGlmZSBDZW50ZXIgYW5kIE1pYW1pIFlvZ2EgTWFnYXppbmUgYXMgd2VsbCBhcyBwcm9kdWNlZCBzaXggQXNodGFuZ2EgWW9nYSBEVkRzLiBQcmFjdGljZSB5b2dhLCBjaGFuZ2UgeW91ciB3b3JsZCBvbmUgYnJlYXRoIGF0IGEgdGltZS4gS2lubyBiZWxpZXZlcyB0aGF0IHlvZ2EgaXMgYSB2ZWhpY2xlIGZvciBlYWNoIHN0dWRlbnQgdG8gZXhwZXJpZW5jZSB0aGUgbGltaXRsZXNzIHBvdGVudGlhbCBvZiB0aGUgaHVtYW4gc3Bpcml0LiBZb3UgZG9u4oCZdCBoYXZlIHRvIGJlIHN0cm9uZyBvciBmbGV4aWJsZSB0byBiZWdpbiB0aGUgeW9nYSBwcmFjdGljZSwgYWxsIHlvdSBuZWVkIGlzIGFuIG9wZW4gaGVhcnQgYW5kIHRoZSBpbnNwaXJhdGlvbiB0byBwcmFjdGljZSB5b2dhLiBVbnJvbGwgeW91ciBtYXQgYW5kIGRvIHRoZSBwcmFjdGljZSFcblxuRmFjZWJvb2sgLSBodHRwOi8vd3d3LmZhY2Vib28uY29tL0tpbm9Zb2dhXG5JbnN0YWdyYW0gLSBodHRwOi8vd3d3Lmluc3RhZ3JhbS5jb20vS2lub1lvZ2FcbkJsb2cgLSBodHRwOi8vd3d3Lmtpbm95b2dhLmNvbSIsCiAgICAidGh1bWJuYWlscyI6IHsKICAgICAiZGVmYXVsdCI6IHsKICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL09GbDRhRjlOWTM0L2RlZmF1bHQuanBnIiwKICAgICAgIndpZHRoIjogMTIwLAogICAgICAiaGVpZ2h0IjogOTAKICAgICB9LAogICAgICJtZWRpdW0iOiB7CiAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9PRmw0YUY5TlkzNC9tcWRlZmF1bHQuanBnIiwKICAgICAgIndpZHRoIjogMzIwLAogICAgICAiaGVpZ2h0IjogMTgwCiAgICAgfSwKICAgICAiaGlnaCI6IHsKICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL09GbDRhRjlOWTM0L2hxZGVmYXVsdC5qcGciLAogICAgICAid2lkdGgiOiA0ODAsCiAgICAgICJoZWlnaHQiOiAzNjAKICAgICB9LAogICAgICJzdGFuZGFyZCI6IHsKICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL09GbDRhRjlOWTM0L3NkZGVmYXVsdC5qcGciLAogICAgICAid2lkdGgiOiA2NDAsCiAgICAgICJoZWlnaHQiOiA0ODAKICAgICB9LAogICAgICJtYXhyZXMiOiB7CiAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9PRmw0YUY5TlkzNC9tYXhyZXNkZWZhdWx0LmpwZyIsCiAgICAgICJ3aWR0aCI6IDEyODAsCiAgICAgICJoZWlnaHQiOiA3MjAKICAgICB9CiAgICB9LAogICAgImNoYW5uZWxUaXRsZSI6ICJLaW5vWW9nYSIsCiAgICAicGxheWxpc3RJZCI6ICJQTDUwOEMzMDY1NkIyNTNEQkYiLAogICAgInBvc2l0aW9uIjogMTMsCiAgICAicmVzb3VyY2VJZCI6IHsKICAgICAia2luZCI6ICJ5b3V0dWJlI3ZpZGVvIiwKICAgICAidmlkZW9JZCI6ICJPRmw0YUY5TlkzNCIKICAgIH0KICAgfQogIH0sCiAgewogICAia2luZCI6ICJ5b3V0dWJlI3BsYXlsaXN0SXRlbSIsCiAgICJldGFnIjogIlwiRG41eElkZXJiaEFuVWs1VEFXMHFrRkZpcjBNL1BJYUo5b2tEQUNyVXBIc1lYckpKb0JyRmxiWVwiIiwKICAgImlkIjogIlVFdzFNRGhETXpBMk5UWkNNalV6UkVKR0xqRkZNVUUyTVRsRU1qSTBOa1l5TkRrPSIsCiAgICJzbmlwcGV0IjogewogICAgInB1Ymxpc2hlZEF0IjogIjIwMTYtMDEtMjFUMTI6MTQ6NTkuMDAwWiIsCiAgICAiY2hhbm5lbElkIjogIlVDSC04MXVheEN3QUFhU2d4UnR4TWt4ZyIsCiAgICAidGl0bGUiOiAiQmVnaW5uZXIgWW9nYSBQcmFjdGljZSB3aXRoIEtpbm8gaW4gTXlzb3JlLCBJbmRpYSIsCiAgICAiZGVzY3JpcHRpb24iOiAiVGhpcyBpcyBhIGdyZWF0IEJlZ2lubmVyIFlvZ2EgUHJhY3RpY2Ugd2l0aCBLaW5vIGZpbG1lZCBpbiBNeXNvcmUsIEluZGlhLiBcblxuSWYgeW914oCZcmUgbG9va2luZyBmb3IgeW9nYSB2aWRlb3MgdGhhdCB3aWxsIHNob3cgeW91IHRoZSBwZXJmZWN0IHdheSBmb3IgeW91IHRvIHN0YXJ0IHlvdXIgeW9nYSBqb3VybmV5IHRoZW4gS2lubyBNYWNHcmVnb3LigJlzIHlvZ2EgY2hhbm5lbCBpcyBwZXJmZWN0IGZvciB5b3UhIFdoZXRoZXIgeW91IGFyZSBuZXcgdG8geW9nYSBvciBhbiBhZHZhbmNlZCB5b2dhIHN0dWRlbnQgeW91IHdpbGwgZmluZCBhIGZ1bGwgeW9nYSBsaWJyYXJ5IHdpdGggYWxsIHRoZSB5b2dhIHBvc3R1cmVzIHRoYXQgeW91IG5lZWQgdG8gZGV2ZWxvcCBhIGNvbXBsZXRlIHlvZ2EgcHJhY3RpY2UuIFlvZ2EgaXMgbW9yZSB0aGFuIGp1c3QgYSBwaHlzaWNhbCBwcmFjdGljZSB5b2dhIGlzIGEgbGlmZXN0eWxlIHRoYXQgaW5jbHVkZXMgbGl2aW5nIGEgcGVhY2VmdWwgbGlmZS4gTGl2aW5nIHRoZSB5b2dhIGxpZmVzdHlsZSBpcyBhYm91dCB5b2dhIHByYWN0aWNlLCBpbm5lciBwZWFjZSwgeW9nYSBkaWV0IGFuZCBiZWluZyBhIGdvb2QgcGVyc29uIG9uIGFuZCBvZmYgeW91ciB5b2dhIG1hdC4gS2lubyBpcyBhIHlvZ2EgdGVhY2hlciwgYXV0aG9yIG9mIHRocmVlIGJvb2tzLCBpbnRlcm5hdGlvbmFsIHRlYWNoZXIsIHdyaXRlciwgYmxvZ2dlciwgb25saW5lIHlvZ2EgY2xhc3MgdGVhY2hlciwgSUcgeW9nYSBjaGFsbGVuZ2UgaG9zdCBhbmQgbXVjaCBtb3JlLiBTaGUgY28tZm91bmRlZCBNaWFtaSBMaWZlIENlbnRlciBhbmQgTWlhbWkgWW9nYSBNYWdhemluZSBhcyB3ZWxsIGFzIHByb2R1Y2VkIHNpeCBBc2h0YW5nYSBZb2dhIERWRHMuIFByYWN0aWNlIHlvZ2EsIGNoYW5nZSB5b3VyIHdvcmxkIG9uZSBicmVhdGggYXQgYSB0aW1lLiBLaW5vIGJlbGlldmVzIHRoYXQgeW9nYSBpcyBhIHZlaGljbGUgZm9yIGVhY2ggc3R1ZGVudCB0byBleHBlcmllbmNlIHRoZSBsaW1pdGxlc3MgcG90ZW50aWFsIG9mIHRoZSBodW1hbiBzcGlyaXQuIFlvdSBkb27igJl0IGhhdmUgdG8gYmUgc3Ryb25nIG9yIGZsZXhpYmxlIHRvIGJlZ2luIHRoZSB5b2dhIHByYWN0aWNlLCBhbGwgeW91IG5lZWQgaXMgYW4gb3BlbiBoZWFydCBhbmQgdGhlIGluc3BpcmF0aW9uIHRvIHByYWN0aWNlIHlvZ2EuIFVucm9sbCB5b3VyIG1hdCBhbmQgZG8gdGhlIHByYWN0aWNlIVxuXG5GYWNlYm9vayAtIGh0dHA6Ly93d3cuZmFjZWJvby5jb20vS2lub1lvZ2Fcbkluc3RhZ3JhbSAtIGh0dHA6Ly93d3cuaW5zdGFncmFtLmNvbS9LaW5vWW9nYVxuQmxvZyAtIGh0dHA6Ly93d3cua2lub3lvZ2EuY29tIiwKICAgICJ0aHVtYm5haWxzIjogewogICAgICJkZWZhdWx0IjogewogICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvMXRFWDR5NDBiSzQvZGVmYXVsdC5qcGciLAogICAgICAid2lkdGgiOiAxMjAsCiAgICAgICJoZWlnaHQiOiA5MAogICAgIH0sCiAgICAgIm1lZGl1bSI6IHsKICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpLzF0RVg0eTQwYks0L21xZGVmYXVsdC5qcGciLAogICAgICAid2lkdGgiOiAzMjAsCiAgICAgICJoZWlnaHQiOiAxODAKICAgICB9LAogICAgICJoaWdoIjogewogICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvMXRFWDR5NDBiSzQvaHFkZWZhdWx0LmpwZyIsCiAgICAgICJ3aWR0aCI6IDQ4MCwKICAgICAgImhlaWdodCI6IDM2MAogICAgIH0sCiAgICAgInN0YW5kYXJkIjogewogICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvMXRFWDR5NDBiSzQvc2RkZWZhdWx0LmpwZyIsCiAgICAgICJ3aWR0aCI6IDY0MCwKICAgICAgImhlaWdodCI6IDQ4MAogICAgIH0sCiAgICAgIm1heHJlcyI6IHsKICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpLzF0RVg0eTQwYks0L21heHJlc2RlZmF1bHQuanBnIiwKICAgICAgIndpZHRoIjogMTI4MCwKICAgICAgImhlaWdodCI6IDcyMAogICAgIH0KICAgIH0sCiAgICAiY2hhbm5lbFRpdGxlIjogIktpbm9Zb2dhIiwKICAgICJwbGF5bGlzdElkIjogIlBMNTA4QzMwNjU2QjI1M0RCRiIsCiAgICAicG9zaXRpb24iOiAxNCwKICAgICJyZXNvdXJjZUlkIjogewogICAgICJraW5kIjogInlvdXR1YmUjdmlkZW8iLAogICAgICJ2aWRlb0lkIjogIjF0RVg0eTQwYks0IgogICAgfQogICB9CiAgfSwKICB7CiAgICJraW5kIjogInlvdXR1YmUjcGxheWxpc3RJdGVtIiwKICAgImV0YWciOiAiXCJEbjV4SWRlcmJoQW5VazVUQVcwcWtGRmlyME0vbFl2OE9HY1hzTjgtUEpxQ3NZLW9LQ2lvMFFFXCIiLAogICAiaWQiOiAiVUV3MU1EaERNekEyTlRaQ01qVXpSRUpHTGpOQ00wWXdNelZDUkRrMU16a3dPRFk9IiwKICAgInNuaXBwZXQiOiB7CiAgICAicHVibGlzaGVkQXQiOiAiMjAxNS0xMC0yN1QwNDowMzoxOC4wMDBaIiwKICAgICJjaGFubmVsSWQiOiAiVUNILTgxdWF4Q3dBQWFTZ3hSdHhNa3hnIiwKICAgICJ0aXRsZSI6ICJPbmUgSG91ciBCZWFjaCBZb2dhIENsYXNzIHdpdGggS2lubyIsCiAgICAiZGVzY3JpcHRpb24iOiAiSm9pbiB0aGlzIGZ1biBmdWxsIGxlbmd0aCBvbmUgaG91ciBiZWFjaCB3aXRoIEtpbm8uIFByYWN0aWNlIHdpdGggbWUgb24gaHR0cDovL3d3dy5vbXN0YXJzLmNvbVxuXG5PcmlnaW5hbGx5IGZpbG1lZCBmb3IgUGVyaXNjb3BlIGluIGEgY29sbGFib3JhdGlvbiB3aXRoIEJyZWUgT2xzZW4gd2hlcmUgb3ZlciAzMCwwMDAgcGVvcGxlIGpvaW5lZCBmb3IgdGhlIGxpdmUgYnJvYWRjYXN0IVxuXG5JZiB5b3XigJlyZSBsb29raW5nIGZvciB5b2dhIHZpZGVvcyB0aGF0IHdpbGwgc2hvdyB5b3UgdGhlIHBlcmZlY3Qgd2F5IGZvciB5b3UgdG8gc3RhcnQgeW91ciB5b2dhIGpvdXJuZXkgdGhlbiBLaW5vIE1hY0dyZWdvcuKAmXMgeW9nYSBjaGFubmVsIGlzIHBlcmZlY3QgZm9yIHlvdSEgV2hldGhlciB5b3UgYXJlIG5ldyB0byB5b2dhIG9yIGFuIGFkdmFuY2VkIHlvZ2Egc3R1ZGVudCB5b3Ugd2lsbCBmaW5kIGEgZnVsbCB5b2dhIGxpYnJhcnkgd2l0aCBhbGwgdGhlIHlvZ2EgcG9zdHVyZXMgdGhhdCB5b3UgbmVlZCB0byBkZXZlbG9wIGEgY29tcGxldGUgeW9nYSBwcmFjdGljZS4gWW9nYSBpcyBtb3JlIHRoYW4ganVzdCBhIHBoeXNpY2FsIHByYWN0aWNlIHlvZ2EgaXMgYSBsaWZlc3R5bGUgdGhhdCBpbmNsdWRlcyBsaXZpbmcgYSBwZWFjZWZ1bCBsaWZlLiBMaXZpbmcgdGhlIHlvZ2EgbGlmZXN0eWxlIGlzIGFib3V0IHlvZ2EgcHJhY3RpY2UsIGlubmVyIHBlYWNlLCB5b2dhIGRpZXQgYW5kIGJlaW5nIGEgZ29vZCBwZXJzb24gb24gYW5kIG9mZiB5b3VyIHlvZ2EgbWF0LiBLaW5vIGlzIGEgeW9nYSB0ZWFjaGVyLCBhdXRob3Igb2YgdGhyZWUgYm9va3MsIGludGVybmF0aW9uYWwgdGVhY2hlciwgd3JpdGVyLCBibG9nZ2VyLCBvbmxpbmUgeW9nYSBjbGFzcyB0ZWFjaGVyLCBJRyB5b2dhIGNoYWxsZW5nZSBob3N0IGFuZCBtdWNoIG1vcmUuIFNoZSBjby1mb3VuZGVkIE1pYW1pIExpZmUgQ2VudGVyIGFuZCBNaWFtaSBZb2dhIE1hZ2F6aW5lIGFzIHdlbGwgYXMgcHJvZHVjZWQgc2l4IEFzaHRhbmdhIFlvZ2EgRFZEcy4gUHJhY3RpY2UgeW9nYSwgY2hhbmdlIHlvdXIgd29ybGQgb25lIGJyZWF0aCBhdCBhIHRpbWUuIEtpbm8gYmVsaWV2ZXMgdGhhdCB5b2dhIGlzIGEgdmVoaWNsZSBmb3IgZWFjaCBzdHVkZW50IHRvIGV4cGVyaWVuY2UgdGhlIGxpbWl0bGVzcyBwb3RlbnRpYWwgb2YgdGhlIGh1bWFuIHNwaXJpdC4gWW91IGRvbuKAmXQgaGF2ZSB0byBiZSBzdHJvbmcgb3IgZmxleGlibGUgdG8gYmVnaW4gdGhlIHlvZ2EgcHJhY3RpY2UsIGFsbCB5b3UgbmVlZCBpcyBhbiBvcGVuIGhlYXJ0IGFuZCB0aGUgaW5zcGlyYXRpb24gdG8gcHJhY3RpY2UgeW9nYS4gVW5yb2xsIHlvdXIgbWF0IGFuZCBkbyB0aGUgcHJhY3RpY2UhXG5cbkZhY2Vib29rIC0gaHR0cDovL3d3dy5mYWNlYm9vLmNvbS9LaW5vWW9nYVxuSW5zdGFncmFtIC0gaHR0cDovL3d3dy5pbnN0YWdyYW0uY29tL0tpbm9Zb2dhXG5CbG9nIC0gaHR0cDovL3d3dy5raW5veW9nYS5jb20iLAogICAgInRodW1ibmFpbHMiOiB7CiAgICAgImRlZmF1bHQiOiB7CiAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9sREM3ZmNQZW1Iby9kZWZhdWx0LmpwZyIsCiAgICAgICJ3aWR0aCI6IDEyMCwKICAgICAgImhlaWdodCI6IDkwCiAgICAgfSwKICAgICAibWVkaXVtIjogewogICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvbERDN2ZjUGVtSG8vbXFkZWZhdWx0LmpwZyIsCiAgICAgICJ3aWR0aCI6IDMyMCwKICAgICAgImhlaWdodCI6IDE4MAogICAgIH0sCiAgICAgImhpZ2giOiB7CiAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9sREM3ZmNQZW1Iby9ocWRlZmF1bHQuanBnIiwKICAgICAgIndpZHRoIjogNDgwLAogICAgICAiaGVpZ2h0IjogMzYwCiAgICAgfSwKICAgICAic3RhbmRhcmQiOiB7CiAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9sREM3ZmNQZW1Iby9zZGRlZmF1bHQuanBnIiwKICAgICAgIndpZHRoIjogNjQwLAogICAgICAiaGVpZ2h0IjogNDgwCiAgICAgfSwKICAgICAibWF4cmVzIjogewogICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvbERDN2ZjUGVtSG8vbWF4cmVzZGVmYXVsdC5qcGciLAogICAgICAid2lkdGgiOiAxMjgwLAogICAgICAiaGVpZ2h0IjogNzIwCiAgICAgfQogICAgfSwKICAgICJjaGFubmVsVGl0bGUiOiAiS2lub1lvZ2EiLAogICAgInBsYXlsaXN0SWQiOiAiUEw1MDhDMzA2NTZCMjUzREJGIiwKICAgICJwb3NpdGlvbiI6IDE1LAogICAgInJlc291cmNlSWQiOiB7CiAgICAgImtpbmQiOiAieW91dHViZSN2aWRlbyIsCiAgICAgInZpZGVvSWQiOiAibERDN2ZjUGVtSG8iCiAgICB9CiAgIH0KICB9LAogIHsKICAgImtpbmQiOiAieW91dHViZSNwbGF5bGlzdEl0ZW0iLAogICAiZXRhZyI6ICJcIkRuNXhJZGVyYmhBblVrNVRBVzBxa0ZGaXIwTS81a3lxLU1fYXBOSlllMGJIamV6VXpjUGYtZTBcIiIsCiAgICJpZCI6ICJVRXcxTURoRE16QTJOVFpDTWpVelJFSkdMa0pCUVVJeU9EQTNPRGd3UVRVelF6az0iLAogICAic25pcHBldCI6IHsKICAgICJwdWJsaXNoZWRBdCI6ICIyMDE1LTEwLTE5VDIwOjU1OjE4LjAwMFoiLAogICAgImNoYW5uZWxJZCI6ICJVQ0gtODF1YXhDd0FBYVNneFJ0eE1reGciLAogICAgInRpdGxlIjogIkdlbnRsZSBZb2dhIGFuZCBNZWRpdGF0aW9uLCBCZWdpbm5lciBIb21lIFByYWN0aWNlIHdpdGggS2lubyIsCiAgICAiZGVzY3JpcHRpb24iOiAiVGhpcyBpcyBhIG5pY2UgYW5kIGVhc3kgZ2VudGxlIHlvZ2EgYW5kIG1lZGl0YXRpb24gcHJhY3RpY2UuIFBlcmZlY3QgZm9yIGEgaG9tZSBwcmFjdGljZSBpbiBiZWdpbm5lciB5b2dhLiBQcmFjdGljZSB3aXRoIG1lIG9uIGh0dHA6Ly93d3cub21zdGFycy5jb21cblxuSWYgeW914oCZcmUgbG9va2luZyBmb3IgeW9nYSB2aWRlb3MgdGhhdCB3aWxsIHNob3cgeW91IHRoZSBwZXJmZWN0IHdheSBmb3IgeW91IHRvIHN0YXJ0IHlvdXIgeW9nYSBqb3VybmV5IHRoZW4gS2lubyBNYWNHcmVnb3LigJlzIHlvZ2EgY2hhbm5lbCBpcyBwZXJmZWN0IGZvciB5b3UhIFdoZXRoZXIgeW91IGFyZSBuZXcgdG8geW9nYSBvciBhbiBhZHZhbmNlZCB5b2dhIHN0dWRlbnQgeW91IHdpbGwgZmluZCBhIGZ1bGwgeW9nYSBsaWJyYXJ5IHdpdGggYWxsIHRoZSB5b2dhIHBvc3R1cmVzIHRoYXQgeW91IG5lZWQgdG8gZGV2ZWxvcCBhIGNvbXBsZXRlIHlvZ2EgcHJhY3RpY2UuIFlvZ2EgaXMgbW9yZSB0aGFuIGp1c3QgYSBwaHlzaWNhbCBwcmFjdGljZSB5b2dhIGlzIGEgbGlmZXN0eWxlIHRoYXQgaW5jbHVkZXMgbGl2aW5nIGEgcGVhY2VmdWwgbGlmZS4gTGl2aW5nIHRoZSB5b2dhIGxpZmVzdHlsZSBpcyBhYm91dCB5b2dhIHByYWN0aWNlLCBpbm5lciBwZWFjZSwgeW9nYSBkaWV0IGFuZCBiZWluZyBhIGdvb2QgcGVyc29uIG9uIGFuZCBvZmYgeW91ciB5b2dhIG1hdC4gS2lubyBpcyBhIHlvZ2EgdGVhY2hlciwgYXV0aG9yIG9mIHRocmVlIGJvb2tzLCBpbnRlcm5hdGlvbmFsIHRlYWNoZXIsIHdyaXRlciwgYmxvZ2dlciwgb25saW5lIHlvZ2EgY2xhc3MgdGVhY2hlciwgSUcgeW9nYSBjaGFsbGVuZ2UgaG9zdCBhbmQgbXVjaCBtb3JlLiBTaGUgY28tZm91bmRlZCBNaWFtaSBMaWZlIENlbnRlciBhbmQgTWlhbWkgWW9nYSBNYWdhemluZSBhcyB3ZWxsIGFzIHByb2R1Y2VkIHNpeCBBc2h0YW5nYSBZb2dhIERWRHMuIFByYWN0aWNlIHlvZ2EsIGNoYW5nZSB5b3VyIHdvcmxkIG9uZSBicmVhdGggYXQgYSB0aW1lLiBLaW5vIGJlbGlldmVzIHRoYXQgeW9nYSBpcyBhIHZlaGljbGUgZm9yIGVhY2ggc3R1ZGVudCB0byBleHBlcmllbmNlIHRoZSBsaW1pdGxlc3MgcG90ZW50aWFsIG9mIHRoZSBodW1hbiBzcGlyaXQuIFlvdSBkb27igJl0IGhhdmUgdG8gYmUgc3Ryb25nIG9yIGZsZXhpYmxlIHRvIGJlZ2luIHRoZSB5b2dhIHByYWN0aWNlLCBhbGwgeW91IG5lZWQgaXMgYW4gb3BlbiBoZWFydCBhbmQgdGhlIGluc3BpcmF0aW9uIHRvIHByYWN0aWNlIHlvZ2EuIFVucm9sbCB5b3VyIG1hdCBhbmQgZG8gdGhlIHByYWN0aWNlIVxuXG5GYWNlYm9vayAtIGh0dHA6Ly93d3cuZmFjZWJvby5jb20vS2lub1lvZ2Fcbkluc3RhZ3JhbSAtIGh0dHA6Ly93d3cuaW5zdGFncmFtLmNvbS9LaW5vWW9nYVxuQmxvZyAtIGh0dHA6Ly93d3cua2lub3lvZ2EuY29tIiwKICAgICJ0aHVtYm5haWxzIjogewogICAgICJkZWZhdWx0IjogewogICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvTjNua1V3enNZTUUvZGVmYXVsdC5qcGciLAogICAgICAid2lkdGgiOiAxMjAsCiAgICAgICJoZWlnaHQiOiA5MAogICAgIH0sCiAgICAgIm1lZGl1bSI6IHsKICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL04zbmtVd3pzWU1FL21xZGVmYXVsdC5qcGciLAogICAgICAid2lkdGgiOiAzMjAsCiAgICAgICJoZWlnaHQiOiAxODAKICAgICB9LAogICAgICJoaWdoIjogewogICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvTjNua1V3enNZTUUvaHFkZWZhdWx0LmpwZyIsCiAgICAgICJ3aWR0aCI6IDQ4MCwKICAgICAgImhlaWdodCI6IDM2MAogICAgIH0sCiAgICAgInN0YW5kYXJkIjogewogICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvTjNua1V3enNZTUUvc2RkZWZhdWx0LmpwZyIsCiAgICAgICJ3aWR0aCI6IDY0MCwKICAgICAgImhlaWdodCI6IDQ4MAogICAgIH0sCiAgICAgIm1heHJlcyI6IHsKICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL04zbmtVd3pzWU1FL21heHJlc2RlZmF1bHQuanBnIiwKICAgICAgIndpZHRoIjogMTI4MCwKICAgICAgImhlaWdodCI6IDcyMAogICAgIH0KICAgIH0sCiAgICAiY2hhbm5lbFRpdGxlIjogIktpbm9Zb2dhIiwKICAgICJwbGF5bGlzdElkIjogIlBMNTA4QzMwNjU2QjI1M0RCRiIsCiAgICAicG9zaXRpb24iOiAxNiwKICAgICJyZXNvdXJjZUlkIjogewogICAgICJraW5kIjogInlvdXR1YmUjdmlkZW8iLAogICAgICJ2aWRlb0lkIjogIk4zbmtVd3pzWU1FIgogICAgfQogICB9CiAgfSwKICB7CiAgICJraW5kIjogInlvdXR1YmUjcGxheWxpc3RJdGVtIiwKICAgImV0YWciOiAiXCJEbjV4SWRlcmJoQW5VazVUQVcwcWtGRmlyME0vczFua2Y3RGFwOHM5d21nQTljQmtUWXVnOUJNXCIiLAogICAiaWQiOiAiVUV3MU1EaERNekEyTlRaQ01qVXpSRUpHTGtZd05EVTJNRFZGUVROQ1FrTkVNMEk9IiwKICAgInNuaXBwZXQiOiB7CiAgICAicHVibGlzaGVkQXQiOiAiMjAxNS0xMC0xNlQxMToxOTowNS4wMDBaIiwKICAgICJjaGFubmVsSWQiOiAiVUNILTgxdWF4Q3dBQWFTZ3hSdHhNa3hnIiwKICAgICJ0aXRsZSI6ICJCZWdpbm5lciBCZWFjaCBZb2dhLCBCdWlsZCBVcCB5b3VyIEJhY2tiZW5kcyB3aXRoIEtpbm8iLAogICAgImRlc2NyaXB0aW9uIjogIlRoaXMgaXMgYSBuaWNlIGVhc3kgYmVhY2ggeW9nYSBmbG93IGZvciBiYWNrYmVuZHMuIFN0YXJ0aW5nIG9mZiB3aXRoIGEgZ2VudGxlIG9wZW5pbmcgYW5kIGJ1aWxkaW5nIHVwIHRvIFB1cnZhdHRhbmFzYW5hLiBQcmFjdGljZSB3aXRoIG1lIG9uIGh0dHA6Ly93d3cub21zdGFycy5jb21cblxuT3JpZ2luYWxseSBmaWxtZWQgZm9yIG15IFBlcmlzY29wZS4gQmUgc3VyZSB0byB0dW5lIGluIHRoZXJlIHRvIHdhdGNoIHRoZSBsaXZlIGJyb2FkY2FzdHMhXG5odHRwOi8vd3d3LnBlcmlzY29wZS50di9raW5veW9nYVxuXG5JZiB5b3XigJlyZSBsb29raW5nIGZvciB5b2dhIHZpZGVvcyB0aGF0IHdpbGwgc2hvdyB5b3UgdGhlIHBlcmZlY3Qgd2F5IGZvciB5b3UgdG8gc3RhcnQgeW91ciB5b2dhIGpvdXJuZXkgdGhlbiBLaW5vIE1hY0dyZWdvcuKAmXMgeW9nYSBjaGFubmVsIGlzIHBlcmZlY3QgZm9yIHlvdSEgV2hldGhlciB5b3UgYXJlIG5ldyB0byB5b2dhIG9yIGFuIGFkdmFuY2VkIHlvZ2Egc3R1ZGVudCB5b3Ugd2lsbCBmaW5kIGEgZnVsbCB5b2dhIGxpYnJhcnkgd2l0aCBhbGwgdGhlIHlvZ2EgcG9zdHVyZXMgdGhhdCB5b3UgbmVlZCB0byBkZXZlbG9wIGEgY29tcGxldGUgeW9nYSBwcmFjdGljZS4gWW9nYSBpcyBtb3JlIHRoYW4ganVzdCBhIHBoeXNpY2FsIHByYWN0aWNlIHlvZ2EgaXMgYSBsaWZlc3R5bGUgdGhhdCBpbmNsdWRlcyBsaXZpbmcgYSBwZWFjZWZ1bCBsaWZlLiBMaXZpbmcgdGhlIHlvZ2EgbGlmZXN0eWxlIGlzIGFib3V0IHlvZ2EgcHJhY3RpY2UsIGlubmVyIHBlYWNlLCB5b2dhIGRpZXQgYW5kIGJlaW5nIGEgZ29vZCBwZXJzb24gb24gYW5kIG9mZiB5b3VyIHlvZ2EgbWF0LiBLaW5vIGlzIGEgeW9nYSB0ZWFjaGVyLCBhdXRob3Igb2YgdGhyZWUgYm9va3MsIGludGVybmF0aW9uYWwgdGVhY2hlciwgd3JpdGVyLCBibG9nZ2VyLCBvbmxpbmUgeW9nYSBjbGFzcyB0ZWFjaGVyLCBJRyB5b2dhIGNoYWxsZW5nZSBob3N0IGFuZCBtdWNoIG1vcmUuIFNoZSBjby1mb3VuZGVkIE1pYW1pIExpZmUgQ2VudGVyIGFuZCBNaWFtaSBZb2dhIE1hZ2F6aW5lIGFzIHdlbGwgYXMgcHJvZHVjZWQgc2l4IEFzaHRhbmdhIFlvZ2EgRFZEcy4gUHJhY3RpY2UgeW9nYSwgY2hhbmdlIHlvdXIgd29ybGQgb25lIGJyZWF0aCBhdCBhIHRpbWUuIEtpbm8gYmVsaWV2ZXMgdGhhdCB5b2dhIGlzIGEgdmVoaWNsZSBmb3IgZWFjaCBzdHVkZW50IHRvIGV4cGVyaWVuY2UgdGhlIGxpbWl0bGVzcyBwb3RlbnRpYWwgb2YgdGhlIGh1bWFuIHNwaXJpdC4gWW91IGRvbuKAmXQgaGF2ZSB0byBiZSBzdHJvbmcgb3IgZmxleGlibGUgdG8gYmVnaW4gdGhlIHlvZ2EgcHJhY3RpY2UsIGFsbCB5b3UgbmVlZCBpcyBhbiBvcGVuIGhlYXJ0IGFuZCB0aGUgaW5zcGlyYXRpb24gdG8gcHJhY3RpY2UgeW9nYS4gVW5yb2xsIHlvdXIgbWF0IGFuZCBkbyB0aGUgcHJhY3RpY2UhXG5cbkZhY2Vib29rIC0gaHR0cDovL3d3dy5mYWNlYm9vLmNvbS9LaW5vWW9nYVxuSW5zdGFncmFtIC0gaHR0cDovL3d3dy5pbnN0YWdyYW0uY29tL0tpbm9Zb2dhXG5CbG9nIC0gaHR0cDovL3d3dy5raW5veW9nYS5jb20iLAogICAgInRodW1ibmFpbHMiOiB7CiAgICAgImRlZmF1bHQiOiB7CiAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9rUy1ua1FDVzFyQS9kZWZhdWx0LmpwZyIsCiAgICAgICJ3aWR0aCI6IDEyMCwKICAgICAgImhlaWdodCI6IDkwCiAgICAgfSwKICAgICAibWVkaXVtIjogewogICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkva1MtbmtRQ1cxckEvbXFkZWZhdWx0LmpwZyIsCiAgICAgICJ3aWR0aCI6IDMyMCwKICAgICAgImhlaWdodCI6IDE4MAogICAgIH0sCiAgICAgImhpZ2giOiB7CiAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9rUy1ua1FDVzFyQS9ocWRlZmF1bHQuanBnIiwKICAgICAgIndpZHRoIjogNDgwLAogICAgICAiaGVpZ2h0IjogMzYwCiAgICAgfSwKICAgICAic3RhbmRhcmQiOiB7CiAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9rUy1ua1FDVzFyQS9zZGRlZmF1bHQuanBnIiwKICAgICAgIndpZHRoIjogNjQwLAogICAgICAiaGVpZ2h0IjogNDgwCiAgICAgfSwKICAgICAibWF4cmVzIjogewogICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkva1MtbmtRQ1cxckEvbWF4cmVzZGVmYXVsdC5qcGciLAogICAgICAid2lkdGgiOiAxMjgwLAogICAgICAiaGVpZ2h0IjogNzIwCiAgICAgfQogICAgfSwKICAgICJjaGFubmVsVGl0bGUiOiAiS2lub1lvZ2EiLAogICAgInBsYXlsaXN0SWQiOiAiUEw1MDhDMzA2NTZCMjUzREJGIiwKICAgICJwb3NpdGlvbiI6IDE3LAogICAgInJlc291cmNlSWQiOiB7CiAgICAgImtpbmQiOiAieW91dHViZSN2aWRlbyIsCiAgICAgInZpZGVvSWQiOiAia1MtbmtRQ1cxckEiCiAgICB9CiAgIH0KICB9LAogIHsKICAgImtpbmQiOiAieW91dHViZSNwbGF5bGlzdEl0ZW0iLAogICAiZXRhZyI6ICJcIkRuNXhJZGVyYmhBblVrNVRBVzBxa0ZGaXIwTS9PUDFBdloxQ1phWnZBOW5Zeklnd0Q2WjFWZTRcIiIsCiAgICJpZCI6ICJVRXcxTURoRE16QTJOVFpDTWpVelJFSkdMa1l5UmpreE5ERTBRekF5TmtGQlJFRT0iLAogICAic25pcHBldCI6IHsKICAgICJwdWJsaXNoZWRBdCI6ICIyMDE1LTEwLTA3VDEyOjUwOjQ4LjAwMFoiLAogICAgImNoYW5uZWxJZCI6ICJVQ0gtODF1YXhDd0FBYVNneFJ0eE1reGciLAogICAgInRpdGxlIjogIkJlYWNoIFlvZ2EgQXJtIEJhbGFuY2VzIGFuZCBCYWNrYmVuZHMgd2l0aCBLaW5vIiwKICAgICJkZXNjcmlwdGlvbiI6ICJCZWFjaCB5b2dhIGFybSBiYWxhbmNlcyBhbmQgZWFzeSBiYWNrYmVuZHMsIGJ1aWxkIHN0cmVuZ3RoIGFuZCBoYXZlIGZ1biBvbiB0aGUgYmVhY2ggd2l0aCBLaW5vIDopIFByYWN0aWNlIHdpdGggbWUgb24gaHR0cDovL3d3dy5vbXN0YXJzLmNvbVxuXG5JZiB5b3XigJlyZSBsb29raW5nIGZvciB5b2dhIHZpZGVvcyB0aGF0IHdpbGwgc2hvdyB5b3UgdGhlIHBlcmZlY3Qgd2F5IGZvciB5b3UgdG8gc3RhcnQgeW91ciB5b2dhIGpvdXJuZXkgdGhlbiBLaW5vIE1hY0dyZWdvcuKAmXMgeW9nYSBjaGFubmVsIGlzIHBlcmZlY3QgZm9yIHlvdSEgV2hldGhlciB5b3UgYXJlIG5ldyB0byB5b2dhIG9yIGFuIGFkdmFuY2VkIHlvZ2Egc3R1ZGVudCB5b3Ugd2lsbCBmaW5kIGEgZnVsbCB5b2dhIGxpYnJhcnkgd2l0aCBhbGwgdGhlIHlvZ2EgcG9zdHVyZXMgdGhhdCB5b3UgbmVlZCB0byBkZXZlbG9wIGEgY29tcGxldGUgeW9nYSBwcmFjdGljZS4gWW9nYSBpcyBtb3JlIHRoYW4ganVzdCBhIHBoeXNpY2FsIHByYWN0aWNlIHlvZ2EgaXMgYSBsaWZlc3R5bGUgdGhhdCBpbmNsdWRlcyBsaXZpbmcgYSBwZWFjZWZ1bCBsaWZlLiBMaXZpbmcgdGhlIHlvZ2EgbGlmZXN0eWxlIGlzIGFib3V0IHlvZ2EgcHJhY3RpY2UsIGlubmVyIHBlYWNlLCB5b2dhIGRpZXQgYW5kIGJlaW5nIGEgZ29vZCBwZXJzb24gb24gYW5kIG9mZiB5b3VyIHlvZ2EgbWF0LiBLaW5vIGlzIGEgeW9nYSB0ZWFjaGVyLCBhdXRob3Igb2YgdGhyZWUgYm9va3MsIGludGVybmF0aW9uYWwgdGVhY2hlciwgd3JpdGVyLCBibG9nZ2VyLCBvbmxpbmUgeW9nYSBjbGFzcyB0ZWFjaGVyLCBJRyB5b2dhIGNoYWxsZW5nZSBob3N0IGFuZCBtdWNoIG1vcmUuIFNoZSBjby1mb3VuZGVkIE1pYW1pIExpZmUgQ2VudGVyIGFuZCBNaWFtaSBZb2dhIE1hZ2F6aW5lIGFzIHdlbGwgYXMgcHJvZHVjZWQgc2l4IEFzaHRhbmdhIFlvZ2EgRFZEcy4gUHJhY3RpY2UgeW9nYSwgY2hhbmdlIHlvdXIgd29ybGQgb25lIGJyZWF0aCBhdCBhIHRpbWUuIEtpbm8gYmVsaWV2ZXMgdGhhdCB5b2dhIGlzIGEgdmVoaWNsZSBmb3IgZWFjaCBzdHVkZW50IHRvIGV4cGVyaWVuY2UgdGhlIGxpbWl0bGVzcyBwb3RlbnRpYWwgb2YgdGhlIGh1bWFuIHNwaXJpdC4gWW91IGRvbuKAmXQgaGF2ZSB0byBiZSBzdHJvbmcgb3IgZmxleGlibGUgdG8gYmVnaW4gdGhlIHlvZ2EgcHJhY3RpY2UsIGFsbCB5b3UgbmVlZCBpcyBhbiBvcGVuIGhlYXJ0IGFuZCB0aGUgaW5zcGlyYXRpb24gdG8gcHJhY3RpY2UgeW9nYS4gVW5yb2xsIHlvdXIgbWF0IGFuZCBkbyB0aGUgcHJhY3RpY2UhXG5cbkZhY2Vib29rIC0gaHR0cDovL3d3dy5mYWNlYm9vLmNvbS9LaW5vWW9nYVxuSW5zdGFncmFtIC0gaHR0cDovL3d3dy5pbnN0YWdyYW0uY29tL0tpbm9Zb2dhXG5CbG9nIC0gaHR0cDovL3d3dy5raW5veW9nYS5jb20iLAogICAgInRodW1ibmFpbHMiOiB7CiAgICAgImRlZmF1bHQiOiB7CiAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS85OC1DR21PRmxEdy9kZWZhdWx0LmpwZyIsCiAgICAgICJ3aWR0aCI6IDEyMCwKICAgICAgImhlaWdodCI6IDkwCiAgICAgfSwKICAgICAibWVkaXVtIjogewogICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvOTgtQ0dtT0ZsRHcvbXFkZWZhdWx0LmpwZyIsCiAgICAgICJ3aWR0aCI6IDMyMCwKICAgICAgImhlaWdodCI6IDE4MAogICAgIH0sCiAgICAgImhpZ2giOiB7CiAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS85OC1DR21PRmxEdy9ocWRlZmF1bHQuanBnIiwKICAgICAgIndpZHRoIjogNDgwLAogICAgICAiaGVpZ2h0IjogMzYwCiAgICAgfSwKICAgICAic3RhbmRhcmQiOiB7CiAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS85OC1DR21PRmxEdy9zZGRlZmF1bHQuanBnIiwKICAgICAgIndpZHRoIjogNjQwLAogICAgICAiaGVpZ2h0IjogNDgwCiAgICAgfSwKICAgICAibWF4cmVzIjogewogICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvOTgtQ0dtT0ZsRHcvbWF4cmVzZGVmYXVsdC5qcGciLAogICAgICAid2lkdGgiOiAxMjgwLAogICAgICAiaGVpZ2h0IjogNzIwCiAgICAgfQogICAgfSwKICAgICJjaGFubmVsVGl0bGUiOiAiS2lub1lvZ2EiLAogICAgInBsYXlsaXN0SWQiOiAiUEw1MDhDMzA2NTZCMjUzREJGIiwKICAgICJwb3NpdGlvbiI6IDE4LAogICAgInJlc291cmNlSWQiOiB7CiAgICAgImtpbmQiOiAieW91dHViZSN2aWRlbyIsCiAgICAgInZpZGVvSWQiOiAiOTgtQ0dtT0ZsRHciCiAgICB9CiAgIH0KICB9LAogIHsKICAgImtpbmQiOiAieW91dHViZSNwbGF5bGlzdEl0ZW0iLAogICAiZXRhZyI6ICJcIkRuNXhJZGVyYmhBblVrNVRBVzBxa0ZGaXIwTS9GdXRjMTRZbmZwQm9zOG9NWDhmSThqSXZGQzRcIiIsCiAgICJpZCI6ICJVRXcxTURoRE16QTJOVFpDTWpVelJFSkdMa1l6TURJeE1qRTJNVVF3UlRBME9UUT0iLAogICAic25pcHBldCI6IHsKICAgICJwdWJsaXNoZWRBdCI6ICIyMDE1LTEwLTAzVDEyOjAzOjM2LjAwMFoiLAogICAgImNoYW5uZWxJZCI6ICJVQ0gtODF1YXhDd0FBYVNneFJ0eE1reGciLAogICAgInRpdGxlIjogIkJlYWNoIFlvZ2EgU3RyZW5ndGggQmFzaWNzLCBQbGFua3MgYW5kIE1vcmUgd2l0aCBLaW5vIiwKICAgICJkZXNjcmlwdGlvbiI6ICJQbGFuayBpdCBvdXQgZm9yIHRoZSB5b2dhIGNoYWxsZW5nZSwgYnVpbGQgc3RyZW5ndGggYW5kIGhhdmUgZnVuIG9uIHRoZSBiZWFjaCB3aXRoIEtpbm8gOikgT3JpZ2luYWxseSBmaWxtZWQgbGl2ZSBvbiBLaW5vIFlvZ2Egb24gUGVyaXNjb3BlLCBiZSBzdXJlIHRvIGpvaW4gQGtpbm95b2dhIHRoZXJlIHRvIHR1bmUgaW4gdG8gdGhlIGxpdmUgYnJvYWRjYXN0cyEgXG5cbklmIHlvdeKAmXJlIGxvb2tpbmcgZm9yIHlvZ2EgdmlkZW9zIHRoYXQgd2lsbCBzaG93IHlvdSB0aGUgcGVyZmVjdCB3YXkgZm9yIHlvdSB0byBzdGFydCB5b3VyIHlvZ2Egam91cm5leSB0aGVuIEtpbm8gTWFjR3JlZ29y4oCZcyB5b2dhIGNoYW5uZWwgaXMgcGVyZmVjdCBmb3IgeW91ISBXaGV0aGVyIHlvdSBhcmUgbmV3IHRvIHlvZ2Egb3IgYW4gYWR2YW5jZWQgeW9nYSBzdHVkZW50IHlvdSB3aWxsIGZpbmQgYSBmdWxsIHlvZ2EgbGlicmFyeSB3aXRoIGFsbCB0aGUgeW9nYSBwb3N0dXJlcyB0aGF0IHlvdSBuZWVkIHRvIGRldmVsb3AgYSBjb21wbGV0ZSB5b2dhIHByYWN0aWNlLiBZb2dhIGlzIG1vcmUgdGhhbiBqdXN0IGEgcGh5c2ljYWwgcHJhY3RpY2UgeW9nYSBpcyBhIGxpZmVzdHlsZSB0aGF0IGluY2x1ZGVzIGxpdmluZyBhIHBlYWNlZnVsIGxpZmUuIExpdmluZyB0aGUgeW9nYSBsaWZlc3R5bGUgaXMgYWJvdXQgeW9nYSBwcmFjdGljZSwgaW5uZXIgcGVhY2UsIHlvZ2EgZGlldCBhbmQgYmVpbmcgYSBnb29kIHBlcnNvbiBvbiBhbmQgb2ZmIHlvdXIgeW9nYSBtYXQuIEtpbm8gaXMgYSB5b2dhIHRlYWNoZXIsIGF1dGhvciBvZiB0aHJlZSBib29rcywgaW50ZXJuYXRpb25hbCB0ZWFjaGVyLCB3cml0ZXIsIGJsb2dnZXIsIG9ubGluZSB5b2dhIGNsYXNzIHRlYWNoZXIsIElHIHlvZ2EgY2hhbGxlbmdlIGhvc3QgYW5kIG11Y2ggbW9yZS4gU2hlIGNvLWZvdW5kZWQgTWlhbWkgTGlmZSBDZW50ZXIgYW5kIE1pYW1pIFlvZ2EgTWFnYXppbmUgYXMgd2VsbCBhcyBwcm9kdWNlZCBzaXggQXNodGFuZ2EgWW9nYSBEVkRzLiBQcmFjdGljZSB5b2dhLCBjaGFuZ2UgeW91ciB3b3JsZCBvbmUgYnJlYXRoIGF0IGEgdGltZS4gS2lubyBiZWxpZXZlcyB0aGF0IHlvZ2EgaXMgYSB2ZWhpY2xlIGZvciBlYWNoIHN0dWRlbnQgdG8gZXhwZXJpZW5jZSB0aGUgbGltaXRsZXNzIHBvdGVudGlhbCBvZiB0aGUgaHVtYW4gc3Bpcml0LiBZb3UgZG9u4oCZdCBoYXZlIHRvIGJlIHN0cm9uZyBvciBmbGV4aWJsZSB0byBiZWdpbiB0aGUgeW9nYSBwcmFjdGljZSwgYWxsIHlvdSBuZWVkIGlzIGFuIG9wZW4gaGVhcnQgYW5kIHRoZSBpbnNwaXJhdGlvbiB0byBwcmFjdGljZSB5b2dhLiBVbnJvbGwgeW91ciBtYXQgYW5kIGRvIHRoZSBwcmFjdGljZSFcblxuRmFjZWJvb2sgLSBodHRwOi8vd3d3LmZhY2Vib28uY29tL0tpbm9Zb2dhXG5JbnN0YWdyYW0gLSBodHRwOi8vd3d3Lmluc3RhZ3JhbS5jb20vS2lub1lvZ2FcbkJsb2cgLSBodHRwOi8vd3d3Lmtpbm95b2dhLmNvbSIsCiAgICAidGh1bWJuYWlscyI6IHsKICAgICAiZGVmYXVsdCI6IHsKICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL1hBbjJJdXp5ZkdzL2RlZmF1bHQuanBnIiwKICAgICAgIndpZHRoIjogMTIwLAogICAgICAiaGVpZ2h0IjogOTAKICAgICB9LAogICAgICJtZWRpdW0iOiB7CiAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9YQW4ySXV6eWZHcy9tcWRlZmF1bHQuanBnIiwKICAgICAgIndpZHRoIjogMzIwLAogICAgICAiaGVpZ2h0IjogMTgwCiAgICAgfSwKICAgICAiaGlnaCI6IHsKICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL1hBbjJJdXp5ZkdzL2hxZGVmYXVsdC5qcGciLAogICAgICAid2lkdGgiOiA0ODAsCiAgICAgICJoZWlnaHQiOiAzNjAKICAgICB9LAogICAgICJzdGFuZGFyZCI6IHsKICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL1hBbjJJdXp5ZkdzL3NkZGVmYXVsdC5qcGciLAogICAgICAid2lkdGgiOiA2NDAsCiAgICAgICJoZWlnaHQiOiA0ODAKICAgICB9LAogICAgICJtYXhyZXMiOiB7CiAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9YQW4ySXV6eWZHcy9tYXhyZXNkZWZhdWx0LmpwZyIsCiAgICAgICJ3aWR0aCI6IDEyODAsCiAgICAgICJoZWlnaHQiOiA3MjAKICAgICB9CiAgICB9LAogICAgImNoYW5uZWxUaXRsZSI6ICJLaW5vWW9nYSIsCiAgICAicGxheWxpc3RJZCI6ICJQTDUwOEMzMDY1NkIyNTNEQkYiLAogICAgInBvc2l0aW9uIjogMTksCiAgICAicmVzb3VyY2VJZCI6IHsKICAgICAia2luZCI6ICJ5b3V0dWJlI3ZpZGVvIiwKICAgICAidmlkZW9JZCI6ICJYQW4ySXV6eWZHcyIKICAgIH0KICAgfQogIH0KIF0KfQo=
    http_version: null
  recorded_at: Mon, 11 May 2020 23:06:34 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/playlistItems?key=AIzaSyD3OAw77Zd5iI3iYjagAtYTyz5mYhDSsBg&maxResults=10&pageToken=CBQQAA&part=snippet&playlistId=PL508C30656B253DBF
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Mon, 11 May 2020 23:06:34 GMT
      Date:
      - Mon, 11 May 2020 23:06:34 GMT
      Cache-Control:
      - private, max-age=0, must-revalidate, no-transform
      Etag:
      - '"Dn5xIderbhAnUk5TAW0qkFFir0M/CUaX7qtZ_sCO_7R-eusSHNr0_MM"'
      Vary:
      - Origin
      - X-Origin
      Content-Type:
      - application/json; charset=UTF-8
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      Content-Security-Policy:
      - frame-ancestors 'self'
      X-Xss-Protection:
      - 1; mode=block
      Server:
      - GSE
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-Q050=":443"; ma=2592000,h3-Q049=":443";
        ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443"; ma=2592000,h3-Q043=":443";
        ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Mon, 11 May 2020 23:06:34 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/playlistItems?key=AIzaSyD3OAw77Zd5iI3iYjagAtYTyz5mYhDSsBg&maxResults=10&pageToken=CB4QAA&part=snippet&playlistId=PL508C30656B253DBF
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Mon, 11 May 2020 23:06:34 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-Q050=":443"; ma=2592000,h3-Q049=":443";
        ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443"; ma=2592000,h3-Q043=":443";
        ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Mon, 11 May 2020 23:06:34 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/playlistItems?key=AIzaSyD3OAw77Zd5iI3iYjagAtYTyz5mYhDSsBg&maxResults=10&pageToken=CCgQAA&part=snippet&playlistId=PL508C30656B253DBF
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Mon, 11 May 2020 23:06:35 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-Q050=":443"; ma=2592000,h3-Q049=":443";
        ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443"; ma=2592000,h3-Q043=":443";
        ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Mon, 11 May 2020 23:06:35 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/playlistItems?key=AIzaSyD3OAw77Zd5iI3iYjagAtYTyz5mYhDSsBg&maxResults=10&pageToken=CDIQAA&part=snippet&playlistId=PL508C30656B253DBF
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Mon, 11 May 2020 23:06:35 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-Q050=":443"; ma=2592000,h3-Q049=":443";
        ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443"; ma=2592000,h3-Q043=":443";
        ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Mon, 11 May 2020 23:06:35 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/playlistItems?key=AIzaSyD3OAw77Zd5iI3iYjagAtYTyz5mYhDSsBg&maxResults=10&pageToken=CDwQAA&part=snippet&playlistId=PL508C30656B253DBF
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Mon, 11 May 2020 23:06:35 GMT
      Date:
      - Mon, 11 May 2020 23:06:35 GMT
      Cache-Control:
      - private, max-age=0, must-revalidate, no-transform
      Etag:
      - '"Dn5xIderbhAnUk5TAW0qkFFir0M/qF2v2wVSDif0-wkieASP0d9YxF4"'
      Vary:
      - Origin
      - X-Origin
      Content-Type:
      - application/json; charset=UTF-8
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      Content-Security-Policy:
      - frame-ancestors 'self'
      X-Xss-Protection:
      - 1; mode=block
      Server:
      - GSE
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-Q050=":443"; ma=2592000,h3-Q049=":443";
        ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443"; ma=2592000,h3-Q043=":443";
        ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Mon, 11 May 2020 23:06:35 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/playlistItems?key=AIzaSyD3OAw77Zd5iI3iYjagAtYTyz5mYhDSsBg&maxResults=10&pageToken=CEYQAA&part=snippet&playlistId=PL508C30656B253DBF
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Mon, 11 May 2020 23:06:35 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-Q050=":443"; ma=2592000,h3-Q049=":443";
        ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443"; ma=2592000,h3-Q043=":443";
        ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        ewogICJraW5kIjogInlvdXR1YmUjcGxheWxpc3RJdGVtTGlzdFJlc3BvbnNlIiwKICAiZXRhZyI6ICJQTWszWEJUUVdmcTdGeGJMTC1WMHZGMXY5NVEiLAogICJwcmV2UGFnZVRva2VuIjogIkNFWVFBUSIsCiAgIml0ZW1zIjogWwogICAgewogICAgICAia2luZCI6ICJ5b3V0dWJlI3BsYXlsaXN0SXRlbSIsCiAgICAgICJldGFnIjogIm8xTW0wMDFRSkZib2JiVXVRbzV6WmtEZ3hKRSIsCiAgICAgICJpZCI6ICJVRXcxTURoRE16QTJOVFpDTWpVelJFSkdMak00UVVVMU1rWkZRekJFTXpoR01qaz0iLAogICAgICAic25pcHBldCI6IHsKICAgICAgICAicHVibGlzaGVkQXQiOiAiMjAxMi0wNy0yOVQxODowMTowNloiLAogICAgICAgICJjaGFubmVsSWQiOiAiVUNILTgxdWF4Q3dBQWFTZ3hSdHhNa3hnIiwKICAgICAgICAidGl0bGUiOiAiSGFsZiBMb3R1cyBQb3NpdGlvbiwgT3BlbiB5b3VyIEhpcHMgZm9yIFBhZG1hc2FuYSB3aXRoIEtpbm8gTWFjR3JlZ29yIiwKICAgICAgICAiZGVzY3JpcHRpb24iOiAiSWYgeW914oCZcmUgbG9va2luZyBmb3IgeW9nYSB2aWRlb3MgdGhhdCB3aWxsIHNob3cgeW91IHRoZSBwZXJmZWN0IHdheSBmb3IgeW91IHRvIHN0YXJ0IHlvdXIgeW9nYSBqb3VybmV5IHRoZW4gS2lubyBNYWNHcmVnb3LigJlzIHlvZ2EgY2hhbm5lbCBpcyBwZXJmZWN0IGZvciB5b3UhIFdoZXRoZXIgeW91IGFyZSBuZXcgdG8geW9nYSBvciBhbiBhZHZhbmNlZCB5b2dhIHN0dWRlbnQgeW91IHdpbGwgZmluZCBhIGZ1bGwgeW9nYSBsaWJyYXJ5IHdpdGggYWxsIHRoZSB5b2dhIHBvc3R1cmVzIHRoYXQgeW91IG5lZWQgdG8gZGV2ZWxvcCBhIGNvbXBsZXRlIHlvZ2EgcHJhY3RpY2UuIFlvZ2EgaXMgbW9yZSB0aGFuIGp1c3QgYSBwaHlzaWNhbCBwcmFjdGljZSB5b2dhIGlzIGEgbGlmZXN0eWxlIHRoYXQgaW5jbHVkZXMgbGl2aW5nIGEgcGVhY2VmdWwgbGlmZS4gTGl2aW5nIHRoZSB5b2dhIGxpZmVzdHlsZSBpcyBhYm91dCB5b2dhIHByYWN0aWNlLCBpbm5lciBwZWFjZSwgeW9nYSBkaWV0IGFuZCBiZWluZyBhIGdvb2QgcGVyc29uIG9uIGFuZCBvZmYgeW91ciB5b2dhIG1hdC4gS2lubyBpcyBhIHlvZ2EgdGVhY2hlciwgYXV0aG9yIG9mIHRocmVlIGJvb2tzLCBpbnRlcm5hdGlvbmFsIHRlYWNoZXIsIHdyaXRlciwgYmxvZ2dlciwgb25saW5lIHlvZ2EgY2xhc3MgdGVhY2hlciwgSUcgeW9nYSBjaGFsbGVuZ2UgaG9zdCBhbmQgbXVjaCBtb3JlLiBTaGUgY28tZm91bmRlZCBNaWFtaSBMaWZlIENlbnRlciBhbmQgTWlhbWkgWW9nYSBNYWdhemluZSBhcyB3ZWxsIGFzIHByb2R1Y2VkIHNpeCBBc2h0YW5nYSBZb2dhIERWRHMuIFByYWN0aWNlIHlvZ2EsIGNoYW5nZSB5b3VyIHdvcmxkIG9uZSBicmVhdGggYXQgYSB0aW1lLiBLaW5vIGJlbGlldmVzIHRoYXQgeW9nYSBpcyBhIHZlaGljbGUgZm9yIGVhY2ggc3R1ZGVudCB0byBleHBlcmllbmNlIHRoZSBsaW1pdGxlc3MgcG90ZW50aWFsIG9mIHRoZSBodW1hbiBzcGlyaXQuIFlvdSBkb27igJl0IGhhdmUgdG8gYmUgc3Ryb25nIG9yIGZsZXhpYmxlIHRvIGJlZ2luIHRoZSB5b2dhIHByYWN0aWNlLCBhbGwgeW91IG5lZWQgaXMgYW4gb3BlbiBoZWFydCBhbmQgdGhlIGluc3BpcmF0aW9uIHRvIHByYWN0aWNlIHlvZ2EuIFVucm9sbCB5b3VyIG1hdCBhbmQgZG8gdGhlIHByYWN0aWNlIVxuXG5GYWNlYm9vayAtIGh0dHA6Ly93d3cuZmFjZWJvb2suY29tL0tpbm9Zb2dhXG5JbnN0YWdyYW0gLSBodHRwOi8vd3d3Lmluc3RhZ3JhbS5jb20vS2lub1lvZ2FcbkJsb2cgLSBodHRwOi8vd3d3Lmtpbm95b2dhLmNvbSIsCiAgICAgICAgInRodW1ibmFpbHMiOiB7CiAgICAgICAgICAiZGVmYXVsdCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL0VMUldSOTEzRjF3L2RlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMTIwLAogICAgICAgICAgICAiaGVpZ2h0IjogOTAKICAgICAgICAgIH0sCiAgICAgICAgICAibWVkaXVtIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvRUxSV1I5MTNGMXcvbXFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDMyMCwKICAgICAgICAgICAgImhlaWdodCI6IDE4MAogICAgICAgICAgfSwKICAgICAgICAgICJoaWdoIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvRUxSV1I5MTNGMXcvaHFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDQ4MCwKICAgICAgICAgICAgImhlaWdodCI6IDM2MAogICAgICAgICAgfSwKICAgICAgICAgICJzdGFuZGFyZCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL0VMUldSOTEzRjF3L3NkZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA2NDAsCiAgICAgICAgICAgICJoZWlnaHQiOiA0ODAKICAgICAgICAgIH0sCiAgICAgICAgICAibWF4cmVzIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvRUxSV1I5MTNGMXcvbWF4cmVzZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAxMjgwLAogICAgICAgICAgICAiaGVpZ2h0IjogNzIwCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAiY2hhbm5lbFRpdGxlIjogIktpbm9Zb2dhIiwKICAgICAgICAicGxheWxpc3RJZCI6ICJQTDUwOEMzMDY1NkIyNTNEQkYiLAogICAgICAgICJwb3NpdGlvbiI6IDcwLAogICAgICAgICJyZXNvdXJjZUlkIjogewogICAgICAgICAgImtpbmQiOiAieW91dHViZSN2aWRlbyIsCiAgICAgICAgICAidmlkZW9JZCI6ICJFTFJXUjkxM0YxdyIKICAgICAgICB9CiAgICAgIH0KICAgIH0sCiAgICB7CiAgICAgICJraW5kIjogInlvdXR1YmUjcGxheWxpc3RJdGVtIiwKICAgICAgImV0YWciOiAiSkNBR3Y1NGcxYlh5cWVqd2lnNEo5X0RlOTdjIiwKICAgICAgImlkIjogIlVFdzFNRGhETXpBMk5UWkNNalV6UkVKR0xrTXpNMEZCT1VaRU9EY3pRMFl4UXpVPSIsCiAgICAgICJzbmlwcGV0IjogewogICAgICAgICJwdWJsaXNoZWRBdCI6ICIyMDEyLTA3LTI5VDE4OjAxOjA2WiIsCiAgICAgICAgImNoYW5uZWxJZCI6ICJVQ0gtODF1YXhDd0FBYVNneFJ0eE1reGciLAogICAgICAgICJ0aXRsZSI6ICJTYWZlbHkgR2V0dGluZyBJbnRvIEZ1bGwgTG90dXMgUG9zaXRpb24sIFBhZG1hc2FuYSBmb3IgQmVnaW5uZXJzIHdpdGggS2lubyBNYWNHcmVnb3IiLAogICAgICAgICJkZXNjcmlwdGlvbiI6ICJJZiB5b3XigJlyZSBsb29raW5nIGZvciB5b2dhIHZpZGVvcyB0aGF0IHdpbGwgc2hvdyB5b3UgdGhlIHBlcmZlY3Qgd2F5IGZvciB5b3UgdG8gc3RhcnQgeW91ciB5b2dhIGpvdXJuZXkgdGhlbiBLaW5vIE1hY0dyZWdvcuKAmXMgeW9nYSBjaGFubmVsIGlzIHBlcmZlY3QgZm9yIHlvdSEgV2hldGhlciB5b3UgYXJlIG5ldyB0byB5b2dhIG9yIGFuIGFkdmFuY2VkIHlvZ2Egc3R1ZGVudCB5b3Ugd2lsbCBmaW5kIGEgZnVsbCB5b2dhIGxpYnJhcnkgd2l0aCBhbGwgdGhlIHlvZ2EgcG9zdHVyZXMgdGhhdCB5b3UgbmVlZCB0byBkZXZlbG9wIGEgY29tcGxldGUgeW9nYSBwcmFjdGljZS4gWW9nYSBpcyBtb3JlIHRoYW4ganVzdCBhIHBoeXNpY2FsIHByYWN0aWNlIHlvZ2EgaXMgYSBsaWZlc3R5bGUgdGhhdCBpbmNsdWRlcyBsaXZpbmcgYSBwZWFjZWZ1bCBsaWZlLiBMaXZpbmcgdGhlIHlvZ2EgbGlmZXN0eWxlIGlzIGFib3V0IHlvZ2EgcHJhY3RpY2UsIGlubmVyIHBlYWNlLCB5b2dhIGRpZXQgYW5kIGJlaW5nIGEgZ29vZCBwZXJzb24gb24gYW5kIG9mZiB5b3VyIHlvZ2EgbWF0LiBLaW5vIGlzIGEgeW9nYSB0ZWFjaGVyLCBhdXRob3Igb2YgdGhyZWUgYm9va3MsIGludGVybmF0aW9uYWwgdGVhY2hlciwgd3JpdGVyLCBibG9nZ2VyLCBvbmxpbmUgeW9nYSBjbGFzcyB0ZWFjaGVyLCBJRyB5b2dhIGNoYWxsZW5nZSBob3N0IGFuZCBtdWNoIG1vcmUuIFNoZSBjby1mb3VuZGVkIE1pYW1pIExpZmUgQ2VudGVyIGFuZCBNaWFtaSBZb2dhIE1hZ2F6aW5lIGFzIHdlbGwgYXMgcHJvZHVjZWQgc2l4IEFzaHRhbmdhIFlvZ2EgRFZEcy4gUHJhY3RpY2UgeW9nYSwgY2hhbmdlIHlvdXIgd29ybGQgb25lIGJyZWF0aCBhdCBhIHRpbWUuIEtpbm8gYmVsaWV2ZXMgdGhhdCB5b2dhIGlzIGEgdmVoaWNsZSBmb3IgZWFjaCBzdHVkZW50IHRvIGV4cGVyaWVuY2UgdGhlIGxpbWl0bGVzcyBwb3RlbnRpYWwgb2YgdGhlIGh1bWFuIHNwaXJpdC4gWW91IGRvbuKAmXQgaGF2ZSB0byBiZSBzdHJvbmcgb3IgZmxleGlibGUgdG8gYmVnaW4gdGhlIHlvZ2EgcHJhY3RpY2UsIGFsbCB5b3UgbmVlZCBpcyBhbiBvcGVuIGhlYXJ0IGFuZCB0aGUgaW5zcGlyYXRpb24gdG8gcHJhY3RpY2UgeW9nYS4gVW5yb2xsIHlvdXIgbWF0IGFuZCBkbyB0aGUgcHJhY3RpY2UhXG5cbkZhY2Vib29rIC0gaHR0cDovL3d3dy5mYWNlYm9vay5jb20vS2lub1lvZ2Fcbkluc3RhZ3JhbSAtIGh0dHA6Ly93d3cuaW5zdGFncmFtLmNvbS9LaW5vWW9nYVxuQmxvZyAtIGh0dHA6Ly93d3cua2lub3lvZ2EuY29tIiwKICAgICAgICAidGh1bWJuYWlscyI6IHsKICAgICAgICAgICJkZWZhdWx0IjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvQmRWSGs1QzBMOFUvZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAxMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiA5MAogICAgICAgICAgfSwKICAgICAgICAgICJtZWRpdW0iOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9CZFZIazVDMEw4VS9tcWRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMzIwLAogICAgICAgICAgICAiaGVpZ2h0IjogMTgwCiAgICAgICAgICB9LAogICAgICAgICAgImhpZ2giOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9CZFZIazVDMEw4VS9ocWRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogNDgwLAogICAgICAgICAgICAiaGVpZ2h0IjogMzYwCiAgICAgICAgICB9LAogICAgICAgICAgInN0YW5kYXJkIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvQmRWSGs1QzBMOFUvc2RkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDY0MCwKICAgICAgICAgICAgImhlaWdodCI6IDQ4MAogICAgICAgICAgfSwKICAgICAgICAgICJtYXhyZXMiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9CZFZIazVDMEw4VS9tYXhyZXNkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDEyODAsCiAgICAgICAgICAgICJoZWlnaHQiOiA3MjAKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgICJjaGFubmVsVGl0bGUiOiAiS2lub1lvZ2EiLAogICAgICAgICJwbGF5bGlzdElkIjogIlBMNTA4QzMwNjU2QjI1M0RCRiIsCiAgICAgICAgInBvc2l0aW9uIjogNzEsCiAgICAgICAgInJlc291cmNlSWQiOiB7CiAgICAgICAgICAia2luZCI6ICJ5b3V0dWJlI3ZpZGVvIiwKICAgICAgICAgICJ2aWRlb0lkIjogIkJkVkhrNUMwTDhVIgogICAgICAgIH0KICAgICAgfQogICAgfSwKICAgIHsKICAgICAgImtpbmQiOiAieW91dHViZSNwbGF5bGlzdEl0ZW0iLAogICAgICAiZXRhZyI6ICJxYWowZUluVlV6WTFkSElYdGY5dGZTY3ZBVHMiLAogICAgICAiaWQiOiAiVUV3MU1EaERNekEyTlRaQ01qVXpSRUpHTGpVeFJqSTBNakF5UlRnMVEwTTNSRFU9IiwKICAgICAgInNuaXBwZXQiOiB7CiAgICAgICAgInB1Ymxpc2hlZEF0IjogIjIwMTItMDctMjlUMTg6MDE6MDZaIiwKICAgICAgICAiY2hhbm5lbElkIjogIlVDSC04MXVheEN3QUFhU2d4UnR4TWt4ZyIsCiAgICAgICAgInRpdGxlIjogIkFzaHRhbmdhIFlvZ2EgVHJpc3RhbmEgTWV0aG9kLCBCcmVhdGgsIFBvc3R1cmUgYW5kIERyaXN0aGkgd2l0aCBLaW5vIE1hY0dyZWdvciIsCiAgICAgICAgImRlc2NyaXB0aW9uIjogIklmIHlvdeKAmXJlIGxvb2tpbmcgZm9yIHlvZ2EgdmlkZW9zIHRoYXQgd2lsbCBzaG93IHlvdSB0aGUgcGVyZmVjdCB3YXkgZm9yIHlvdSB0byBzdGFydCB5b3VyIHlvZ2Egam91cm5leSB0aGVuIEtpbm8gTWFjR3JlZ29y4oCZcyB5b2dhIGNoYW5uZWwgaXMgcGVyZmVjdCBmb3IgeW91ISBXaGV0aGVyIHlvdSBhcmUgbmV3IHRvIHlvZ2Egb3IgYW4gYWR2YW5jZWQgeW9nYSBzdHVkZW50IHlvdSB3aWxsIGZpbmQgYSBmdWxsIHlvZ2EgbGlicmFyeSB3aXRoIGFsbCB0aGUgeW9nYSBwb3N0dXJlcyB0aGF0IHlvdSBuZWVkIHRvIGRldmVsb3AgYSBjb21wbGV0ZSB5b2dhIHByYWN0aWNlLiBZb2dhIGlzIG1vcmUgdGhhbiBqdXN0IGEgcGh5c2ljYWwgcHJhY3RpY2UgeW9nYSBpcyBhIGxpZmVzdHlsZSB0aGF0IGluY2x1ZGVzIGxpdmluZyBhIHBlYWNlZnVsIGxpZmUuIExpdmluZyB0aGUgeW9nYSBsaWZlc3R5bGUgaXMgYWJvdXQgeW9nYSBwcmFjdGljZSwgaW5uZXIgcGVhY2UsIHlvZ2EgZGlldCBhbmQgYmVpbmcgYSBnb29kIHBlcnNvbiBvbiBhbmQgb2ZmIHlvdXIgeW9nYSBtYXQuIEtpbm8gaXMgYSB5b2dhIHRlYWNoZXIsIGF1dGhvciBvZiB0aHJlZSBib29rcywgaW50ZXJuYXRpb25hbCB0ZWFjaGVyLCB3cml0ZXIsIGJsb2dnZXIsIG9ubGluZSB5b2dhIGNsYXNzIHRlYWNoZXIsIElHIHlvZ2EgY2hhbGxlbmdlIGhvc3QgYW5kIG11Y2ggbW9yZS4gU2hlIGNvLWZvdW5kZWQgTWlhbWkgTGlmZSBDZW50ZXIgYW5kIE1pYW1pIFlvZ2EgTWFnYXppbmUgYXMgd2VsbCBhcyBwcm9kdWNlZCBzaXggQXNodGFuZ2EgWW9nYSBEVkRzLiBQcmFjdGljZSB5b2dhLCBjaGFuZ2UgeW91ciB3b3JsZCBvbmUgYnJlYXRoIGF0IGEgdGltZS4gS2lubyBiZWxpZXZlcyB0aGF0IHlvZ2EgaXMgYSB2ZWhpY2xlIGZvciBlYWNoIHN0dWRlbnQgdG8gZXhwZXJpZW5jZSB0aGUgbGltaXRsZXNzIHBvdGVudGlhbCBvZiB0aGUgaHVtYW4gc3Bpcml0LiBZb3UgZG9u4oCZdCBoYXZlIHRvIGJlIHN0cm9uZyBvciBmbGV4aWJsZSB0byBiZWdpbiB0aGUgeW9nYSBwcmFjdGljZSwgYWxsIHlvdSBuZWVkIGlzIGFuIG9wZW4gaGVhcnQgYW5kIHRoZSBpbnNwaXJhdGlvbiB0byBwcmFjdGljZSB5b2dhLiBVbnJvbGwgeW91ciBtYXQgYW5kIGRvIHRoZSBwcmFjdGljZSFcblxuRmFjZWJvb2sgLSBodHRwOi8vd3d3LmZhY2Vib29rLmNvbS9LaW5vWW9nYVxuSW5zdGFncmFtIC0gaHR0cDovL3d3dy5pbnN0YWdyYW0uY29tL0tpbm9Zb2dhXG5CbG9nIC0gaHR0cDovL3d3dy5raW5veW9nYS5jb20iLAogICAgICAgICJ0aHVtYm5haWxzIjogewogICAgICAgICAgImRlZmF1bHQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9VZWNQTE85Mm9oMC9kZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDEyMCwKICAgICAgICAgICAgImhlaWdodCI6IDkwCiAgICAgICAgICB9LAogICAgICAgICAgIm1lZGl1bSI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL1VlY1BMTzkyb2gwL21xZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAzMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiAxODAKICAgICAgICAgIH0sCiAgICAgICAgICAiaGlnaCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL1VlY1BMTzkyb2gwL2hxZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA0ODAsCiAgICAgICAgICAgICJoZWlnaHQiOiAzNjAKICAgICAgICAgIH0sCiAgICAgICAgICAic3RhbmRhcmQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9VZWNQTE85Mm9oMC9zZGRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogNjQwLAogICAgICAgICAgICAiaGVpZ2h0IjogNDgwCiAgICAgICAgICB9LAogICAgICAgICAgIm1heHJlcyI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL1VlY1BMTzkyb2gwL21heHJlc2RlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMTI4MCwKICAgICAgICAgICAgImhlaWdodCI6IDcyMAogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgImNoYW5uZWxUaXRsZSI6ICJLaW5vWW9nYSIsCiAgICAgICAgInBsYXlsaXN0SWQiOiAiUEw1MDhDMzA2NTZCMjUzREJGIiwKICAgICAgICAicG9zaXRpb24iOiA3MiwKICAgICAgICAicmVzb3VyY2VJZCI6IHsKICAgICAgICAgICJraW5kIjogInlvdXR1YmUjdmlkZW8iLAogICAgICAgICAgInZpZGVvSWQiOiAiVWVjUExPOTJvaDAiCiAgICAgICAgfQogICAgICB9CiAgICB9LAogICAgewogICAgICAia2luZCI6ICJ5b3V0dWJlI3BsYXlsaXN0SXRlbSIsCiAgICAgICJldGFnIjogImJLZjRQZ01MT1VuOGFmbVh2SDBuOTMyMTJjRSIsCiAgICAgICJpZCI6ICJVRXcxTURoRE16QTJOVFpDTWpVelJFSkdMalF4TlVReFJEY3pNRUpFTkVaRk56VT0iLAogICAgICAic25pcHBldCI6IHsKICAgICAgICAicHVibGlzaGVkQXQiOiAiMjAxMi0wNy0yOVQxODowMTowNVoiLAogICAgICAgICJjaGFubmVsSWQiOiAiVUNILTgxdWF4Q3dBQWFTZ3hSdHhNa3hnIiwKICAgICAgICAidGl0bGUiOiAiU2hvdWxkZXJzIFN0cmVuZ3RoZW5pbmcgWW9nYSBFeGVyY2lzZSBpbiBEb3dud2FyZCBEb2cgd2l0aCBLaW5vIE1hY0dyZWdvciIsCiAgICAgICAgImRlc2NyaXB0aW9uIjogIklmIHlvdeKAmXJlIGxvb2tpbmcgZm9yIHlvZ2EgdmlkZW9zIHRoYXQgd2lsbCBzaG93IHlvdSB0aGUgcGVyZmVjdCB3YXkgZm9yIHlvdSB0byBzdGFydCB5b3VyIHlvZ2Egam91cm5leSB0aGVuIEtpbm8gTWFjR3JlZ29y4oCZcyB5b2dhIGNoYW5uZWwgaXMgcGVyZmVjdCBmb3IgeW91ISBXaGV0aGVyIHlvdSBhcmUgbmV3IHRvIHlvZ2Egb3IgYW4gYWR2YW5jZWQgeW9nYSBzdHVkZW50IHlvdSB3aWxsIGZpbmQgYSBmdWxsIHlvZ2EgbGlicmFyeSB3aXRoIGFsbCB0aGUgeW9nYSBwb3N0dXJlcyB0aGF0IHlvdSBuZWVkIHRvIGRldmVsb3AgYSBjb21wbGV0ZSB5b2dhIHByYWN0aWNlLiBZb2dhIGlzIG1vcmUgdGhhbiBqdXN0IGEgcGh5c2ljYWwgcHJhY3RpY2UgeW9nYSBpcyBhIGxpZmVzdHlsZSB0aGF0IGluY2x1ZGVzIGxpdmluZyBhIHBlYWNlZnVsIGxpZmUuIExpdmluZyB0aGUgeW9nYSBsaWZlc3R5bGUgaXMgYWJvdXQgeW9nYSBwcmFjdGljZSwgaW5uZXIgcGVhY2UsIHlvZ2EgZGlldCBhbmQgYmVpbmcgYSBnb29kIHBlcnNvbiBvbiBhbmQgb2ZmIHlvdXIgeW9nYSBtYXQuIEtpbm8gaXMgYSB5b2dhIHRlYWNoZXIsIGF1dGhvciBvZiB0aHJlZSBib29rcywgaW50ZXJuYXRpb25hbCB0ZWFjaGVyLCB3cml0ZXIsIGJsb2dnZXIsIG9ubGluZSB5b2dhIGNsYXNzIHRlYWNoZXIsIElHIHlvZ2EgY2hhbGxlbmdlIGhvc3QgYW5kIG11Y2ggbW9yZS4gU2hlIGNvLWZvdW5kZWQgTWlhbWkgTGlmZSBDZW50ZXIgYW5kIE1pYW1pIFlvZ2EgTWFnYXppbmUgYXMgd2VsbCBhcyBwcm9kdWNlZCBzaXggQXNodGFuZ2EgWW9nYSBEVkRzLiBQcmFjdGljZSB5b2dhLCBjaGFuZ2UgeW91ciB3b3JsZCBvbmUgYnJlYXRoIGF0IGEgdGltZS4gS2lubyBiZWxpZXZlcyB0aGF0IHlvZ2EgaXMgYSB2ZWhpY2xlIGZvciBlYWNoIHN0dWRlbnQgdG8gZXhwZXJpZW5jZSB0aGUgbGltaXRsZXNzIHBvdGVudGlhbCBvZiB0aGUgaHVtYW4gc3Bpcml0LiBZb3UgZG9u4oCZdCBoYXZlIHRvIGJlIHN0cm9uZyBvciBmbGV4aWJsZSB0byBiZWdpbiB0aGUgeW9nYSBwcmFjdGljZSwgYWxsIHlvdSBuZWVkIGlzIGFuIG9wZW4gaGVhcnQgYW5kIHRoZSBpbnNwaXJhdGlvbiB0byBwcmFjdGljZSB5b2dhLiBVbnJvbGwgeW91ciBtYXQgYW5kIGRvIHRoZSBwcmFjdGljZSFcblxuRmFjZWJvb2sgLSBodHRwOi8vd3d3LmZhY2Vib29rLmNvbS9LaW5vWW9nYVxuSW5zdGFncmFtIC0gaHR0cDovL3d3dy5pbnN0YWdyYW0uY29tL0tpbm9Zb2dhXG5CbG9nIC0gaHR0cDovL3d3dy5raW5veW9nYS5jb20iLAogICAgICAgICJ0aHVtYm5haWxzIjogewogICAgICAgICAgImRlZmF1bHQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9qa2o4cjkySVQ0WS9kZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDEyMCwKICAgICAgICAgICAgImhlaWdodCI6IDkwCiAgICAgICAgICB9LAogICAgICAgICAgIm1lZGl1bSI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL2prajhyOTJJVDRZL21xZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAzMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiAxODAKICAgICAgICAgIH0sCiAgICAgICAgICAiaGlnaCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL2prajhyOTJJVDRZL2hxZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA0ODAsCiAgICAgICAgICAgICJoZWlnaHQiOiAzNjAKICAgICAgICAgIH0sCiAgICAgICAgICAic3RhbmRhcmQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9qa2o4cjkySVQ0WS9zZGRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogNjQwLAogICAgICAgICAgICAiaGVpZ2h0IjogNDgwCiAgICAgICAgICB9LAogICAgICAgICAgIm1heHJlcyI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL2prajhyOTJJVDRZL21heHJlc2RlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMTI4MCwKICAgICAgICAgICAgImhlaWdodCI6IDcyMAogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgImNoYW5uZWxUaXRsZSI6ICJLaW5vWW9nYSIsCiAgICAgICAgInBsYXlsaXN0SWQiOiAiUEw1MDhDMzA2NTZCMjUzREJGIiwKICAgICAgICAicG9zaXRpb24iOiA3MywKICAgICAgICAicmVzb3VyY2VJZCI6IHsKICAgICAgICAgICJraW5kIjogInlvdXR1YmUjdmlkZW8iLAogICAgICAgICAgInZpZGVvSWQiOiAiamtqOHI5MklUNFkiCiAgICAgICAgfQogICAgICB9CiAgICB9LAogICAgewogICAgICAia2luZCI6ICJ5b3V0dWJlI3BsYXlsaXN0SXRlbSIsCiAgICAgICJldGFnIjogIjIwSmVtZm9LQlJDR0E0OWZBLTBsTmNRdl9fNCIsCiAgICAgICJpZCI6ICJVRXcxTURoRE16QTJOVFpDTWpVelJFSkdMalU0UmtRd00wTkNNemszUWtSRk1FTT0iLAogICAgICAic25pcHBldCI6IHsKICAgICAgICAicHVibGlzaGVkQXQiOiAiMjAxMi0wNy0yOVQxODowMTowNVoiLAogICAgICAgICJjaGFubmVsSWQiOiAiVUNILTgxdWF4Q3dBQWFTZ3hSdHhNa3hnIiwKICAgICAgICAidGl0bGUiOiAiV2hhdCBpcyBBc2h0YW5nYSBWaW55YXNhIFlvZ2E/IHdpdGggS2lubyBNYWNHcmVnb3IiLAogICAgICAgICJkZXNjcmlwdGlvbiI6ICJJZiB5b3XigJlyZSBsb29raW5nIGZvciB5b2dhIHZpZGVvcyB0aGF0IHdpbGwgc2hvdyB5b3UgdGhlIHBlcmZlY3Qgd2F5IGZvciB5b3UgdG8gc3RhcnQgeW91ciB5b2dhIGpvdXJuZXkgdGhlbiBLaW5vIE1hY0dyZWdvcuKAmXMgeW9nYSBjaGFubmVsIGlzIHBlcmZlY3QgZm9yIHlvdSEgV2hldGhlciB5b3UgYXJlIG5ldyB0byB5b2dhIG9yIGFuIGFkdmFuY2VkIHlvZ2Egc3R1ZGVudCB5b3Ugd2lsbCBmaW5kIGEgZnVsbCB5b2dhIGxpYnJhcnkgd2l0aCBhbGwgdGhlIHlvZ2EgcG9zdHVyZXMgdGhhdCB5b3UgbmVlZCB0byBkZXZlbG9wIGEgY29tcGxldGUgeW9nYSBwcmFjdGljZS4gWW9nYSBpcyBtb3JlIHRoYW4ganVzdCBhIHBoeXNpY2FsIHByYWN0aWNlIHlvZ2EgaXMgYSBsaWZlc3R5bGUgdGhhdCBpbmNsdWRlcyBsaXZpbmcgYSBwZWFjZWZ1bCBsaWZlLiBMaXZpbmcgdGhlIHlvZ2EgbGlmZXN0eWxlIGlzIGFib3V0IHlvZ2EgcHJhY3RpY2UsIGlubmVyIHBlYWNlLCB5b2dhIGRpZXQgYW5kIGJlaW5nIGEgZ29vZCBwZXJzb24gb24gYW5kIG9mZiB5b3VyIHlvZ2EgbWF0LiBLaW5vIGlzIGEgeW9nYSB0ZWFjaGVyLCBhdXRob3Igb2YgdGhyZWUgYm9va3MsIGludGVybmF0aW9uYWwgdGVhY2hlciwgd3JpdGVyLCBibG9nZ2VyLCBvbmxpbmUgeW9nYSBjbGFzcyB0ZWFjaGVyLCBJRyB5b2dhIGNoYWxsZW5nZSBob3N0IGFuZCBtdWNoIG1vcmUuIFNoZSBjby1mb3VuZGVkIE1pYW1pIExpZmUgQ2VudGVyIGFuZCBNaWFtaSBZb2dhIE1hZ2F6aW5lIGFzIHdlbGwgYXMgcHJvZHVjZWQgc2l4IEFzaHRhbmdhIFlvZ2EgRFZEcy4gUHJhY3RpY2UgeW9nYSwgY2hhbmdlIHlvdXIgd29ybGQgb25lIGJyZWF0aCBhdCBhIHRpbWUuIEtpbm8gYmVsaWV2ZXMgdGhhdCB5b2dhIGlzIGEgdmVoaWNsZSBmb3IgZWFjaCBzdHVkZW50IHRvIGV4cGVyaWVuY2UgdGhlIGxpbWl0bGVzcyBwb3RlbnRpYWwgb2YgdGhlIGh1bWFuIHNwaXJpdC4gWW91IGRvbuKAmXQgaGF2ZSB0byBiZSBzdHJvbmcgb3IgZmxleGlibGUgdG8gYmVnaW4gdGhlIHlvZ2EgcHJhY3RpY2UsIGFsbCB5b3UgbmVlZCBpcyBhbiBvcGVuIGhlYXJ0IGFuZCB0aGUgaW5zcGlyYXRpb24gdG8gcHJhY3RpY2UgeW9nYS4gVW5yb2xsIHlvdXIgbWF0IGFuZCBkbyB0aGUgcHJhY3RpY2UhXG5cbkZhY2Vib29rIC0gaHR0cDovL3d3dy5mYWNlYm9vay5jb20vS2lub1lvZ2Fcbkluc3RhZ3JhbSAtIGh0dHA6Ly93d3cuaW5zdGFncmFtLmNvbS9LaW5vWW9nYVxuQmxvZyAtIGh0dHA6Ly93d3cua2lub3lvZ2EuY29tIiwKICAgICAgICAidGh1bWJuYWlscyI6IHsKICAgICAgICAgICJkZWZhdWx0IjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvMTFDMTAyMXZLR1UvZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAxMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiA5MAogICAgICAgICAgfSwKICAgICAgICAgICJtZWRpdW0iOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS8xMUMxMDIxdktHVS9tcWRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMzIwLAogICAgICAgICAgICAiaGVpZ2h0IjogMTgwCiAgICAgICAgICB9LAogICAgICAgICAgImhpZ2giOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS8xMUMxMDIxdktHVS9ocWRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogNDgwLAogICAgICAgICAgICAiaGVpZ2h0IjogMzYwCiAgICAgICAgICB9LAogICAgICAgICAgInN0YW5kYXJkIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvMTFDMTAyMXZLR1Uvc2RkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDY0MCwKICAgICAgICAgICAgImhlaWdodCI6IDQ4MAogICAgICAgICAgfSwKICAgICAgICAgICJtYXhyZXMiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS8xMUMxMDIxdktHVS9tYXhyZXNkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDEyODAsCiAgICAgICAgICAgICJoZWlnaHQiOiA3MjAKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgICJjaGFubmVsVGl0bGUiOiAiS2lub1lvZ2EiLAogICAgICAgICJwbGF5bGlzdElkIjogIlBMNTA4QzMwNjU2QjI1M0RCRiIsCiAgICAgICAgInBvc2l0aW9uIjogNzQsCiAgICAgICAgInJlc291cmNlSWQiOiB7CiAgICAgICAgICAia2luZCI6ICJ5b3V0dWJlI3ZpZGVvIiwKICAgICAgICAgICJ2aWRlb0lkIjogIjExQzEwMjF2S0dVIgogICAgICAgIH0KICAgICAgfQogICAgfQogIF0sCiAgInBhZ2VJbmZvIjogewogICAgInRvdGFsUmVzdWx0cyI6IDc1LAogICAgInJlc3VsdHNQZXJQYWdlIjogMTAKICB9Cn0K
    http_version: null
  recorded_at: Mon, 11 May 2020 23:06:35 GMT
recorded_with: VCR 5.1.0
